owner,repo,commit_hash,commit_url,performance_message
prestodb,presto,a972bba874890115d606de4155c5bb5b79de669f,https://github.com/prestodb/presto/commit/a972bba874890115d606de4155c5bb5b79de669f,Add distinct semi join plan optimization
opentripplanner,OpenTripPlanner,55cd395f76c3ab978d6de993b3af70474dec9e79,https://github.com/opentripplanner/OpenTripPlanner/commit/55cd395f76c3ab978d6de993b3af70474dec9e79,Always connect area interior to closest edge  Connection from inside area to the closest edge test randomly fails due to accuracy issues. Luckily  there is no need to test intersection at all because it is topologically impossible that something blocks the connection.
wushuo894,ani-rss,1ca7ea332f537faf599a5ae943745cf6bb3f4a96,https://github.com/wushuo894/ani-rss/commit/1ca7ea332f537faf599a5ae943745cf6bb3f4a96,优化ip范围判断
wushuo894,ani-rss,7d2caf9809e890fa306e33396398e9f3d6680cdc,https://github.com/wushuo894/ani-rss/commit/7d2caf9809e890fa306e33396398e9f3d6680cdc,优化更新流程
questdb,questdb,52ee7fe43ea3ca6e8da50cb57342813b48ce4bbc,https://github.com/questdb/questdb/commit/52ee7fe43ea3ca6e8da50cb57342813b48ce4bbc,chore(core): add bitmap index for `TxnScoreboardV2` (#5629)
vespa-engine,vespa,8aaaf20ea74c6072e93783a55bdffe18762d1e5e,https://github.com/vespa-engine/vespa/commit/8aaaf20ea74c6072e93783a55bdffe18762d1e5e,Simplify reference counting of HTTP requests  Take reference once created and once after request is completed
opensolon,solon,dd1516cf1bff9feba39a23e816a4a03113204c94,https://github.com/opensolon/solon/commit/dd1516cf1bff9feba39a23e816a4a03113204c94,优化 solon RenderManager 对 contentTypeNew 的匹配
apache,iotdb,87a37c2e37ae1f3130df9521a7ba0d898af6813d,https://github.com/apache/iotdb/commit/87a37c2e37ae1f3130df9521a7ba0d898af6813d,Load: Introduce thread pool for tablet conversion and insertion (#15611)
chinabugotech,hutool,a34637f0713e993e6721dd37e3244433eb7ec588,https://github.com/chinabugotech/hutool/commit/a34637f0713e993e6721dd37e3244433eb7ec588,优化XXXToMapCopier的部分性能（pr#1345@Gitee）
netty,netty,4f156c9e3815267d9d26909dc6098d88e00d450d,https://github.com/netty/netty/commit/4f156c9e3815267d9d26909dc6098d88e00d450d,Replace modulo with bitwise operator when possible (#15227)  Motivation:  In some cases modulo operator can be replaced with a cheaper bitwise version:  `% 128` -> `& 0x7F` `% 8` -> `& 0x07` `/ 128` -> `>>> 7`  Modification:  Replaced modulo operator with bitwise + division with shifting.  Result:  Cheaper CPU instructions used instead of modulo operator.
chinabugotech,hutool,b0e130233284488c370c73b0c5b206121dda4d8f,https://github.com/chinabugotech/hutool/commit/b0e130233284488c370c73b0c5b206121dda4d8f,Update ObjectMapper.java  cn.hutool.json.ObjectMapper.java 212行 mapFromStr函数 重复调用StrUtil.trim(source)
SpigotMC,BungeeCord,60a3bf082f9fa0a09a2f4181e3abe9af0d341b5a,https://github.com/SpigotMC/BungeeCord/commit/60a3bf082f9fa0a09a2f4181e3abe9af0d341b5a,Preallocate compression output buffer to remove unnecessary resizing
theonedev,onedev,77d1677eb2ba2fc8face4c58a58a1b3410f53ed8,https://github.com/theonedev/onedev/commit/77d1677eb2ba2fc8face4c58a58a1b3410f53ed8,chore: Continue to improve mass projects performance
eclipse-vertx,vert.x,2053846a13466b6dd20e062c7f39ccc9739dd1e2,https://github.com/eclipse-vertx/vert.x/commit/2053846a13466b6dd20e062c7f39ccc9739dd1e2,Use simple parser instead of regex for parsing resolv.conf (#5439)  Closes: #5429
AxonFramework,AxonFramework,ec19ff521ac2848fa3e5adce79fb27a2c7853ca3,https://github.com/AxonFramework/AxonFramework/commit/ec19ff521ac2848fa3e5adce79fb27a2c7853ca3,Adapt the AnnotationCommandHandlerAdapter to use the SimpleCommandHandlingComponent as registry  calculating reflection and handler registrations at boot time
locationtech,jts,7835f24417b2e748bf251814779ef652f28895c4,https://github.com/locationtech/jts/commit/7835f24417b2e748bf251814779ef652f28895c4,Add MaximumInscribedCircle isRadiusWithin fast envelope check
apache,iotdb,1dc47d48e074211940c1e5a0d9ef8440eabacbcf,https://github.com/apache/iotdb/commit/1dc47d48e074211940c1e5a0d9ef8440eabacbcf,Rest Service add FastLastQuery method
chinabugotech,hutool,3ff79b3f23b558ac6fcb95df2bc5bd11424ca5d5,https://github.com/chinabugotech/hutool/commit/3ff79b3f23b558ac6fcb95df2bc5bd11424ca5d5,!1335 优化BeanUtil.copyToList拷贝较大数据量的性能问题 Merge pull request !1335 from IzayoiYurin/v5-dev
apache,rocketmq,d63373a152ebd395cdce6a2e04e01b62e54c76af,https://github.com/apache/rocketmq/commit/d63373a152ebd395cdce6a2e04e01b62e54c76af,[ISSUE #8957] Remove excess traffic and fix cache inconsistencies (#8958)
apache,pinot,465c811675fedd8fd0b9834e3309887cc23c8409,https://github.com/apache/pinot/commit/465c811675fedd8fd0b9834e3309887cc23c8409,Introducing MSE result holder config to minimize rehashing for high cardinality group by (#14981)
camunda,camunda,ebc21be91705a59d9d87b41979300697b4771dc8,https://github.com/camunda/camunda/commit/ebc21be91705a59d9d87b41979300697b4771dc8,perf: avoid copy of child element instances
apache,ignite,3ce3f208bed1a2d4bdcfb09aabb528334e484beb,https://github.com/apache/ignite/commit/3ce3f208bed1a2d4bdcfb09aabb528334e484beb,IGNITE-24688 Add FilterCorrelate rule into HEP planner phase (#11905)
YunaiV,ruoyi-vue-pro,d128d787188fdae094528d477ae1672c430db0ae,https://github.com/YunaiV/ruoyi-vue-pro/commit/d128d787188fdae094528d477ae1672c430db0ae,reactor：easy-trans 默认禁用，避免影响接口性能
apache,druid,09fd96ec24f9cb9e2d37a794ec5b2725db7c75fb,https://github.com/apache/druid/commit/09fd96ec24f9cb9e2d37a794ec5b2725db7c75fb,Expr: Collect BindingAnalysis in bulk rather than one at a time. (#17613)  Speeds up analysis of functions with large numbers of arguments  such as CASE statements with many branches. The prior code would call "with" for each argument on the accumulated analysis so far  which needlessly re-created the sets of variables over and over.
apache,flink,d0165dee9e0281c53221f433ddbc42ff18c6159e,https://github.com/apache/flink/commit/d0165dee9e0281c53221f433ddbc42ff18c6159e,[FLINK-37130][table] Minor optimization of async state api usage in window join operator
crate,crate,cd9231665dcc1eb2e7ddb4d9b8bce83964e7f50d,https://github.com/crate/crate/commit/cd9231665dcc1eb2e7ddb4d9b8bce83964e7f50d,bp: Parallelize stale index deletion  https://github.com/opensearch-project/OpenSearch/pull/613/
questdb,questdb,129c7b08b1b25f2fd13d9ef2c6b017fee4775e30,https://github.com/questdb/questdb/commit/129c7b08b1b25f2fd13d9ef2c6b017fee4775e30,perf(sql): improve performance of symbol index lookups (#5953)
DependencyTrack,dependency-track,248e82f432a6d30cf6fbcbee1865a2723a70d0b4,https://github.com/DependencyTrack/dependency-track/commit/248e82f432a6d30cf6fbcbee1865a2723a70d0b4,Ensure VulnerableSoftware query is able to leverage indexes  Signed-off-by: nscuro <nscuro@protonmail.com>
alibaba,fastjson2,b8aaa09631c46f5a8bec0f770bea1e8351db304e,https://github.com/alibaba/fastjson2/commit/b8aaa09631c46f5a8bec0f770bea1e8351db304e,optimization for jsonb deserialize non default constructor
plutext,docx4j,c05120cdf86060de0954be9b91be834a37f4b1a9,https://github.com/plutext/docx4j/commit/c05120cdf86060de0954be9b91be834a37f4b1a9,StAX delegates to NonXSLT to traverse bare content controls. Implement effective way of invoking BindingTraverserStAX
apache,flink,fe1b77785fca59f9c46f4de92a3b64326f2a7472,https://github.com/apache/flink/commit/fe1b77785fca59f9c46f4de92a3b64326f2a7472,[FLINK-37400] Remove redundant serializer duplication during value serialization of ForSt states (#26227)
camunda,camunda,8db51b7d9a212eee4c72c32dc5a244df3549552c,https://github.com/camunda/camunda/commit/8db51b7d9a212eee4c72c32dc5a244df3549552c,feat: introduce `wrapChangedAttributesIfValueChanged` method and integrate it into `UserTaskUpdateProcessor`  The newly added `wrapChangedAttributesIfValueChanged` method improves the efficiency of updating user task records by selectively updating attributes that have changed. Unlike `wrapChangedAttributes`  it filters attributes based on value changes and ensures only the relevant ones are tracked.
jenkinsci,jenkins,59ce26eb609b5877d7138a28bf6717d1ed169068,https://github.com/jenkinsci/jenkins/commit/59ce26eb609b5877d7138a28bf6717d1ed169068,Update hudson.model.Queue for accelerate long buildableItem queue
spring-projects,spring-ai,e45b1b3f8d6fd5079ed889ad5b8687d985974268,https://github.com/spring-projects/spring-ai/commit/e45b1b3f8d6fd5079ed889ad5b8687d985974268,perf(logging): optimize debug logging in PromptChatMemoryAdvisor (#3448)  - Enclosed debug logging statements within an isDebugEnabled() check - Reduced unnecessary method calls and object creations when debug logging is disabled  Auto-cherry-pick to 1.0.x  Signed-off-by: Ahoo Wang <ahoowang@qq.com>
quarkusio,quarkus,80e4bc642bc088403f29c6c8c6e6b1bd98fc2df3,https://github.com/quarkusio/quarkus/commit/80e4bc642bc088403f29c6c8c6e6b1bd98fc2df3,OpenTelemetryLogHandler - Do not read config for each publish  This is definitely suboptimal and can lead to infinite loops.  Also made some other micro improvements.
FasterXML,jackson-databind,3f6fbb4c92084237dff239d05d57ca150ee2adfd,https://github.com/FasterXML/jackson-databind/commit/3f6fbb4c92084237dff239d05d57ca150ee2adfd,Minor work for #4907: reduce _annotation_ introspection of JDK types further (#4927)
netty,netty,595a07d432281bbd27e57fd1154477efcd841143,https://github.com/netty/netty/commit/595a07d432281bbd27e57fd1154477efcd841143,IoUring: Submit after completion queue was processed (#14696)  Motivation:  We should try to submit one more time after we did run all completions. Otherwise we might introduce latency that will hurt performance.  Modifications:  Add one more submit call.  Result:  Better troughput.  Before the change: ``` Destination: [127.0.0.1]:8088 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1 connections. Total data sent:     134066.2 MiB (140578586624 bytes) Total data received: 134066.1 MiB (140578537472 bytes) Bandwidth per channel: 74755.196⇅ Mbps (9344399.5 kBps) Aggregate bandwidth: 37377.591↓  37377.605↑ Mbps Packet rate estimate: 3424327.9↓  3208145.5↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0883 s. ```  After this change: ``` Destination: [127.0.0.1]:8088 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1 connections. Total data sent:     250820.2 MiB (263004028928 bytes) Total data received: 250812.7 MiB (262996131840 bytes) Bandwidth per channel: 139956.971⇅ Mbps (17494621.4 kBps) Aggregate bandwidth: 69977.435↓  69979.536↑ Mbps Packet rate estimate: 6406626.3↓  6006391.8↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0664 s. ```
Konloch,bytecode-viewer,7eef70a8466d00d184328a7f092f36f5405e0ee1,https://github.com/Konloch/bytecode-viewer/commit/7eef70a8466d00d184328a7f092f36f5405e0ee1,Merge pull request #534 from oraveczandrew/resource-list  speed up the resource file tree generation
AxonFramework,AxonFramework,a1d6ed3bf3c54048cbb8d9350bbc08e2a6c97c0e,https://github.com/AxonFramework/AxonFramework/commit/a1d6ed3bf3c54048cbb8d9350bbc08e2a6c97c0e,Added caching for unknown classes  Resolving classes based on a name that did not yield any results was very slow. This meant that processing a stream of event where the majority of events aren't represented as classes was slower than a case where the classes are available on the class path.
pac4j,pac4j,aacb494fbc41656a6a5cc45f5b550f9ee55aebd0,https://github.com/pac4j/pac4j/commit/aacb494fbc41656a6a5cc45f5b550f9ee55aebd0,feat: Resolve saml2 metadata url concurrently via ranges (#3342)  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges  * feat: resolve saml2 metadata url concurrently via ranges
orientechnologies,orientdb,84dcb2280f63046be8cbf40b7e45b559fa632b1c,https://github.com/orientechnologies/orientdb/commit/84dcb2280f63046be8cbf40b7e45b559fa632b1c,feat: add scoring of index selection in index finder
wildfly,wildfly,15af22008e4907a070cf514041913dc9ec2ffa2c,https://github.com/wildfly/wildfly/commit/15af22008e4907a070cf514041913dc9ec2ffa2c,[WFLY-20102] only encode and log route for first getRoute call
prestodb,presto,05b1df91924ae2dcba9dbdd16c9037fb58d2d84e,https://github.com/prestodb/presto/commit/05b1df91924ae2dcba9dbdd16c9037fb58d2d84e,Allow connector optimizer to apply to IndexSourceNode
eclipse-vertx,vert.x,d9c81c298e6f4669b45960f46a6ea2e203e38f12,https://github.com/eclipse-vertx/vert.x/commit/d9c81c298e6f4669b45960f46a6ea2e203e38f12,Add a strict thread mode to Vert.x HTTP server options to optimize for event-loop thread exclusive submissions.
UniversalMediaServer,UniversalMediaServer,6322b97efe4a0c15174019bb5c58214d4212b24f,https://github.com/UniversalMediaServer/UniversalMediaServer/commit/6322b97efe4a0c15174019bb5c58214d4212b24f,CDS BrowseDirectChildren / unnecessary discovery of children of children (#5233)  * There is no need to eager discover children of children. This makes the browse request very time consuming.  * removed unused imports  ---------  Co-authored-by: ik666 <satfreak666@gmx.de>
debezium,debezium,084f4e60d1833c7839362cfb5df0af7e077fc6a4,https://github.com/debezium/debezium/commit/084f4e60d1833c7839362cfb5df0af7e077fc6a4,DBZ-8570 Reduce frequency table exists and column metadata queries
camunda,camunda,218070f76a644463ecfd71a4753f8f978edcee9c,https://github.com/camunda/camunda/commit/218070f76a644463ecfd71a4753f8f978edcee9c,perf: avoid copy of `ElementInstance` (#34431)  This adds another `get` variant on `ColumnFamily` that takes a `Supplier<ValueType>` and returns a fresh instance instead of the internally recycled value instance. This is much more efficient for callers that otherwise would have to immediately create a copy again. First used for `ElementInstance`  one of the most prominent allocation sites seen during profiling.  Memory allocations before:  ![image](https://github.com/user-attachments/assets/a3c9103a-07e5-4cea-8343-bf777fdbfe12) 95% in copying  CPU time before:  ![image](https://github.com/user-attachments/assets/480c92bf-47e9-42cd-a593-a0d5f602e42e) 80% in copying  CPU time by caller before:  ![image](https://github.com/user-attachments/assets/1b1c2686-b9df-4a15-962d-53ec9394f005)  Memory allocations after:  ![image](https://github.com/user-attachments/assets/15c991b5-f438-4bf5-9574-ab34e8b6ff37) 100% on the returned bytes from RocksDB  instead of ~4%  CPU time after:  ![image](https://github.com/user-attachments/assets/ab5fc7cc-74f0-4cc7-aa54-55cd5aafa58b) 100% on the call to RocksDB  instead of ~19%  CPU time by caller after:  ![image](https://github.com/user-attachments/assets/bc97c821-9d36-4ece-b9de-57cfa1d22887)
houbb,sensitive-word,76d0e1d2035f60bbe8f7107b3e4327c7a3ae6ed5,https://github.com/houbb/sensitive-word/commit/76d0e1d2035f60bbe8f7107b3e4327c7a3ae6ed5,黑白名单一次遍历
AxonFramework,AxonFramework,2783c107d50183a68dc1b788cd3beb195b453384,https://github.com/AxonFramework/AxonFramework/commit/2783c107d50183a68dc1b788cd3beb195b453384,Removed excessive use of copyOf
jenkinsci,jenkins,c4ce1b7976c5d4462e96b6a040f01e662f42a3b5,https://github.com/jenkinsci/jenkins/commit/c4ce1b7976c5d4462e96b6a040f01e662f42a3b5,Render `t:artifactList` lazily (#10623)
opentripplanner,OpenTripPlanner,0286871e864720ece9aa914b5e4c272f558cc828,https://github.com/opentripplanner/OpenTripPlanner/commit/0286871e864720ece9aa914b5e4c272f558cc828,Use unboxed long comparator when sorting visibility nodes
Graylog2,graylog2-server,8fb154facc4f31dac70d58664f931ba520385752,https://github.com/Graylog2/graylog2-server/commit/8fb154facc4f31dac70d58664f931ba520385752,compile patterns statically
knowm,XChange,efce27c9319fa22854e0b69e8477635faeba5e29,https://github.com/knowm/XChange/commit/efce27c9319fa22854e0b69e8477635faeba5e29,[Kraken] - Improve performance of checksum computation
quarkusio,quarkus,b57c12820823993cff36db0742d3a86c2ef5ed14,https://github.com/quarkusio/quarkus/commit/b57c12820823993cff36db0742d3a86c2ef5ed14,Improving Qute Escaper to be as branch-free as possible
vespa-engine,vespa,5a3a3aec30d10e3e0a4f6cfa92e35a0ca4ebdab9,https://github.com/vespa-engine/vespa/commit/5a3a3aec30d10e3e0a4f6cfa92e35a0ca4ebdab9,Merge pull request #34376 from vespa-engine/arnej/md5-from-bytes  get MD5 from bytes directly
YunaiV,ruoyi-vue-pro,37c725c1a3d7970fdd8f9c35b02a12439725a092,https://github.com/YunaiV/ruoyi-vue-pro/commit/37c725c1a3d7970fdd8f9c35b02a12439725a092,refactor(iot): 移除升级任务中的设备名称设置  - 删除了创建升级任务时设置设备名称的代码逻辑 - 优化了升级任务初始化过程，减少了不必要的设备名称查询和设置操作
apache,hbase,30ce21bcadb403feef1007c22c5549fdcf8d13d9,https://github.com/apache/hbase/commit/30ce21bcadb403feef1007c22c5549fdcf8d13d9,HBASE-29252: Reduce allocations in RowIndexSeekerV1 (#6902)  Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
alibaba,fastjson2,c12ef42a7e4eded00188ff16eed828c60b0c7acb,https://github.com/alibaba/fastjson2/commit/c12ef42a7e4eded00188ff16eed828c60b0c7acb,refactor(JSONWriterUTF8): Optimize string encoding methods  Refactored the string encoding logic by removing redundant variable assignments and modifying method visibility for better performance and maintainability.
camunda,camunda,cb8e49fe17c55bbb729887610f66f43d9ed20441,https://github.com/camunda/camunda/commit/cb8e49fe17c55bbb729887610f66f43d9ed20441,refactor: avoid re-allocating metrics all the time
keycloak,keycloak,5219a331b924aea04b6c17bca66ca6fcb54ccc5c,https://github.com/keycloak/keycloak/commit/5219a331b924aea04b6c17bca66ca6fcb54ccc5c,Skip computing lifespan for read-only sessions  Fixes #40980  Signed-off-by: Pedro Ruivo <1492066+pruivo@users.noreply.github.com> Co-authored-by: Pedro Ruivo <1492066+pruivo@users.noreply.github.com>
prestodb,presto,e782b626cd1146880a5e1b9cc85e3b2139448c00,https://github.com/prestodb/presto/commit/e782b626cd1146880a5e1b9cc85e3b2139448c00,[native] Replace EXPLAIN (TYPE DISTRIBUTED) with EXPLAIN (TYPE VALIDATE) for faster  lightweight analysis
apache,iotdb,ca8ce24f2f0c1703164412a1d704c1166ebbafaa,https://github.com/apache/iotdb/commit/ca8ce24f2f0c1703164412a1d704c1166ebbafaa,Pipe: Optimize Drop Pipe high priority tasks cannot obtain SubTask object lock (#15404)  Co-authored-by: Steve Yurong Su <rong@apache.org>
apache,avro,11ca5da73cd16aef52b55f0dce814420a7403caa,https://github.com/apache/avro/commit/11ca5da73cd16aef52b55f0dce814420a7403caa,AVRO-4067: Optimize First Byte of Long Decode (#3183)
netty,netty,8f81927f1e96b9fe8aa6ac18f3eb03e3c43f4ed7,https://github.com/netty/netty/commit/8f81927f1e96b9fe8aa6ac18f3eb03e3c43f4ed7,Allocate bytebuf without magazine lock when threads get collisions (#14594) (#14729)  This PR continued from https://github.com/netty/netty/pull/14534 which was mis-closed.  Co-authored-by: old driver <29225782+laosijikaichele@users.noreply.github.com> Co-authored-by: Norman Maurer <norman_maurer@apple.com>
apache,pinot,7406fac039125fbf709e42c4c1175d8160850054,https://github.com/apache/pinot/commit/7406fac039125fbf709e42c4c1175d8160850054,Optimize QueryContext.isUnsafeTrim (#16312)
apache,maven,38e0a719e8970c51bf7067b7b1655472b0888705,https://github.com/apache/maven/commit/38e0a719e8970c51bf7067b7b1655472b0888705,Add PathMatcherFactory service with directory filtering optimization (#10923)  This PR adds a comprehensive PathMatcherFactory service to Maven 4 API with directory filtering optimization capabilities  addressing the need for exclude-only pattern matching and performance optimizations.  ## New API Features  ### PathMatcherFactory Interface - createPathMatcher(baseDirectory  includes  excludes  useDefaultExcludes) - createPathMatcher(baseDirectory  includes  excludes) - convenience overload - createExcludeOnlyMatcher(baseDirectory  excludes  useDefaultExcludes) - createIncludeOnlyMatcher(baseDirectory  includes) - convenience method - deriveDirectoryMatcher(fileMatcher) - directory filtering optimization  ### DefaultPathMatcherFactory Implementation - Full implementation of all PathMatcherFactory methods - Delegates to PathSelector for actual pattern matching - Provides directory optimization via PathSelector.couldHoldSelected() - Fail-safe design returning INCLUDES_ALL for unknown matcher types  ## PathSelector Enhancements  ### Null Safety Improvements - Added @Nonnull annotation to constructor directory parameter - Added Objects.requireNonNull() validation with descriptive error message - Moved baseDirectory assignment to beginning for fail-fast behavior - Updated JavaDoc to document NullPointerException behavior  ### Directory Filtering Support - Added canFilterDirectories() method to check optimization capability - Made INCLUDES_ALL field package-private for factory reuse - Enhanced couldHoldSelected() method accessibility  ## Directory Filtering Optimization  The deriveDirectoryMatcher() method enables significant performance improvements by allowing plugins to skip entire directory trees when they definitively won't contain matching files. This preserves Maven 3's optimization behavior.  ### Usage Example:  ## Comprehensive Testing  ### DefaultPathMatcherFactoryTest - Tests all factory methods with various parameter combinations - Verifies null parameter handling (NullPointerException) - Tests directory matcher derivation functionality - Includes edge cases and fail-safe behavior verification  ### Backward Compatibility - All existing PathSelector functionality preserved - No breaking changes to existing APIs - Enhanced error handling with better exception types  ## Benefits  1. **Plugin Compatibility**: Enables maven-clean-plugin and other plugins to use exclude-only patterns efficiently 2. **Performance**: Directory filtering optimization preserves Maven 3 behavior 3. **Developer Experience**: Clean service interface with comprehensive JavaDoc 4. **Robustness**: Fail-fast null validation and defensive programming 5. **Future-Proof**: Extensible design for additional pattern matching needs  ## Related Work  This implementation complements PR #10909 by @desruisseaux which addresses PathSelector bug fixes. Both PRs can be merged independently and work together to provide complete exclude-only functionality.  Addresses performance optimization suggestions and provides the missing API methods needed by Maven plugins for efficient file filtering.
alibaba,fastjson2,2c90256b2d6d072709cfe39d4d4d7c2f0a05aa48,https://github.com/alibaba/fastjson2/commit/2c90256b2d6d072709cfe39d4d4d7c2f0a05aa48,optimize divide
apache,hudi,cb32e5e1bac58cbccba8c92c91e7bed4780e9858,https://github.com/apache/hudi/commit/cb32e5e1bac58cbccba8c92c91e7bed4780e9858,[HUDI-8126] Use union to parallelize data and error table writes (#12813)
quarkusio,quarkus,ca8c426a137447c3ddd91ec487f8dcef91d7e73d,https://github.com/quarkusio/quarkus/commit/ca8c426a137447c3ddd91ec487f8dcef91d7e73d,Merge pull request #48643 from pcasaes/pc/dont-wait-topics-if-check-disabled  Do not wait for topics to created if topic check disabled
igniterealtime,Openfire,e69241b733bc989f5a1ad7de6515d84c719955c8,https://github.com/igniterealtime/Openfire/commit/e69241b733bc989f5a1ad7de6515d84c719955c8,OF-2811: Must not block on eventloop  OF-2808 describes an issue in which a session that is resumed gets closed. This is caused by the asynchronous 'close' operation to execute 'connection close' listeners on a session that  in another thread  has already been resumed.  The fix for OF-2808 introduces a Latch  that causes a thread to block. If that thread is one of a Netty EventLoop  all processing stops (possibly leading to the latch never be released  as the connection close listeners cannot operate).  This commit reverts the change for OF-2808  and applies a new fix for that issue: disallow a session that's already in the process of being closed from resumed.
debezium,debezium,f9805daf5a95ea9298f538eb9d281dea4c68a9b2,https://github.com/debezium/debezium/commit/f9805daf5a95ea9298f538eb9d281dea4c68a9b2,DBZ-8665 Optimize iteration to a single loop
apache,paimon,2439452e1d97ae5e5ab1efa66280ef48cf8d0bd9,https://github.com/apache/paimon/commit/2439452e1d97ae5e5ab1efa66280ef48cf8d0bd9,[rest] Make http client reusable to reduce connection cost (#5145)
dataease,dataease,236c5d8552791268121e15946b45d6dafbc761a4,https://github.com/dataease/dataease/commit/236c5d8552791268121e15946b45d6dafbc761a4,fix: 【数据导出中心】修复切换tab页导致cpu暴增
camunda,camunda,073c4e130cf10c14e33ecf85fe464a49a3e53840,https://github.com/camunda/camunda/commit/073c4e130cf10c14e33ecf85fe464a49a3e53840,perf: avoid copy of `ElementInstance`
camunda,camunda,26c1da20080805d12a17acba1a80caaa2365c426,https://github.com/camunda/camunda/commit/26c1da20080805d12a17acba1a80caaa2365c426,feat: do not allocate a String when the DirectBuffer is empty
opensolon,solon,ef5a4f4cd7f8b5ad3f80f6e012a1fb7835947564,https://github.com/opensolon/solon/commit/ef5a4f4cd7f8b5ad3f80f6e012a1fb7835947564,优化 solon-mvc ActionExecuteHandlerDefault 使用 LazyReference，延迟表单解析（可支持流的原始读取）
Card-Forge,forge,65d4505b67b25a6fd36accc8a7d8b0e506633475,https://github.com/Card-Forge/forge/commit/65d4505b67b25a6fd36accc8a7d8b0e506633475,Update FDeckViewer.java  Use Set instead of List
apache,hudi,81ba19813df3ccea1e8b44f90dc1d4b31c0d7d2a,https://github.com/apache/hudi/commit/81ba19813df3ccea1e8b44f90dc1d4b31c0d7d2a,[HUDI-9626] Prefetch HFiles for metadata table if size is below a configured threshold (#13567)  * add a new write config; * Add HFileReaderFactory; * Add test for the factory class.  ---------  Co-authored-by: rmahindra123 <rmahindra@gmail.com> Co-authored-by: Y Ethan Guo <ethan.guoyihua@gmail.com>
alibaba,spring-ai-alibaba,b546636ecb9e924d9ca5fa8ad603ba4ee6fb39f9,https://github.com/alibaba/spring-ai-alibaba/commit/b546636ecb9e924d9ca5fa8ad603ba4ee6fb39f9,perf(nl2sql): optimize keyword extraction by using parall… (#1790)  perf(KeywordExtractNode): optimize keyword extraction by using parallel processing for multiple questions
eclipse-vertx,vert.x,4a42084a43fef84f88d4242c7cd7b32c63d6b718,https://github.com/eclipse-vertx/vert.x/commit/4a42084a43fef84f88d4242c7cd7b32c63d6b718,VertxConnection enhancements.  Motivation:  1. the implementation of VertxConnection performs un-necessary flushes when a resume operation happens during a outbound drain that will flush the connection 2. resuming the connection while during a read in progress should be a no-op and handled by the channelRead/channelReadComplete operations
igniterealtime,Openfire,7decd3a68b5bc4e0a74b9b0833a949a5b3162f04,https://github.com/igniterealtime/Openfire/commit/7decd3a68b5bc4e0a74b9b0833a949a5b3162f04,Replace StringBuffer with StringBuilder  StringBuilder is a non-thread-safe replacement for StringBuffer.
apache,hudi,43ea93f9cda02806f58c8a6205e7cbc1ac2b2080,https://github.com/apache/hudi/commit/43ea93f9cda02806f58c8a6205e7cbc1ac2b2080,[HUDI-8829] Reduce bytes copy during writing avro records to log file (#12578)
camunda,camunda,008e80952483bde5f823db7e17cfa26b8af2c647,https://github.com/camunda/camunda/commit/008e80952483bde5f823db7e17cfa26b8af2c647,perf: use an `EnumMap`
alibaba,fastjson2,a632e14b37cf01fa78202b0dbbbcc4a886140620,https://github.com/alibaba/fastjson2/commit/a632e14b37cf01fa78202b0dbbbcc4a886140620,fix(JSONReader): Add reference detection disable flag  Add support for disabling reference detection via a new feature flag (MASK_DISABLE_REFERENCE_DETECT). This improves performance in cases where reference tracking is unnecessary.
helidon-io,helidon,c16a9fe49491738d78d584ec1704bc7c48998389,https://github.com/helidon-io/helidon/commit/c16a9fe49491738d78d584ec1704bc7c48998389,Adds configurable buffering support to TcpClientConnection. Defaults to 4KB. New tests. See issue 9858. (#9893)  Signed-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>
quarkusio,quarkus,7d820ecb578ff8325470f63457338f798dcaac2b,https://github.com/quarkusio/quarkus/commit/7d820ecb578ff8325470f63457338f798dcaac2b,Slightly reduce allocations in RESTEasy Reactive startup
quarkusio,quarkus,069c5a035c3671be9e9cd8faacc465c610c112b0,https://github.com/quarkusio/quarkus/commit/069c5a035c3671be9e9cd8faacc465c610c112b0,Avoid using the RuntimeDelegate indirection for MediaType  This call happens a lot  so it makes sense to remove the indirection and just call the final target
prestodb,presto,4098a9baf12da1f2f15f1a7ad0b41ee509755785,https://github.com/prestodb/presto/commit/4098a9baf12da1f2f15f1a7ad0b41ee509755785,[native] Fetch session properties and functions only once from sidecar
primefaces,primefaces,76bf1112792eb39065b1b0b1be8bfd5a2d8326c4,https://github.com/primefaces/primefaces/commit/76bf1112792eb39065b1b0b1be8bfd5a2d8326c4,Refactor: precompile frequently used regex patterns for better performance (#13870)  * Refactor: precompile frequently used regex patterns for better performance  * Refactor: precompile frequently used regex patterns for better performance
apache,pinot,af81c6d866f222a654d0c21266fa246f954df250,https://github.com/apache/pinot/commit/af81c6d866f222a654d0c21266fa246f954df250,Improve consumer lock (#15405)
houbb,sensitive-word,027898530b4f0e4334600aec899db634a8ef9fea,https://github.com/houbb/sensitive-word/commit/027898530b4f0e4334600aec899db634a8ef9fea,Merge pull request #99 from k9999dot/master  refactor: 查找第一个敏感词使用fail_fast同时修复逻辑上的错误，并进行word check策略的优化，统一遍历
pac4j,pac4j,931db723c24a83fe9b3570e4d7e8c7c05236615f,https://github.com/pac4j/pac4j/commit/931db723c24a83fe9b3570e4d7e8c7c05236615f,load saml2 credential provider once (#3353)
BiglySoftware,BiglyBT,9fd9b15f8c8f16aeb81db49c7ed5a82ba8c258a6,https://github.com/BiglySoftware/BiglyBT/commit/9fd9b15f8c8f16aeb81db49c7ed5a82ba8c258a6,Reduce blocking in swarm merger
camunda,camunda,29559ee4475ffc37680b299a11971fdaf03b6613,https://github.com/camunda/camunda/commit/29559ee4475ffc37680b299a11971fdaf03b6613,fix: SnapshotCopy opens the source db in read only mode (#34481)  ## Description The db opened at the source snapshot location is a `SnapshotOnlyDb`  which opens RocksDB in readOnly mode. This should avoid having rocksDB changing the files on disk while performing get operations.  The `forEach` method from `RawTransactionalColumnFamily` has been defined as static as well  in order to be used from `SnapshotOnlyDb` as well  as it does not have an open transaction.  A new `forEachPreallocated` method preallocates `byte [] key  byte[] value` in order to avoid allocating altogether when iterating. To avoid introducing new bugs  a new method has been created  so that the caller knows that the `byte[]` received cannot be used outside the invoked callback.  ## Integration tests: - this fix is tested by PR #34495 (stacked on this branch) ## Related issues  closes #34430
dataease,dataease,a4c8ca27662f35c844e1e7011286066611ba28d5,https://github.com/dataease/dataease/commit/a4c8ca27662f35c844e1e7011286066611ba28d5,fix: 【数据源】解决API数据源同步日志较多时，切换数据源查看页面卡慢问题
trinodb,trino,2bfe5218d0f30309df980ef54543ba1c2716a9ee,https://github.com/trinodb/trino/commit/2bfe5218d0f30309df980ef54543ba1c2716a9ee,Drain the input stream if the remaining data is small
alibaba,fastjson2,3a6964a0d72651cc8d3768d3104676103de573ec,https://github.com/alibaba/fastjson2/commit/3a6964a0d72651cc8d3768d3104676103de573ec,optimize writeStringLatin1
elunez,eladmin,db63c953d49e100b38f65d13b3fc17ead5a831ec,https://github.com/elunez/eladmin/commit/db63c953d49e100b38f65d13b3fc17ead5a831ec,perf: 添加权限检查，优化角色缓存及命名
jplag,JPlag,a8725e1c92723da4cd55ba8ea6357778670d5896,https://github.com/jplag/JPlag/commit/a8725e1c92723da4cd55ba8ea6357778670d5896,Improve subsequence match merging by updating the neighbors instead of recomputing them.
BiglySoftware,BiglyBT,dcbf871d9581cfd618174b6c0e2813deef1a8ed9,https://github.com/BiglySoftware/BiglyBT/commit/dcbf871d9581cfd618174b6c0e2813deef1a8ed9,Improve performance of view-title-info refresh
alibaba,spring-ai-alibaba,f2165ee445b9e21e0a1031c95868e9ad34cbd621,https://github.com/alibaba/spring-ai-alibaba/commit/f2165ee445b9e21e0a1031c95868e9ad34cbd621,feat: 优化BrowserAgent和BrowserUseTool，增强浏览器状态缓存和文本获取逻辑
apache,ignite,8ee63d7fc2c6a4965c992a27c5660972bd9921e0,https://github.com/apache/ignite/commit/8ee63d7fc2c6a4965c992a27c5660972bd9921e0,IGNITE-24168 Fixed performance drop caused by IGNITE-22375 (#11797)
apache,hbase,abc8b430d56fc338fe9f7f4e04cd1e626966878a,https://github.com/apache/hbase/commit/abc8b430d56fc338fe9f7f4e04cd1e626966878a,HBASE-29253 Avoid allocating a new closure on every row processed by StoreScanner (#6901)  Signed-off-by: Duo Zhang <zhangduo@apache.org>
LibrePDF,OpenPDF,f56a76926730813719ee27eda3a7458dd2dfb33d,https://github.com/LibrePDF/OpenPDF/commit/f56a76926730813719ee27eda3a7458dd2dfb33d,Register font only once in static block instead on every constructor call and degrade performance (#1373)  Co-authored-by: Ioannis  Giannoulas <igiannoulas@pi-ag.com>
apache,logging-log4j2,3709962553ddc27774163eb77845b0a47a7b9684,https://github.com/apache/logging-log4j2/commit/3709962553ddc27774163eb77845b0a47a7b9684,Improve performance and avoid memory consumption if logging primitive arrays as parameters (#3645)  Current implementation: Method ParameterFormatter.appendArray() delegats to java.util.Arrays.toString() which then allocates a new StringBuilder to return a String which is then added to the existing StringBuilder.  Improved implementation: For all primitive types  a method like ParameterFormatter.appendArray(int[]  StringBuilder) has been added which is called by ParameterFormatter.appendArray() and avoids the unnecessary object creation.  * review comments
theonedev,onedev,eeef3f8f94606b0319d19c7d8a8e64883a140a76,https://github.com/theonedev/onedev/commit/eeef3f8f94606b0319d19c7d8a8e64883a140a76,feat: Performance improvements for massive number of projects (more than 20k) (OD-2485)
vespa-engine,vespa,6780da11b738af8f31115f94081867bb721502cf,https://github.com/vespa-engine/vespa/commit/6780da11b738af8f31115f94081867bb721502cf,Merge pull request #34021 from vespa-engine/arnej/avoid-extra-fill  avoid extra fill() round-trips
thingsboard,thingsboard,cde8bd1c93f5075a08f25e9bc5ddf42ea20c06c1,https://github.com/thingsboard/thingsboard/commit/cde8bd1c93f5075a08f25e9bc5ddf42ea20c06c1,AI rule node: replace derived query for bulk deletion by tenant ID with JPQL query
apache,iotdb,010843f89336e1e1f646f6b84b5040541e5b7c02,https://github.com/apache/iotdb/commit/010843f89336e1e1f646f6b84b5040541e5b7c02,Optimized the show/query devices logic to only return required attributes & Reduced unnecessary CPU usage in schema tsBlock building (#15109)
runelite,runelite,d8806e3040148e0e9dca7146ed1c786d7fc24fce,https://github.com/runelite/runelite/commit/d8806e3040148e0e9dca7146ed1c786d7fc24fce,worldmap: deduplicate teleport icons
vespa-engine,vespa,e5610ae3ee5d4e18bfee9f552f27aeb00faced92,https://github.com/vespa-engine/vespa/commit/e5610ae3ee5d4e18bfee9f552f27aeb00faced92,Remove execution time type check: We already verified
apache,iotdb,e7ce326ca07726f570efd7cb37deb51220841d36,https://github.com/apache/iotdb/commit/e7ce326ca07726f570efd7cb37deb51220841d36,[opt](query) Optimize count(1)  count(constant expression) to count(*)
ClickHouse,clickhouse-java,c5563761657aa111fec5f093cbd0582f516876ae,https://github.com/ClickHouse/clickhouse-java/commit/c5563761657aa111fec5f093cbd0582f516876ae,fixed by index perf. added using ImmutableMap
netty,netty,5457a0b9f916afa05398755536ae0e84e5408300,https://github.com/netty/netty/commit/5457a0b9f916afa05398755536ae0e84e5408300,Remove ConcurrentSet usage and replace Collections.newSetFromMap (#15187)  with ConcurrentHashMap.newKeySet().  Motivation:  `ConcurrentHashMap.newKeySet()` creates a more specialized version of `Map` than `Collections.newSetFromMap`  so it should be a bit more effective.  Modification:  - Just use `ConcurrentHashMap.newKeySet()`  Result:  Cleanup
netty,netty,da3ca4b6ab100455592596c3f32d9cc46c3491ba,https://github.com/netty/netty/commit/da3ca4b6ab100455592596c3f32d9cc46c3491ba,Buffer slices perform bound checks twice (#15471)  Motivation:  Avoid unnecessary bound checks on offset-based accesses  Modification:  Remove the unnecessary checks  Result:  Faster sliced buffer accesses
opensolon,solon,eef82c1e6ea315b0b22865157be7926228b2bcad,https://github.com/opensolon/solon/commit/eef82c1e6ea315b0b22865157be7926228b2bcad,优化 solon-net-httputils 添加 JdkHttpDispatcher 类，异步改用自带线程池
apache,hbase,262c5bb767618074dd22b074aee19670d81c0884,https://github.com/apache/hbase/commit/262c5bb767618074dd22b074aee19670d81c0884,HBASE-28836 Parallize the file archival to improve the split times (#6483)  Signed-off-by: Viraj Jasani <vjasani@apache.org> Signed-off-by: David Manning <david.manning@salesforce.com> Signed-off-by: Umesh Kumar <9414umeshkumar@gmail.com>
quarkusio,quarkus,8180ac38c169dcead95ac8d27994fad03e1404b8,https://github.com/quarkusio/quarkus/commit/8180ac38c169dcead95ac8d27994fad03e1404b8,Merge pull request #46208 from gsmet/avoid-some-toString  Avoid calling MethodInfo#toString() when unnecessary
apache,flink,9bcc41dc233c754a119e188d8801b48ff3fb434f,https://github.com/apache/flink/commit/9bcc41dc233c754a119e188d8801b48ff3fb434f,[FLINK-37109][state] Improve state processor API key iteration speed
apache,hbase,42efe9f768542029980bf2859bc5a32f5890dded,https://github.com/apache/hbase/commit/42efe9f768542029980bf2859bc5a32f5890dded,HBASE-29112 Apply KeyOnlyFilter to RowCounter (#6666)  Signed-off-by: Duo Zhang <zhangduo@apache.org>
Konloch,bytecode-viewer,d8907cadb2bd756ec6b240d39d00b6d3afcb1d69,https://github.com/Konloch/bytecode-viewer/commit/d8907cadb2bd756ec6b240d39d00b6d3afcb1d69,skip jar compression & decompression when decoding resources  run apktool on multiple thread
prestodb,presto,d7af26531adae67840cd93bf5067047fb37f1112,https://github.com/prestodb/presto/commit/d7af26531adae67840cd93bf5067047fb37f1112,optimize APPROX_DISTINCT operations on constant conditional values (#25262)  Summary: Pull Request resolved: https://github.com/prestodb/presto/pull/25262  `APPROX_DISTINCT` operations on a conditional constant value (e.g. `APPROX_DISTINCT(IF(expr  'abcd'))`) are more expensive than and functionally equivalent to `ARBITRARY(IF(expr  1  0))`  Adding an optimizer rule to replace any `APPROX_DISTINCT` operations on constant conditional values with equivalent calls to `ARBITRARY`  This comes up in some automated queries  Differential Revision: D76161617
vespa-engine,vespa,fdd806e6ae04e89033fd009bdd5f1edbc5539a39,https://github.com/vespa-engine/vespa/commit/fdd806e6ae04e89033fd009bdd5f1edbc5539a39,fix caching logic
vespa-engine,vespa,787f492ca61f2e0997e28923ca3ba06cc69c5902,https://github.com/vespa-engine/vespa/commit/787f492ca61f2e0997e28923ca3ba06cc69c5902,Never write parts to disk  Follow previous configuration for Jetty 11's `MultiPartFormInputStream` where all parts where cached to memory  irrespective of size.
datastax,jvector,c5c3ff97eb361539fd95220bd63e19af3eb1ac26,https://github.com/datastax/jvector/commit/c5c3ff97eb361539fd95220bd63e19af3eb1ac26,Add specific BuildScoreProvider for diversity to avoid extra encoding… (#503)  * Add specific BuildScoreProvider for diversity to avoid extra encoding and decoding of nodes
trinodb,trino,615723763bda52cc7b33fabc70c132f6cd99d6ed,https://github.com/trinodb/trino/commit/615723763bda52cc7b33fabc70c132f6cd99d6ed,Reuse PagesIndexOrdering in TableFunctionOperator
GIScience,openrouteservice,253aa4cd8aee4b3e95bb9c22177595d72b0ac334,https://github.com/GIScience/openrouteservice/commit/253aa4cd8aee4b3e95bb9c22177595d72b0ac334,perf: switch from Java to HPPC hash map
google,guava,7719744040d05004bd7051fc33a782fa78b01634,https://github.com/google/guava/commit/7719744040d05004bd7051fc33a782fa78b01634,Make `Atomic*FieldUpdater` fields `static` for better performance.  Compare cl/713006636.  (Also  better document the similar code in `AbstractFuture`.)  Note that I also evaluated performance with `VarHandle`  and I found it no better. (Maybe we did a similar experiment with `Unsafe` way back when and came to a similar conclusion?)  Note that that's all based on _JVM_ performance (and on benchmarks that are not necessarily great). It's possible that Android it worth a further look someday. But our only option there _today_ might be `Unsafe`  and new usages of `Unsafe` would be moving backward.  RELNOTES=n/a PiperOrigin-RevId: 724013501
opensolon,solon,775f5059553bb9ad2036fce3299a0c6a6de4716a,https://github.com/opensolon/solon/commit/775f5059553bb9ad2036fce3299a0c6a6de4716a,优化 solon-mvc ActionExecuteHandlerDefault 使用 LazyReference，延迟表单解析（可支持流的原始读取）
SpigotMC,BungeeCord,1279cca971b2d32b6bd75103d3a555fbbd629392,https://github.com/SpigotMC/BungeeCord/commit/1279cca971b2d32b6bd75103d3a555fbbd629392,#3810: Use retainedSlice if possible in MinecraftDecoder
camunda,camunda,0c662155e5fc49d25b2ca52781e9f0623e82c64a,https://github.com/camunda/camunda/commit/0c662155e5fc49d25b2ca52781e9f0623e82c64a,fix: flush only on non-atomic op
quarkusio,quarkus,4feaf0f5eaa43963998a79b988396d29a89a69a1,https://github.com/quarkusio/quarkus/commit/4feaf0f5eaa43963998a79b988396d29a89a69a1,Add a cache for class proxies in BytecodeRecorderImpl  We would generate class proxies for each class even if we already generated one  which is counter productive. Introduce a cache to avoid that and make things a bit more efficient.
apache,pinot,7203786e062f908a66263bba0cad5bca8480c569,https://github.com/apache/pinot/commit/7203786e062f908a66263bba0cad5bca8480c569,Reduce array copying for non-equi join condition evaluation (#16152)
freeok,so-novel,d6d04da547974cbfb038d76b51357fd1279476cd,https://github.com/freeok/so-novel/commit/d6d04da547974cbfb038d76b51357fd1279476cd,:zap: 优化书源延迟测试
igniterealtime,Openfire,14832dacf84faf3cef2f6e29ee0efda52dd9ea20,https://github.com/igniterealtime/Openfire/commit/14832dacf84faf3cef2f6e29ee0efda52dd9ea20,OF-3048: Improve ClientSession comparison performance (clustering)  Comparing ClientSessions typically involves evaluating the 'is anonymous' property of a session.  In a cluster  the property value of remote sessions is retrieved under guard of a distributed lock. As comparison of larger sets frequently evaluates the property value  that lock is obtained very frequently. This dramatically reduces performance.  As the property will never change after authentication  it's safe to cache the value. This improves performance considerably.  Note that RemoteClientSession instances are typically short-lived (as they're typically discarded after use)  which reduces the effectiveness of this change. Still  even without re-use  the performance improvement is considerable: in a cluster with 10 000 sessions  the responsiveness of the session summary page is improved from many minutes to 20 to 30 seconds in my test environment.
apache,iotdb,c746da2faecbe06ec9d9cf2b19ae976a3d42df6d,https://github.com/apache/iotdb/commit/c746da2faecbe06ec9d9cf2b19ae976a3d42df6d,Deleted the useless read lock in getDeviceAttribute
jOOQ,jOOQ,1932109954f31c2d54af66eced13c842df34d60d,https://github.com/jOOQ/jOOQ/commit/1932109954f31c2d54af66eced13c842df34d60d,[jOOQ/jOOQ#18282] Improve DELETE .. LIMIT and UPDATE .. LIMIT in Oracle by using ROWNUM filter in the absence of ORDER BY
quarkusio,quarkus,ab8d361908bad6c200d4449a8b5fb520854be023,https://github.com/quarkusio/quarkus/commit/ab8d361908bad6c200d4449a8b5fb520854be023,Reflection-free deserializers - Better handle basic types  Fixes #47478
hazelcast,hazelcast,2d2918ff9e3c4cb3f0fd895de96d1a1127a8cfe8,https://github.com/hazelcast/hazelcast/commit/2d2918ff9e3c4cb3f0fd895de96d1a1127a8cfe8,Improve `Stream` `sum` performance by avoiding redundant boxing (micro optimization) (#4262)  When `sum`ming a `Stream`  calling `reduce` adds unnecessary object allocation overhead via boxing.  Updated to make faster and more efficient.  <details> <summary>JMH Benchmark</summary>  ```java import org.openjdk.jmh.annotations.*; import java.util.Collection; import java.util.concurrent.TimeUnit; import java.util.stream.*;  @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @Warmup(iterations = 5  time = 1  timeUnit = TimeUnit.SECONDS) @Measurement(iterations = 3  time = 1  timeUnit = TimeUnit.SECONDS) @State(Scope.Benchmark) public class SumStreamBenchmark { private static final Collection<Long> values = LongStream.range(1  100000) .boxed() .collect(Collectors.toSet());  @Benchmark public long reduce() { return values.stream() .reduce(0L  Long::sum); }  @Benchmark public long mapToLong() { return values.stream() .mapToLong(Long::longValue) .sum(); } } ``` </details>  | Benchmark           | Time (ms/op) | Allocation Rate (B/op) | |---------------------|--------------|------------------------| | `reduce` (before)   | 0.719        | 2 400 000              | | `mapToLong` (after) | 0.483        | 233                    |  GitOrigin-RevId: 7d76911bdcd53cf0c483ab766f11a5834062a432
Azure,azure-sdk-for-java,670b4458ed662037652f747940e1b9a2ee62e00d,https://github.com/Azure/azure-sdk-for-java/commit/670b4458ed662037652f747940e1b9a2ee62e00d,Adding readMany() support for findAllByIds() to improve performance. (#43759)  * Adding readMany() support for findAllByIds() to improve performance.  * Updating the changelog  * Update sdk/spring/azure-spring-data-cosmos/CHANGELOG.md  Co-authored-by: Kushagra Thapar <kushuthapar@gmail.com>  ---------  Co-authored-by: Kushagra Thapar <kushuthapar@gmail.com>
graphhopper,graphhopper,18bfcc9d530ea0386e7f78ff761a4d5c839382d8,https://github.com/graphhopper/graphhopper/commit/18bfcc9d530ea0386e7f78ff761a4d5c839382d8,gtfs: make rt performant again
assertj,assertj,3b03395b7bd9d7950dc1dd2a4d82d2e17d6be168,https://github.com/assertj/assertj/commit/3b03395b7bd9d7950dc1dd2a4d82d2e17d6be168,Replace isRecord reflection-based implementation with JDK built-in implementation  Fix #3079
quarkusio,quarkus,b7e1d019b13bd0674c22ca5ecd27b007a1adfeb2,https://github.com/quarkusio/quarkus/commit/b7e1d019b13bd0674c22ca5ecd27b007a1adfeb2,Merge pull request #48201 from gsmet/build-optimizations  Micro build optimizations for ArC
netty,netty,0d7320ca4c87bec34db9e2020712e2b93cc3bbf5,https://github.com/netty/netty/commit/0d7320ca4c87bec34db9e2020712e2b93cc3bbf5,Reduce pipeline stack depth and improve performance (#14705)  Motivation: Pipeline calls  such as `ctx.fireChannelRead` and `ctx.write`  currently go through multiple methods. This increases the stack depth in event loop threads  which makes it harder to debug (people have more ceremony mixed in with their code)  and hurts performance (JIT inliner budget gets used up faster).  Furthermore  there are other places in this machinery which can be made faster.  Modification:  **1.** In the `AbstractChannelHandlerContext` all inbound methods  e.g. `fireChannelRead`  have been manually inlined. This means that when a handler calls `ctx.fireChannelRead`  this method call in turn now directly call the `channelRead` method of the _next_ handler in the pipeline. Previously  we had two extra method calls here.  As a consequence of this inlining  we now have to re-compute the target context when we trampoline tasks onto the event-loop. This is presumably rare  and worth the cost. This also means that some code now moves from the executor of the target context  to the executor of the calling context. This can create different behaviors from Netty 4.1  if the pipeline has multiple handlers  is modified by the handlers during the call  and the handlers use child-executors.  **2.** A few outbound methods - `read`  `write`  `writeAndFlush` - are likewise inlined. Their inherent complexity and number of overloads means we can't realistically get them down to a single method call  but we can get them down to two. This is still a nice improvement. The `flush` method is usually not implemented by handlers  so there's no point in inlining that further.  **3.** In every such call  after finding the next context  we have to decide if we can call the handler directly  or need to trampoline onto a different event loop (due to the executor off-loading feature). This means we have to inspect the context and either pick its child executor  or load the channel event loop of the target context  and this latter part (which is the most common case) is a sequence of dependent loads. Dependent loads cause cache misses and CPU pipeline stalls  so to deal with this the `AbstractChannelHandlerContext` now has a `contextExecutor` field  which caches the result of computing the concrete executor. This means our executor is only one dependent (on the channel handler context) load away. The speedup from this is quite noticeable because it's such a common operation.    Results: The `DefaultChannelPipelineBenchmark` on my M1 Pro  running JDK 17  tells an encouraging story:  ``` Before: Benchmark                                         (extraHandlers)  (pipelineArrayLength)   Mode  Cnt        Score        Error  Units DefaultChannelPipelineBenchmark.propagateEvent                 16                   1024  thrpt   10  6515502.983 ± 253375.107  ops/s DefaultChannelPipelineBenchmark.propagateVariety               16                   1024  thrpt   10  7628162.835 ±  40168.895  ops/s  After: Benchmark                                         (extraHandlers)  (pipelineArrayLength)   Mode  Cnt        Score        Error  Units DefaultChannelPipelineBenchmark.propagateEvent                 16                   1024  thrpt   50  6899710.275 ± 115305.284  ops/s DefaultChannelPipelineBenchmark.propagateVariety               16                   1024  thrpt   50  7985208.748 ±  31532.793  ops/s ```
crate,crate,4a2a89a511e9f752f5181b06ab6f70fa46265899,https://github.com/crate/crate/commit/4a2a89a511e9f752f5181b06ab6f70fa46265899,
apache,paimon,7d3e4ebcca02204604c93bb27f392a6e1150c5c2,https://github.com/apache/paimon/commit/7d3e4ebcca02204604c93bb27f392a6e1150c5c2,[core] Optimize FileDeletionBase.cleanUnusedIndexManifests to less file io (#5979)
camunda,camunda,fde3bb97a13e27dd429911b796dd2888f444a488,https://github.com/camunda/camunda/commit/fde3bb97a13e27dd429911b796dd2888f444a488,Update thread count in the background task manager (#32486)  ## Description  - Combine the two same if blocks and set threadCount to match the total tasks. In the current implementation  when partitionId == START_PARTITION_ID  the threadCount was set to 3  but it means the core pool has only 3 threads to handle 5 scheduled tasks simultaneously  which may cause two of them to sit queued. - Update setCorePoolSize based on task size  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria) - [ ] enable backports [when recommended](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)  ## Related issues  closes #
redis,lettuce,50878081f7f735b2fb6b98c16ef5350ed7dd6cc4,https://github.com/redis/lettuce/commit/50878081f7f735b2fb6b98c16ef5350ed7dd6cc4,Optimize string concatenation in getNodeDescription() (#3262)  Replace String.join with Collectors.joining to avoid intermediate collection creation  improving performance by eliminating the unnecessary List creation step.
chinabugotech,hutool,58e2f4b02fde8a5b7112c882cf860f19662cdac9,https://github.com/chinabugotech/hutool/commit/58e2f4b02fde8a5b7112c882cf860f19662cdac9,性能优化--Array.equals()方法会判断注解的顺序，如果子类重写了父类的注解，虽然两者数组内部元素一样的，但是由于顺序不一样，这里会返回false，额外走了else的逻辑。  二者只会存在注解数组元素多或者少或者顺序不一致的情况，不会存在长度相同而元素不一致的情况。因此只用判断二者长度是否相等即可
crate,crate,bae2b2deb6226957867e68f61ffe89f2af69c73e,https://github.com/crate/crate/commit/bae2b2deb6226957867e68f61ffe89f2af69c73e,Fix filter pushdown for views when filtered column is aliased.
spring-projects,spring-data-jpa,0dcc0c2bb1a8c96f906e6790f0618714eed08e29,https://github.com/spring-projects/spring-data-jpa/commit/0dcc0c2bb1a8c96f906e6790f0618714eed08e29,Cache query strings in `SimpleJpaRepository`.  Cache the deleteAll and count query strings as final fields in SimpleJpaRepository. This avoids repeated String.format operations and reduces unnecessary object creation on every invocation of deleteAllInBatch() and count(). No functional changes.  Signed-off-by: Giheon Do <dgh0001@naver.com> Closes #3920
apache,flink,05a3e9c578e9efe8755058d1f7f1b8e71c456645,https://github.com/apache/flink/commit/05a3e9c578e9efe8755058d1f7f1b8e71c456645,[FLINK-37309][table-planner] Fix skewed join optimization not working as expected
apache,skywalking,3739add599a4e213071d68b1f2e9fbae31b7a6bf,https://github.com/apache/skywalking/commit/3739add599a4e213071d68b1f2e9fbae31b7a6bf,Set max attempts for Istio ServiceEntry DNS resolution and do not wait for first result (#13235)
apache,paimon,1fc123e18bf1160e41f7afb70763968fc77d0497,https://github.com/apache/paimon/commit/1fc123e18bf1160e41f7afb70763968fc77d0497,[cdc] Fix database sync performance issue of schema evolution (#5382)
houbb,sensitive-word,91e811b360c780f90462c8f826ffc241bbfe06a5,https://github.com/houbb/sensitive-word/commit/91e811b360c780f90462c8f826ffc241bbfe06a5,issue110 并废除一些黑白名单一次遍历时的冗余逻辑 并解决返回实际值时的冲突
spring-projects,spring-ai,87b680af7c55e9ea203435b9f8ee1f7f9e88738e,https://github.com/spring-projects/spring-ai/commit/87b680af7c55e9ea203435b9f8ee1f7f9e88738e,Optimise CassandraChatMemoryRepository for MessageWindowChatMemory usage pattern  Time-series each chat window in Cassandra  keeping past (and deleted) windows still in the db. Add ability to store different MessageTypes.  Signed-off-by: mck <mck@apache.org>
netty,netty,feb5326025e6fb1648f3ad150b7eceb550aa1f30,https://github.com/netty/netty/commit/feb5326025e6fb1648f3ad150b7eceb550aa1f30,Improved bound checks (#15452)  Motivation:  Bound checks use costly math operations on bound checks  Modification:  Replace the costly math operation with a comparison  Result:  Faster bound checks in the happy path
hazelcast,hazelcast,dca1f04819066d05497b4ad4a22b61eef11a3b4f,https://github.com/hazelcast/hazelcast/commit/dca1f04819066d05497b4ad4a22b61eef11a3b4f,Remove redundant serialization in JSON metadata update [HZG-450] (#4541)  In some cases  like `IMap.executeOnKey`  `IMap.executeOnEntries`  `JsonMetadataMutationObserver` performed redundant serialization. In these cases old value was `Data` (for BINARY/NATIVE) but updated value was `Object` (value created in entry processor). This was spotted in profiling of https://github.com/hazelcast/hazelcast-simulator/pull/2281. Example stacktraces of such invocations (and similar is for backups):  <details>  <summary>IMap.executeOnKey</summary>  ``` at com.hazelcast.map.impl.recordstore.JsonMetadataMutationObserver.updateValueMetadataIfNecessary(JsonMetadataMutationObserver.java:129) at com.hazelcast.map.impl.recordstore.JsonMetadataMutationObserver.onUpdateRecord(JsonMetadataMutationObserver.java:67) at com.hazelcast.map.impl.recordstore.CompositeMutationObserver.onUpdateRecord(CompositeMutationObserver.java:107) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.updateMemory(DefaultRecordStore.java:1124) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.updateRecord(DefaultRecordStore.java:1103) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.putInternal(DefaultRecordStore.java:1055) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.setWithUncountedAccess(DefaultRecordStore.java:1318) at com.hazelcast.map.impl.operation.EntryOperator.onAddedOrUpdated(EntryOperator.java:319) at com.hazelcast.map.impl.operation.EntryOperator.doPostOperateOps(EntryOperator.java:282) at com.hazelcast.map.impl.operation.EntryOperation.call(EntryOperation.java:246) ```  </details>  <details> <summary>IMap.executeOnEntries</summary>  ``` at com.hazelcast.map.impl.recordstore.JsonMetadataMutationObserver.onUpdateRecord(JsonMetadataMutationObserver.java:66) at com.hazelcast.map.impl.recordstore.CompositeMutationObserver.onUpdateRecord(CompositeMutationObserver.java:107) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.updateMemory(DefaultRecordStore.java:1124) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.updateRecord(DefaultRecordStore.java:1103) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.putInternal(DefaultRecordStore.java:1055) at com.hazelcast.map.impl.recordstore.DefaultRecordStore.setWithUncountedAccess(DefaultRecordStore.java:1318) at com.hazelcast.map.impl.operation.EntryOperator.onAddedOrUpdated(EntryOperator.java:319) at com.hazelcast.map.impl.operation.EntryOperator.doPostOperateOps(EntryOperator.java:282) at com.hazelcast.map.impl.operation.PartitionWideEntryOperation.runWithPartitionScanForNative(PartitionWideEntryOperation.java:237) at com.hazelcast.map.impl.operation.PartitionWideEntryOperation.runForNative(PartitionWideEntryOperation.java:143) at com.hazelcast.map.impl.operation.PartitionWideEntryOperation.runInternal(PartitionWideEntryOperation.java:119) at com.hazelcast.map.impl.operation.MapOperation.run(MapOperation.java:208) at com.hazelcast.map.impl.operation.MapOperation.call(MapOperation.java:227) ```  </details>  This problem affected also cases where JSON was not used at all  but was not disabled in IMap config (default is `MetadataPolicy.CREATE_ON_UPDATE`). This could also affect also Jet and SQL  which also use entry processors.  It is unclear what the original implementation was meant to do. Maybe the idea was to indirectly check IMap `InMemoryFormat` to gain some consistency when generating Metadata  but current implementation of `JsonMetadataInitializer` does not benefit from this at all.  GitOrigin-RevId: b370f55672dc5db97bb49f0c157f6c2ff0ca0db6
soot-oss,soot,8fc2837feea1d689bd2d749233d1492cd47720aa,https://github.com/soot-oss/soot/commit/8fc2837feea1d689bd2d749233d1492cd47720aa,Setting a max depth limit in UnitThrowAnalysis
quarkusio,quarkus,c57799cfcb7db70b576069b1c7b7c9c660444887,https://github.com/quarkusio/quarkus/commit/c57799cfcb7db70b576069b1c7b7c9c660444887,avoiding calculate conditional dependencies again for the same configuration mode and project
apache,pulsar,1220951ac74fb4742abbbd331d6e751234c47015,https://github.com/apache/pulsar/commit/1220951ac74fb4742abbbd331d6e751234c47015,[improve][client][PIP-389] Add a producer config to improve compression performance (#23525)  PIP: https://github.com/apache/pulsar/pull/23526 ### Motivation  The motivation of this PIP is to provide a way to improve the compression performance by skipping the compression of small messages. We want to add a new configuration compressMinMsgBodySize to the producer configuration. This configuration will allow the user to set the minimum size of the message body that will be compressed. If the message body size is less than the compressMinMsgBodySize  the message will not be compressed.
quarkusio,quarkus,c6a6fb4061d459171f705010dcc7634f4fada7bb,https://github.com/quarkusio/quarkus/commit/c6a6fb4061d459171f705010dcc7634f4fada7bb,Avoid initializing getObserverAndProducerMethods() for every call
dibo-software,diboot,3bd46c22ba5191b2019931fc7db8dc3348dddfd9,https://github.com/dibo-software/diboot/commit/3bd46c22ba5191b2019931fc7db8dc3348dddfd9,* JDK21+版本自动开启虚拟线程进一步优化关联绑定性能
google,guava,1a300f6b2f7ba03ae9bc3620a80c4d4589c65b69,https://github.com/google/guava/commit/1a300f6b2f7ba03ae9bc3620a80c4d4589c65b69,Make `AbstractFuture` use `VarHandle` when available.  For now  this is only for the JRE flavor  not for Android.  Our not entirely great benchmarks suggest that this may actually improve performance slightly over the current `Unsafe`-based implementation. This matches my sense that [alternatives to `Unsafe` have gotten faster](https://github.com/google/guava/issues/6806#issuecomment-2518256341).  There are plenty of other [places in Guava that we use `Unsafe`](https://github.com/google/guava/issues/6806)  but this is a start.  Also: I'm going to consider this CL to "fix" https://github.com/google/guava/issues/6549  even though: - We already started requiring newer versions of Java to build our _tests_ in cl/705512728. (This CL is the first to require a newer JDK to build _prod_ code  again only to _build_ it  not to _run_ it.) - We already started requiring newer versions of Java to build our _GWT_ module in cl/711487270. - This CL requires only Java 9  not Java 11. - None of the changes so far should require people who _build our Maven project_ to do anything (aside from GWT users)  since our build automatically downloads a new JDK to use for javac since cl/655647768. RELNOTES=n/a PiperOrigin-RevId: 711733182
apache,pulsar,7be22eb2b23057bd5e09c361a43d6ccdcc0c8afd,https://github.com/apache/pulsar/commit/7be22eb2b23057bd5e09c361a43d6ccdcc0c8afd,[improve][broker] Optimize message TTL check (#24271)
jhy,jsoup,a62c7f37d4132f3180bfef3e0d872d8e3cf87b5e,https://github.com/jhy/jsoup/commit/a62c7f37d4132f3180bfef3e0d872d8e3cf87b5e,Reuse HttpClient throughout a Connection session  Enables http/2 connection reuse  #2257
apache,camel,3adff53bd1e35919b8f80af63244bca57795d444,https://github.com/apache/camel/commit/3adff53bd1e35919b8f80af63244bca57795d444,CAMEL-21484: mp-config should not be loadable as it has overhead at runtime (#16661)
alibaba,spring-ai-alibaba,76699a0b6fc2d42261202d4dbde3a462686637e4,https://github.com/alibaba/spring-ai-alibaba/commit/76699a0b6fc2d42261202d4dbde3a462686637e4,feat(nl2sql): optimize DataSource creation with thread-safe caching (#1382)  * feat(nl2sql): optimize DataSource creation with thread-safe caching mechanism  - Add ConcurrentHashMap to cache DataSource instances by connection parameters - Use computeIfAbsent for thread-safe singleton pattern implementation - Generate unique cache keys based on URL  username  and password hash - Add clearDataSourceCache method for resource cleanup scenarios - Improve performance significantly in high-concurrency scenarios - Follow Spring code formatting standards and conventions
igniterealtime,Openfire,53dbbe44b4878d16ce62b102f40999d3e7eda8b3,https://github.com/igniterealtime/Openfire/commit/53dbbe44b4878d16ce62b102f40999d3e7eda8b3,OF-3059: Remove AnonymousUserCache from RoutingTable  To maintain distinction between regular and anonymous ‘routes’  the RoutingTableImpl class used different caches for each. For every use case (other than determining if a ‘route is anonymous’)   both caches are operated on. This adds a lot of code complexity  and  as caches are operated on under cluster-wide lock  resource usage.  As the 'route is anonymous' concept has been replaced in the previous commit  the only reason to maintain two caches has been removed.  This commit removes the AnonymousUserCache completely. All data that was previously stored in either UserCache or AnonymousUserCache is now stored in UserCache.
apache,ignite,af184b0c538aec7c00e55e3d8ca08641485d6807,https://github.com/apache/ignite/commit/af184b0c538aec7c00e55e3d8ca08641485d6807,IGNITE-24884 SQL Calcite: Limit joins number to commute in planning - Fixes #11957.  Signed-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>
pinpoint-apm,pinpoint,f6b1d3204f87e2bbfa2654596923afc502a5c5b3,https://github.com/pinpoint-apm/pinpoint/commit/f6b1d3204f87e2bbfa2654596923afc502a5c5b3,[#noissue] Reduce memory copy of RowKeyEncoder
dataease,dataease,709c4823e1b474de23cb66995501f03539bb1cae,https://github.com/dataease/dataease/commit/709c4823e1b474de23cb66995501f03539bb1cae,fix: 优化查询数据表最新更新时间
google,guice,41e8c06f6ff8d349ba89aaaa5b91f04c25868d27,https://github.com/google/guice/commit/41e8c06f6ff8d349ba89aaaa5b91f04c25868d27,Improve the performance of `isCircularProxy`  The map implementation used by `MapMaker` is fairly old and requires 2 levels of indirection (segments->table).  Switching to `ConcurrentHashMap` would be better but this will still be redundant with logic inside of `Proxy` so instead we just use that.  Based on some simple benchmarks this is about 5X as fast  and should save a bit memory.  A number of alternatives were considered  * adding a marker interface to the list of proxy interfaces This is a completely ideal solution but fails due to our need to support proxying interfaces from all `ClassLoaders` and it isn't possible to proxy interfaces that cannot mutually 'see' each other.  So we would need to 'inject' our interface into the Bootstrap classloader which seems impossible and risky  or create special 'child' classloaders that can bridge it  but this triggers issues with proxying package-private interfaces... sigh. * using a `ClassValue`  bootstrapping the value is tricky and while this is faster than the status quo  it would allocate an entry for every class we queried which could add up in a large application  and the approach in this change is faster. * using `Proxy.isProxyInstance` this works but is slower than an `instanceof` query.  PiperOrigin-RevId: 721984180
pmd,pmd,4f9df6f48cdc9f643ccb40433d6be1f5eaa91d1c,https://github.com/pmd/pmd/commit/4f9df6f48cdc9f643ccb40433d6be1f5eaa91d1c,[cli] Make CLI default to multithreaded (#5741)  Merge pull request #5741 from oowekyala:give-threads-default-value
camunda,camunda,992afbf741f25b2d04d2ac1dc0254516a32b8add#diff-c871546cf084ee89e36386017b5ee7350014b13f14df4f466cbf867ba35ee449)):,mode](https://github.com/camunda/camunda/commit/992afbf741f25b2d04d2ac1dc0254516a32b8add#diff-c871546cf084ee89e36386017b5ee7350014b13f14df4f466cbf867ba35ee449)):,fix: ignore MIGRATED variable records (#26914)  ## Description  1. Variable MIGRATED Zeebe record does not provide the value  therefore we need to fully skip it when persisting in `list-view` index. More context: values store in `list-view` index are used to perform filtering by variable name and value in Processes tab. 2. I additionally reworked how the new variables are persisted (basically I brought back the code that was there[ before introducing and removing again of concurrency
apache,paimon,f1a54a890af8d3ceba4340f23568ae31c98780f0,https://github.com/apache/paimon/commit/f1a54a890af8d3ceba4340f23568ae31c98780f0,[core] Optimize getNextSnapshot in NextSnapshotFetcher to return fast
hazelcast,hazelcast,576bed00fbae560622d3446a87ff9477fc3f6d62,https://github.com/hazelcast/hazelcast/commit/576bed00fbae560622d3446a87ff9477fc3f6d62,Correct ByteArrayObjectDataOutput capacity for large inputs [HZG-346] (#4099)  There is a demonstrable large performance hit (100x) when an input length of more than `Integer.MAX_VALUE / 2` is provided. This is due to resizing being done in increments of `len` passed to `ensureAvailable(int len)` when doubling the current buffer length with a bit shift would overflow and become a negative value.  This means that the buffer is potentially continuously extended by small increments  instead of a single large increment (which is the intention with a doubling strategy).  This PR resolves the issue by catching the overflow case and setting the buffer's length to a `MAX_ARRAY_SIZE` value  which is approximately the largest supported array size possible.  This is the simplest solution to the problem encountered  and fits with the current doubling strategy within the limits of the JVM. We could overhaul our buffering mechanism entirely and use a segmented approach  trading some additional overheads for a more robust solution that supports larger inputs - this is definitely a more complex solution  and is likely overkill for Hazelcast's use-case. I discussed these options with @gbarnett-hz and he agreed that the simple approach is sufficient for now.  This PR also includes a test case that increases the existing `ByteArrayObjectDataOutput` test coverage.  Fixes https://hazelcast.atlassian.net/browse/HZG-346 Closes https://github.com/hazelcast/hazelcast/issues/26422  GitOrigin-RevId: aaf54ed54a7f6c9238858e854938bdfd1d66a01a
jooby-project,jooby,1761a34289647daae224286de2433cc76856f967,https://github.com/jooby-project/jooby/commit/1761a34289647daae224286de2433cc76856f967,netty: improve performance by caching the content-length header on bytes wrapped responses
YunaiV,ruoyi-vue-pro,4be18af236ac036741c6adba23fa58d06f17a73c,https://github.com/YunaiV/ruoyi-vue-pro/commit/4be18af236ac036741c6adba23fa58d06f17a73c,【代码优化】IoT: 基于 guava 对 producer 做 cache
trinodb,trino,6abe6475ccd023be97428b1b7b239ae9551872a7,https://github.com/trinodb/trino/commit/6abe6475ccd023be97428b1b7b239ae9551872a7,Use batched block builders in MergePages
dromara,RuoYi-Vue-Plus,5e510773475b47fe4375db143583da1e6b08c1ff,https://github.com/dromara/RuoYi-Vue-Plus/commit/5e510773475b47fe4375db143583da1e6b08c1ff,update 优化 直接从ClassPath加载ip2region数据库文件
apache,iotdb,b553a6f36700788dc933dc189d7515f313bffd58,https://github.com/apache/iotdb/commit/b553a6f36700788dc933dc189d7515f313bffd58,Pipe/Load: Remove MD5 check for identically named TSFile to speed up Active Load (#15311)
apache,pulsar,d3707c56db691304f4a1caceb559d3f29508fa6f,https://github.com/apache/pulsar/commit/d3707c56db691304f4a1caceb559d3f29508fa6f,[improve][broker] Reduce unnecessary REPLICATED_SUBSCRIPTION_SNAPSHOT_REQUEST (#23839)
quarkusio,quarkus,0208ffd60ff738bd70553d44fd3e7a60c4be63c2,https://github.com/quarkusio/quarkus/commit/0208ffd60ff738bd70553d44fd3e7a60c4be63c2,Merge pull request #46561 from mkouba/issue-46548  ArC: consider built-in session context during client proxy optimization
apache,pinot,290914c4f2b907bcd52a3527d28a99787651da70,https://github.com/apache/pinot/commit/290914c4f2b907bcd52a3527d28a99787651da70,Normalize excessive whitespaces in sql to avoid regex performance issues (#15498)
prestodb,presto,e5998e84053f7ba9cb81ae2be7efd91339d0f646,https://github.com/prestodb/presto/commit/e5998e84053f7ba9cb81ae2be7efd91339d0f646,Add less lock hungry AsyncQueue#offerAll  Adds a method to handle batch insertion of all elements to insert returned from AsyncQueue.BorrowResult. This simplifies the implementation and threads contending to synchronize on the queue for each individual element inserted.
AxonFramework,AxonFramework,0e310dc85749fc4dbc58691875888e5cda1beaa5,https://github.com/AxonFramework/AxonFramework/commit/0e310dc85749fc4dbc58691875888e5cda1beaa5,Merge pull request #3241 from AxonFramework/enhancement/align-publish-behavior  Have `DefaultEventGateway` provide a collection of events to the `EventBus` instead of looping over the events
apache,hudi,9d28d9817319740b8fe61a8ba40fc8f4291d2951,https://github.com/apache/hudi/commit/9d28d9817319740b8fe61a8ba40fc8f4291d2951,[HUDI-8706] Avoid reading partition path from records if not required (#12471)
apache,flink-cdc,250ab43e185ee39b23c4fb6376b84ea9e6741f58,https://github.com/apache/flink-cdc/commit/250ab43e185ee39b23c4fb6376b84ea9e6741f58,[FLINK-37741][cdc-runtime] Fix transform operator performance degradation  This closes  #4007
camunda,camunda,3f924a85927f43004ff75e5b57c373fa5fc322f3,https://github.com/camunda/camunda/commit/3f924a85927f43004ff75e5b57c373fa5fc322f3,fix: split parallel and batched paths in IncidentUpdate (#31624)  ## Description  <!-- Describe the goal and purpose of this PR. -->  - Split paths of parallel execution and plain sequential one in the incident update pipeline - Peform batch request to retrieve only deleted process instances during incident update  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria) - [ ] enable backports [when recommended](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)  ## Related issues  closes #
apache,maven,b125cf43f4034c6d5c78951be0c6006d0e3e3e54,https://github.com/apache/maven/commit/b125cf43f4034c6d5c78951be0c6006d0e3e3e54,feat: enhance MultiThreadedBuilder with smart project scheduling (#10893)  This enhancement improves parallel build efficiency by implementing intelligent project scheduling based on dependency chain analysis  inspired by the Takari Smart Builder approach.  Key improvements: - SmartProjectComparator orders projects by dependency chain length to prioritize critical path projects using algorithm: weight = 1 + max(downstream_project_weights) - Projects with longer downstream chains are built first for optimal parallelization - Projects with equal weights are ordered by project ID for deterministic results - Enhanced ConcurrencyDependencyGraph integrates smart scheduling for both initial and dynamic project ordering - Thread-safe implementation using ConcurrentHashMap to prevent race conditions - Comprehensive test coverage including same-weight ordering behavior  Algorithm example: For dependency graph A → B → D  A → C → D: - Project D: weight = 1 (no downstream dependencies) - Project B: weight = 2 (1 + max(D=1)) - Project C: weight = 2 (1 + max(D=1)) - Project A: weight = 3 (1 + max(B=2  C=2)) Build order: A (weight=3)  then B and C (weight=2  ordered by project ID)  then D (weight=1)  Benefits: - Improved thread utilization through intelligent project ordering - Reduced build times for complex multi-module projects (10-30% improvement expected) - Simple  deterministic scheduling based on project structure - Full backward compatibility with existing Maven functionality - No external dependencies or file I/O overhead  The enhancement automatically activates when using multithreaded builds: mvn clean install -T 4  # Uses 4 threads with smart scheduling
opentripplanner,OpenTripPlanner,77f900758b5b9b774bf1a4f95987b865fb9b066d,https://github.com/opentripplanner/OpenTripPlanner/commit/77f900758b5b9b774bf1a4f95987b865fb9b066d,Skip one more usually unnecessary intersection test
dromara,RuoYi-Vue-Plus,878cd7e9f03e1268e198942849c436efbf042d99,https://github.com/dromara/RuoYi-Vue-Plus/commit/878cd7e9f03e1268e198942849c436efbf042d99,update 优化工作流用户查询构建
netty,netty,0ff840c40bd0737659298ca96bda1f707650c145,https://github.com/netty/netty/commit/0ff840c40bd0737659298ca96bda1f707650c145,IoUring: Don't mark sockets as blocking as it makes no difference (#14681)  Motivation:  io_uring does not care about if a socket is blocking or non blocking. If you want to do non-blocking operations it needs to be done by io-hint and not file-hint.  Modifications:  Don't mark sockets explicit as blocking  Result:  Cleanup and one less syscall per socket
jenkinsci,jenkins,f45ba02af86d07caa3928010e384015babc2ccdb,https://github.com/jenkinsci/jenkins/commit/f45ba02af86d07caa3928010e384015babc2ccdb,[JENKINS-33704] Limit scope of `Jenkins#updateComputerList` to improve performance at scale (#10494)  * [JENKINS-33704] Limit scope of `Jenkins#updateComputerList`  Along the same line as #5882  but for computers  Adding/updating/removing a node to the system was causing all nodes retention strategies to be checked. If you have a lot of nodes  this quickly adds up to an extreme amount of checks.  This change makes the calls local  by only affecting the related nodes.  * Clarify variable name  * Fix logic  * Avoid dealing with `null`
ClickHouse,clickhouse-java,e363e40caf5453574cc01a0184bb1ceef97945d2,https://github.com/ClickHouse/clickhouse-java/commit/e363e40caf5453574cc01a0184bb1ceef97945d2,Merge pull request #2225 from ClickHouse/fix_compress_stream  [perf] fixed LZ4OutputStream
crate,crate,5ce8a91e21cd41dc374b846daf4fe277d6f46204,https://github.com/crate/crate/commit/5ce8a91e21cd41dc374b846daf4fe277d6f46204,Always load singleton string primary key from binary dv  If a table has a single primary key of type STRING  Crate will now store it in a BinaryDocValues field. These are more efficient than SortedDocValues for sequential access  and should both improve the performance of joins on primary keys and allow the removal of the Crate DocValuesFormat fork  which will re-enable compression on lower-cardinality string columns and open up the possibility of using sparse indexes in future.  This change shows significant speedups when streaming large numbers of primary key values:  Q: select count(t1."sourceIP") from uservisits_large t1 inner join uservisits_small t2 on t1."sourceIP" = t2."sourceIP" C: 1 | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max | |   V1    |    25393.936 ±  339.451 |  24746.715 |  25338.120 |  25668.752 |  26095.559 | |   V2    |    11375.290 ±  378.957 |  10383.943 |  11328.199 |  11476.776 |  12147.357 | ├---------┴-------------------------┴------------┴------------┴------------┴------------┘ |               -  76.25%                           -  76.42% There is a 100.00% probability that the observed difference is not random  and the best estimate of that difference is 76.25% The test has statistical significance  Q: select count(t1."sourceIP") from uservisits_large t1 inner join uservisits_small t2 on t1."sourceIP" = t2."sourceIP" C: 5 | Version |         Mean ±    Stdev |        Min |     Median |         Q3 |        Max | |   V1    |    27992.866 ±  348.264 |  27397.459 |  27871.027 |  28083.560 |  28950.416 | |   V2    |    14367.342 ±  428.816 |  14025.410 |  14237.366 |  14344.758 |  15561.470 | ├---------┴-------------------------┴------------┴------------┴------------┴------------┘ |               -  64.33%                           -  64.76% There is a 100.00% probability that the observed difference is not random  and the best estimate of that difference is 64.33% The test has statistical significance
quarkusio,quarkus,07ba5e6bcd1a0ac1b536002cdf459a8d8eb79d11,https://github.com/quarkusio/quarkus/commit/07ba5e6bcd1a0ac1b536002cdf459a8d8eb79d11,Lazily access ObjectMapper in Quarkus REST Jackson module  This is done because the server MessageBodyReader and MessageBodyWriter classes are created at static init  which means two things: * The Jackson bean should not be accessed directly as it can still be configured by user provided code (via ObjectMapperCustomizer). * Accessing the Jackson bean directly imposes a rather large hit on startup time (on my machine  it's over 50ms)  regardless if MessageBodyReader / MessageBodyWriter are ever used in the application
lakesoul-io,LakeSoul,60a75e3641083125af207d12cbbc8709faf2e66d,https://github.com/lakesoul-io/LakeSoul/commit/60a75e3641083125af207d12cbbc8709faf2e66d,[Presto] Added the support for filter pushdown of time/date type (#627)  * Added the support for filter pushdown of time/date type  Signed-off-by: 王英泰 <2253457010@qq.com>  * [Presto] Matched the timestamp type between Presto and LakeSoul  Signed-off-by: 王英泰 <2253457010@qq.com>  ---------  Signed-off-by: 王英泰 <2253457010@qq.com>
thingsboard,thingsboard,4474df769b2186add19e5fe5f33f65934467da3e,https://github.com/thingsboard/thingsboard/commit/4474df769b2186add19e5fe5f33f65934467da3e,fetch entities only on subs creation
apache,iotdb,d3bd5c7bec38bcece3bde87dd4a19122ca21166f,https://github.com/apache/iotdb/commit/d3bd5c7bec38bcece3bde87dd4a19122ca21166f,Omitted the useless distinct logic for device when determined predicate does not contain "OR"
runelite,runelite,194bf6c4893834c52b7529e2f160991a12020e43,https://github.com/runelite/runelite/commit/194bf6c4893834c52b7529e2f160991a12020e43,client: Fix WildcardMatcher regex DoS  Before this commit  wildcard strings with multiple repeated asterisks would be expanded to a string similar to ".*.*.*" before invoking `String#matches()` using the result. While this has no change in behavior  expanding enough asterisks would eventually cause this matching to perform badly and hang the client. Instead  expanding groups of asterisks to a single regex ".*" avoids this problem.
trinodb,trino,cbc50152ab1caf19063071187209133f5826585a,https://github.com/trinodb/trino/commit/cbc50152ab1caf19063071187209133f5826585a,Optimize metadata query with distinct + limit
opentripplanner,OpenTripPlanner,92aee939c402142289d7838643c9d2b33f7e8643,https://github.com/opentripplanner/OpenTripPlanner/commit/92aee939c402142289d7838643c9d2b33f7e8643,avoid running turn restriction applications multiple times
opentripplanner,OpenTripPlanner,5f6dea6b11abdb793d06d9416b4db8c6b4686f38,https://github.com/opentripplanner/OpenTripPlanner/commit/5f6dea6b11abdb793d06d9416b4db8c6b4686f38,Test if area is already linked earlier  This eliminates the need for several point inside polygon tests.
jhy,jsoup,36ba3edad1de83e61dff71ca929909587eebd834,https://github.com/jhy/jsoup/commit/36ba3edad1de83e61dff71ca929909587eebd834,Optimize `#id .class` selector performance  Fixes #2254
debezium,debezium,867b485b6d8e8531df7248b466609750eea2d949,https://github.com/debezium/debezium/commit/867b485b6d8e8531df7248b466609750eea2d949,DBZ-8926 Fetch `OBJ# %` rows only when using Hybrid with query filters
apache,shardingsphere,df7fe751e0b9419692f003f6860205920b9b7741,https://github.com/apache/shardingsphere/commit/df7fe751e0b9419692f003f6860205920b9b7741,Optimize MySQL multi-statements handling (#35510)  - Extract DatabaseType instance as a private field to improve performance - Update SQLParserEngine initialization to use the pre-loaded DatabaseType - Modify SQLBindEngine invocation to include DatabaseType as a parameter
apache,hudi,7380c26141910f4228fe92b259a2f665b1488d9c,https://github.com/apache/hudi/commit/7380c26141910f4228fe92b259a2f665b1488d9c,[MINOR] Fix skew in clustering operator (#12765)
apache,hbase,78b06cefdeb183970a008486ef3e30383e410d2f,https://github.com/apache/hbase/commit/78b06cefdeb183970a008486ef3e30383e410d2f,HBASE-29123: A faster CodecPool for HBase (#6679)  Signed-off-by: Wellington Ramos Chevreuil <wchevreuil@apache.org> Signed-off-by: Ray Mattingly <rmattingly@apache.org> Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
jhy,jsoup,c6208d2c8d3f3cb45215053f2656683844155e8a,https://github.com/jhy/jsoup/commit/c6208d2c8d3f3cb45215053f2656683844155e8a,Don't create a new Parser in Node#attr  If a Node did not (yet) have a parent document  calling attr() would create a parser  to get the default HTML settings to normalize the attribute name. Simplify that to just use defaults directly.  Also  simplified DocumentType to use attributes.add  which does not go through normalization or dedupe.
apache,iotdb,701a5156e7a6686ec70a1a9ec457ae3b08bb9056,https://github.com/apache/iotdb/commit/701a5156e7a6686ec70a1a9ec457ae3b08bb9056,Pipe: Optimize the process of collecting PipeTsFileInsertionEvent in table model to reduce unnecessary parsing of TsFile (#14697)  Co-authored-by: Steve Yurong Su <rong@apache.org>
camunda,camunda,dc5759e19411331472c39d7b640f63e39e1e3bec,https://github.com/camunda/camunda/commit/dc5759e19411331472c39d7b640f63e39e1e3bec,perf: avoid copy of persisted DRGs
nguyenq,tess4j,045a2d5900dd154a828b18acc38308a3233dbd4c,https://github.com/nguyenq/tess4j/commit/045a2d5900dd154a828b18acc38308a3233dbd4c,Use SetImage method that takes Pix as input
ClickHouse,clickhouse-java,57a0159fbd9a68d7a80e211e0dabd8d1b83da4c7,https://github.com/ClickHouse/clickhouse-java/commit/57a0159fbd9a68d7a80e211e0dabd8d1b83da4c7,Improve JDBC insert performance (#2165)  * First naive implementation.  * Refine implementation  * Enable testDateTypes  * remove jdbc v1 from tests  * Use StatementType instead of boolean
LaurieWired,Malimite,23f0caef3f943aebddc4708de415b534e3f0671b,https://github.com/LaurieWired/Malimite/commit/23f0caef3f943aebddc4708de415b534e3f0671b,Add search option and optimize ghidra analysis
stleary,JSON-java,7b0d1942b4c172361475bd92c197eea1f13ae5ce,https://github.com/stleary/JSON-java/commit/7b0d1942b4c172361475bd92c197eea1f13ae5ce,tech-debt-25250701 add jacoco to gradle build  refactor JSONObject to restore performance
apache,paimon,b20b78e02076bdc27a85570d8997435322d58919,https://github.com/apache/paimon/commit/b20b78e02076bdc27a85570d8997435322d58919,[core] Avoid the unnecessary key value copy (#5116)
eclipse-vertx,vert.x,32f1d41b254b86b42e5aadccdcb89710b0ec2f35,https://github.com/eclipse-vertx/vert.x/commit/32f1d41b254b86b42e5aadccdcb89710b0ec2f35,Avoid UUID.randomUUID() in Verticle deployment startup code  This is done because bootstrapping the plumbing needed by the JDK to produce a UUID value is expensive  it thus doesn't make sense to pay this cost when the property isn't actually needed
thingsboard,thingsboard,a4db17c859797d8c02b8a29d324d6979483869c3,https://github.com/thingsboard/thingsboard/commit/a4db17c859797d8c02b8a29d324d6979483869c3,AI rule node: add cache to AI settings
undertow-io,undertow,bcd28cd16da7281f0c996c397611286224286f9e,https://github.com/undertow-io/undertow/commit/bcd28cd16da7281f0c996c397611286224286f9e,Merge pull request #1721 from jasondlee/UNDERTOW-2547  UNDERTOW-2547 - Perform gathering write
camunda,camunda,feab370d4c19aaf5f8d17801ede5fdf1388f1fef,https://github.com/camunda/camunda/commit/feab370d4c19aaf5f8d17801ede5fdf1388f1fef,refactor: add a new map with triple keys and no allocations
zfoo-project,zfoo,21fed98235ea0f15f5e6e5e1650d22b6b1586f95,https://github.com/zfoo-project/zfoo/commit/21fed98235ea0f15f5e6e5e1650d22b6b1586f95,ref[net]: use zero copy in tunnel proxy server
redisson,redisson,6a6bc930846f6e91f44159232d569ddf4a415ae6,https://github.com/redisson/redisson/commit/6a6bc930846f6e91f44159232d569ddf4a415ae6,Improvement - LRUCacheMap speed optimization up to 200x
pentaho,pentaho-kettle,820ce55befc734099ac948db4fe1cfb010909396,https://github.com/pentaho/pentaho-kettle/commit/820ce55befc734099ac948db4fe1cfb010909396,Optimization: cache the rows as they are being read from the DB  this also allows a better memory management
signalapp,Signal-Server,f8d27d8faba3e893c234b70149162458b10b518e,https://github.com/signalapp/Signal-Server/commit/f8d27d8faba3e893c234b70149162458b10b518e,"encrypt timestamps" crawler optimizations
ClickHouse,clickhouse-java,97610f7814a6019ab2f425545d2020f90bc7d10e,https://github.com/ClickHouse/clickhouse-java/commit/97610f7814a6019ab2f425545d2020f90bc7d10e,return BigDecimal if already provided instead of converting. (#2208)
netty,netty,a442d177aee85246e7438fd8df40df148cdfe34c,https://github.com/netty/netty/commit/a442d177aee85246e7438fd8df40df148cdfe34c,IoUring: Use IORING_RECVSEND_POLL_FIRST even when using buffer ring. (#14766)  Motivation:  We can also use IORING_RECVSEND_POLL_FIRST when using a buffer ring to reduce the overhead a bit in some cases.  Modifications:  Compute the correct ioPrio when doing a recv with a buffer ring.  Result:  Reduce some small overhead
eclipse-vertx,vert.x,2bc2fef15765297cbfecd97d54ddf30b2be4d887,https://github.com/eclipse-vertx/vert.x/commit/2bc2fef15765297cbfecd97d54ddf30b2be4d887,Add an internal system property to enable HTTP/1.x immutable response headers caching.
debezium,debezium,1338c7e7c5f8e6a3524cf722ccbf3a04dde4497c,https://github.com/debezium/debezium/commit/1338c7e7c5f8e6a3524cf722ccbf3a04dde4497c,DBZ-8595 Remove redundant schema refresh when starting streaming  Before this change we called schema refresh during initialization of the streaming and once we started replicated connection just before start of the streaming.  The first call during init has to be there as we may resume incremental snapshot after streaming init step and need to have schema available. The second refresh seems to be redundant as it's called almost right after init and there doesn't seem to be anything which would require to refresh the schema again just before start actual streaming.
netty,netty,3816df0f6bd893cff7a5bade144a7c08da07c2da,https://github.com/netty/netty/commit/3816df0f6bd893cff7a5bade144a7c08da07c2da,IoUring: Only cancel operations once (#14920)  Motivation:  cancelOps(...) might be called multiple times while trying to teardown a channel. There is not need to submit multiple ASYNC_CANCEL for the same operation  so guard against it.  Modifications:  Just set the ids to 0 after the cancel was submitted and guard against submitting a cancel if the id is 0  Result:  Less submissions during teardown of a Channel
crate,crate,2fc1fa47ee9e5aa048a829162b007a0675eee5f9,https://github.com/crate/crate/commit/2fc1fa47ee9e5aa048a829162b007a0675eee5f9,Avoid client node roundtrip during shards resize  Before:  client -> node1 ---> master-node (resize) node1 <--- master-node (resp) node1 ---> master-node (swap resized with source)  After:  client -> node1 ---> master-node (resize) | (swap resized with source) V node1 <--- master-node
apache,ignite,801acdf6032affd7c45ea97b28cbeeacf38d7f20,https://github.com/apache/ignite/commit/801acdf6032affd7c45ea97b28cbeeacf38d7f20,IGNITE-24664 SQL Calcite: Use PK index scan instead of hash index scan - Fixes #11900.  Signed-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>
prometheus,client_java,7016bf7c5749e806ef91a918fdb294d394b83a16,https://github.com/prometheus/client_java/commit/7016bf7c5749e806ef91a918fdb294d394b83a16,Use bulk string writes for text formats (#1273)  Further optimize `TextFormatUtil#writeEscapedLabelValue`. We're seeing `TextFormatUtil#writeEscapedLabelValue` show up in our production traces due to the single `char` writes to `OutputStreamWriter`. We're using `OpenMetricsTextFormatWriter`. #1241 and #1248 should take care of most of these issues but there still remains some optimization potential left. `BufferedWriter#write(int)` has some minimal overhead in terms of locking. If we assume that rarely any characters need to be escaped and instead optimize to write as large of a part of the String as possible in one method call.  Before --------- ``` Benchmark                                             Mode  Cnt       Score      Error  Units TextFormatUtilBenchmark.openMetricsWriteToByteArray  thrpt   25  438485.372 ± 4270.355  ops/s TextFormatUtilBenchmark.openMetricsWriteToNull       thrpt   25  440105.281 ± 2891.572  ops/s TextFormatUtilBenchmark.prometheusWriteToByteArray   thrpt   25  467213.001 ±  878.780  ops/s TextFormatUtilBenchmark.prometheusWriteToNull        thrpt   25  472931.759 ±  976.028  ops/s ```  After -------  ``` Benchmark                                             Mode  Cnt       Score      Error  Units TextFormatUtilBenchmark.openMetricsWriteToByteArray  thrpt   25  462852.243 ± 5071.696  ops/s TextFormatUtilBenchmark.openMetricsWriteToNull       thrpt   25  469910.681 ± 1670.430  ops/s TextFormatUtilBenchmark.prometheusWriteToByteArray   thrpt   25  482362.506 ± 2051.684  ops/s TextFormatUtilBenchmark.prometheusWriteToNull        thrpt   25  487707.557 ± 3344.881  ops/s ```  About a 5% to 6% gain for `OpenMetricsTextFormatWriter` and around 3% for `PrometheusTextFormatWriter`.  Note that this benchmark is actually for `OpenMetricsTextFormatWriter` and `PrometheusTextFormatWriter` since `TextFormatUtil` is not public and can therefore not be benchmarked directly. The relative gains in `#writeEscapedLabelValue` are higher because the benchmark runs the full text format writers.  I also added a test for `TextFormatUtil#writeEscapedLabelValue` since the code is now more complicated.  ---------  Signed-off-by: Philippe Marschall <philippe.marschall@gmail.com> Co-authored-by: Doug Hoard <dhoard@users.noreply.github.com>
apache,hbase,27139c409ad09cde831f36de15aa53d39099ce99,https://github.com/apache/hbase/commit/27139c409ad09cde831f36de15aa53d39099ce99,HBASE-29103 Avoid excessive allocations during reverse scanning when seeking to next row (#6643)  Signed-off-by: Nick Dimiduk <ndimiduk@apache.org> Signed-off-by: Ray Mattingly <rmattingly@apache.org>
apache,pulsar,d377bc9d7321a66201a301b6887fb1fea3ef8820,https://github.com/apache/pulsar/commit/d377bc9d7321a66201a301b6887fb1fea3ef8820,[improve][client] PIP-393: Improve performance of Negative Acknowledgement (#23600)  Co-authored-by: Lari Hotari <lhotari@apache.org>
netty,netty,c78193caf12b1bc9c67d5be32c333388bc28cf1d,https://github.com/netty/netty/commit/c78193caf12b1bc9c67d5be32c333388bc28cf1d,Reuse the same SizeClassedChunk if there're available segments (#15416)  Motivation:  SizeClassedChunk is not using the freeList size to update the remaining capacity  prompting unnecessary chunk allocations  Modification:  Once approaching one or less segment left  update the remaining capacity  to save allocating a new chunk  Result:  Reduced fragmentation and allocation pressure for buffers which release later
prestodb,presto,d5e76afa9522e4ea7dc397cc57d0486ab433cb28,https://github.com/prestodb/presto/commit/d5e76afa9522e4ea7dc397cc57d0486ab433cb28,Add an optimizer to add distinct below build side of semi join
apache,iotdb,5cb388190ae87fc965288c799078115d27882208,https://github.com/apache/iotdb/commit/5cb388190ae87fc965288c799078115d27882208,Parallel disptach read fragment instance
soot-oss,soot,1601d3662feb8dab43c1db14259cace3adbb37fc,https://github.com/soot-oss/soot/commit/1601d3662feb8dab43c1db14259cace3adbb37fc,Merge pull request #2156 from MarcMil/extension  Make the FastColorer fast again
pinpoint-apm,pinpoint,4920c926d8800ff8aae4bbe63a6e5e0243d926be,https://github.com/pinpoint-apm/pinpoint/commit/4920c926d8800ff8aae4bbe63a6e5e0243d926be,[#12434] Optimize scanner caching
netty,netty,7a9d9df46a72269b0a5d563439489c2b1d0bd195,https://github.com/netty/netty/commit/7a9d9df46a72269b0a5d563439489c2b1d0bd195,Reduce number of EpollIoOps.contains calls (#15442)  Motivation:   ![image](https://github.com/user-attachments/assets/063f0d55-6b91-4b13-aa0a-f7ddcf6a0a75)  Modification:  Join 2 EpollIoOps.contains() invocations with one merged constant and fully inline `contains()`  Result:  No more `EpollIoOps.contains` calls in the critical hot path.
GIScience,openrouteservice,65bfb9223029334a943e4d8c1beff9575f5f82e1,https://github.com/GIScience/openrouteservice/commit/65bfb9223029334a943e4d8c1beff9575f5f82e1,refactor: remove unnecessary DA initialization
PBH-BTN,PeerBanHelper,3fdd9a6cb070b7d0501854d9e15c93e30b68a6f3,https://github.com/PBH-BTN/PeerBanHelper/commit/3fdd9a6cb070b7d0501854d9e15c93e30b68a6f3,改进 BAN_LIST Map，ARB 优化 BAN_LIST 读取
quarkusio,quarkus,1c310a92aab57b308c3b437701fc43b9bc1570d5,https://github.com/quarkusio/quarkus/commit/1c310a92aab57b308c3b437701fc43b9bc1570d5,Merge pull request #45997 from radcortez/system-properties  Lazy System Properties for native image
chinabugotech,hutool,158a0f03adbace157d6f26779fe82062c0ec9a87,https://github.com/chinabugotech/hutool/commit/158a0f03adbace157d6f26779fe82062c0ec9a87,!1323 判断注解数组元素是否相同优化 Merge pull request !1323 from 会飞的行李/v5-dev
networknt,light-4j,c52992329882ea98f9f179af45603de48ffe2c8d,https://github.com/networknt/light-4j/commit/c52992329882ea98f9f179af45603de48ffe2c8d,fixes #2450 update cache manager to make sure it only initialized once (#2451)
prestodb,presto,ebf7bb85a9f79772c4cc25dbaf7cb607598ace74,https://github.com/prestodb/presto/commit/ebf7bb85a9f79772c4cc25dbaf7cb607598ace74,[Iceberg]Prefer `AppendFiles` over `RowDelta` in insert-only statement
opentripplanner,OpenTripPlanner,7af5f7d4482e148d4862b03ce20173df12eb612d,https://github.com/opentripplanner/OpenTripPlanner/commit/7af5f7d4482e148d4862b03ce20173df12eb612d,Optimise performance by instantiating context only once
apache,pdfbox,96856ee9704c928f3c8dbcccedd1a51cb914ef12,https://github.com/apache/pdfbox/commit/96856ee9704c928f3c8dbcccedd1a51cb914ef12,PDFBOX-5998: avoid unnecessary map lookups based on a proposal by Axel Howind  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925396 13f79535-47bb-0310-9956-ffa450edef68
apache,hive,541ccaa1bb35910b6af3036e4162d4bb952ea036,https://github.com/apache/hive/commit/541ccaa1bb35910b6af3036e4162d4bb952ea036,HIVE-28575: Optimize FS rpc call in Warehouse::getDnsPath (Butao Zhang  reviewed by Ayush Saxena  Chris Nauroth)
camunda,camunda,15b0d5ac6ce7036849a477c26ae4d6dd5993887f,https://github.com/camunda/camunda/commit/15b0d5ac6ce7036849a477c26ae4d6dd5993887f,perf: rollback only locks cache once
pinpoint-apm,pinpoint,33f239a74f8a64ed0e470ee84b4167be28f09e55,https://github.com/pinpoint-apm/pinpoint/commit/33f239a74f8a64ed0e470ee84b4167be28f09e55,[#noissue] Memory Optimization of DistributedScanner
apache,pulsar,798a014ab7d1bd1055a9f7a62cfd4ed0120d798a,https://github.com/apache/pulsar/commit/798a014ab7d1bd1055a9f7a62cfd4ed0120d798a,[improve][ml]Set default value of managedLedgerPersistIndividualAckAsLongArray to true (#23888)
trinodb,trino,2ef6dc1c9484b6726a44e15fdaeb36853e2bcd35,https://github.com/trinodb/trino/commit/2ef6dc1c9484b6726a44e15fdaeb36853e2bcd35,Parse only required row groups from parquet footer
apache,iotdb,e704935deada8aedb6f4d39b9e677be348a8c57f,https://github.com/apache/iotdb/commit/e704935deada8aedb6f4d39b9e677be348a8c57f,reduce useless loops (#14513)
classgraph,classgraph,16511fbd09e98688ea7f2216abad2b7568eb8527,https://github.com/classgraph/classgraph/commit/16511fbd09e98688ea7f2216abad2b7568eb8527,Replace "String::replaceAll" with pre compiled pattern
vespa-engine,vespa,4e3781e689fbdc8edbc13f4d4c2023425f5abbd3,https://github.com/vespa-engine/vespa/commit/4e3781e689fbdc8edbc13f4d4c2023425f5abbd3,Merge pull request #33278 from vespa-engine/bjorncs/search-handler-threadpool  Increase default size of search handler thread pool
648540858,wvp-GB28181-pro,111274c08a7888365ea90229293104b9571ea69d,https://github.com/648540858/wvp-GB28181-pro/commit/111274c08a7888365ea90229293104b9571ea69d,修复通道共享状态过滤， 优化发流端口获取， 避免递归过多异常
trinodb,trino,dd3ccdab8591c55c72e9f9bf320d3e599863a76c,https://github.com/trinodb/trino/commit/dd3ccdab8591c55c72e9f9bf320d3e599863a76c,Change dictionary block to estimate size instead of exact computation
camunda,camunda,e1ee5d211fc4ae51f34d0fbf1f77b3d8a64fdaec,https://github.com/camunda/camunda/commit/e1ee5d211fc4ae51f34d0fbf1f77b3d8a64fdaec,Introduce a Map with 3 keys (Map3D) as a generic collection (#27759)  ## Description  As part of migrating the metrics to Micrometer  we have cases where we want to access individual meters by their tag combinations. With normal usage  this requires us to perform some allocation - either the `Meter.Id` in order to pick it up  or some option like a `Tuple` or `Tuple3` or `Triple`. @entangled90 and I benchmarked these approaches  and the one without allocations (using a map with 3 keys) is  as expected  much faster. Some quick JMH results:  When using strings for keys:  ``` Benchmark                                                          Mode    Cnt        Score    Error   Units MetricCachingTest.measureTimeToIncrementTuples                     thrpt   50       17.868 ±  0.531   ops/s MetricCachingTest.measureTimeToIncrementTuples:gc.alloc.rate       thrpt   50      51.116 ±  3.121  MB/sec MetricCachingTest.measureTimeToIncrementTuples:gc.alloc.rate.norm  thrpt   50  3000382.667 ± 21.107    B/op  Benchmark                                                         Mode    Cnt    Score   Error   Units MetricCachingTest.measureTimeToIncrementMap3D                     thrpt   50  27.923 ± 1.302   ops/s MetricCachingTest.measureTimeToIncrementMap3D:gc.alloc.rate       thrpt   50    0.006 ± 0.001  MB/sec MetricCachingTest.measureTimeToIncrementMap3D:gc.alloc.rate.norm  thrpt   50   237.517 ± 5.155    B/op ```  When using enum for keys:  ``` Benchmark                                                          Mode    Cnt        Score    Error   Units MetricCachingTest.measureTimeToIncrementTuples                     thrpt   50       50.179 ±  0.710   ops/s MetricCachingTest.measureTimeToIncrementTuples:gc.alloc.rate       thrpt   50      143.543 ±  2.031  MB/sec MetricCachingTest.measureTimeToIncrementTuples:gc.alloc.rate.norm  thrpt   50  3000142.014 ± 21.107    B/op MetricCachingTest.measureTimeToIncrementTuples:gc.count            thrpt   50        3.000           counts MetricCachingTest.measureTimeToIncrementTuples:gc.time             thrpt   50        4.000               ms  Benchmark                                                         Mode    Cnt    Score   Error   Units MetricCachingTest.measureTimeToIncrementMap3D                     thrpt   50  125.315 ± 1.302   ops/s MetricCachingTest.measureTimeToIncrementMap3D:gc.alloc.rate       thrpt   50    0.007 ± 0.001  MB/sec MetricCachingTest.measureTimeToIncrementMap3D:gc.alloc.rate.norm  thrpt   50   56.932 ± 7.755    B/op ```  > [!Note] > To keep things fair  we refactored our tuples to be records in the hope that both immutable values and using records would nudge the JVM to avoid allocations.  > [!Note] > The actual benchmark will be added in a comment below.  Since metrics are in the hot path quite often  I think it's worth ensuring we're keeping things fast/light  and avoiding allocations is one of the best way to do this.  Also interesting is you will note that the benchmarks where we use enums for keys are much  much faster  which can be attributed (though we did not dig into it) to having the comparison/hash code being much faster.  ## MArray/Map3D/Table  The PR introduces a new generic multi-dimensional array structure which is variadic. It's not meant to be used directly all the time  but you can put it behind an interface to enforce some types and leverage the compiler.  You can see how `Map3D` and `Table` both use it under the hood for their enum counter parts. It's a little more verbose  I'll admit  which I'm not too happy about.  ## Related issues  related to #26078
Graylog2,graylog2-server,cf11512d774b525f54950e5c46e862cf74a45f69,https://github.com/Graylog2/graylog2-server/commit/cf11512d774b525f54950e5c46e862cf74a45f69,Use explicit bindings for DB entities (#21902)  * Temporarily disable entities scan to test effect on build time  * Temporarily disable entities scanner test  * Use explicit bindings instead of classpath scan  * Renaming & eager catalog initialization  * Rename MongoDBModule -> DbEntitiesModule  * Add constant for named binding
apache,paimon,cd447dc5f4f4e1ed29fecdde3e7554f02f8e78dd,https://github.com/apache/paimon/commit/cd447dc5f4f4e1ed29fecdde3e7554f02f8e78dd,[core] Optimize shouldDelaySnapshot in DataTableStreamScan
apache,pulsar,215b36dcc73dad91f4c9ba9a90da50540e4899a7,https://github.com/apache/pulsar/commit/215b36dcc73dad91f4c9ba9a90da50540e4899a7,[improve][ml] Do not switch thread to execute asyncAddEntry's core logic (#23940)
apache,iotdb,8f29bcd85782b3ffd468d903fb6526b55ed76873,https://github.com/apache/iotdb/commit/8f29bcd85782b3ffd468d903fb6526b55ed76873,Load: Do not clear schema cache when last cache is disabled (#15380)
Konloch,bytecode-viewer,a355a6185aa2ba2616064581dffebce6ec8fe089,https://github.com/Konloch/bytecode-viewer/commit/a355a6185aa2ba2616064581dffebce6ec8fe089,skip iterating over method nodes  if search fields are empty
vespa-engine,vespa,929dc83ac84021b5507cc186f9cee685b4606aa5,https://github.com/vespa-engine/vespa/commit/929dc83ac84021b5507cc186f9cee685b4606aa5,Gather memory usage from another source  Avoid expensive lookup of memory usage from /proc/<pid>/smaps  using /proc/<pid>/statm is cheaper
apache,flink,80a79bb5f6320a97e4051cba6e22c151dc9603cf,https://github.com/apache/flink/commit/80a79bb5f6320a97e4051cba6e22c151dc9603cf,[FLINK-36608][table-runtime] Add AdaptiveBroadcastJoinOptimizationStrategy to support adaptive broadcast join.
apache,hive,171340ad38ee8d082f6992a416c5aad63377d708,https://github.com/apache/hive/commit/171340ad38ee8d082f6992a416c5aad63377d708,HIVE-29046: Avoid unecessary perf overhead from handling deprecated properties in MetastoreConf (#5897)  Looping through ~400 ConfVars enumeration entries on every creation of a new Configuration entry is resource wasteful and unecessary. The deprecated properties are static and known at compile time so there is no reason to search and register them on every creation of a new Configuration instance. In addition  the presence of deprecation information inside the ConfVars enumeration leads to boilerplate code that is not really necessary.  1. Move deprecated property registation in the existing static block 2. Drop constructors and variables related to deprecated keys in ConfVars 3. Drop DEPRECATED_TEST_ENTRY that is only useful for testing purposes and adapt existing tests
dromara,Sa-Token,d8bd196d247d83e13beebd5bcff1e062292e9655,https://github.com/dromara/Sa-Token/commit/d8bd196d247d83e13beebd5bcff1e062292e9655,chore(core): 优化 active-timeout 的检查与续期操作，同一请求内只会检查与续期一次
apache,activemq,5a3abbc877bff6d73c2ab6cecec81d50dd18c839,https://github.com/apache/activemq/commit/5a3abbc877bff6d73c2ab6cecec81d50dd18c839,AMQ-9721 - Fix performance issues during non-persistent cursor removal (#1447)  This fixes the broker so multiple removals are no longer done for the same message leading to having to search the entire non persistent pending list. Durable subscriptions now check the persistence type of the message so the cursor will no longer search everything in a non-persistent pending list when the message is persistent.
camunda,camunda,49d69b2864e8b980db17c0c86d0d784db40a4cfb,https://github.com/camunda/camunda/commit/49d69b2864e8b980db17c0c86d0d784db40a4cfb,refactor: schema initialization should not block broker startup when gateway is deactivated
netty,netty,b48603c0c2e9fb96ca363570feca318799228bab,https://github.com/netty/netty/commit/b48603c0c2e9fb96ca363570feca318799228bab,IoUring: Use IORING_REGISTER_RING_FDS when possible (#14709)  Motivation:  If IORING_REGISTER_RING_FDS can be used we should do so to reduce overhead on io_uring_enter(...)  Modification:  Make use of IORING_REGISTER_RING_FDS  Result:  Less overhead during io_uring_enter(...)
zfoo-project,zfoo,1cfe5ab4332c3e6ac2481e01b50808286ae6f748,https://github.com/zfoo-project/zfoo/commit/1cfe5ab4332c3e6ac2481e01b50808286ae6f748,perf[proxy]: reduce the synchronization time of the heartbeat packets
trinodb,trino,ed84c037e88d6e7f026d2048a567563382e3eb6d,https://github.com/trinodb/trino/commit/ed84c037e88d6e7f026d2048a567563382e3eb6d,Use compiled comparator in TopNOperator  Switches TopNOperator to use a compiled comparator instead of using SimplePageWithPositionComparator.
Graylog2,graylog2-server,7845ab99117250085170ffede89de0e8ae84de7f,https://github.com/Graylog2/graylog2-server/commit/7845ab99117250085170ffede89de0e8ae84de7f,Improve performance for working with indices (#21195)  * Issue #18563: Don't iterate over all IndexSets for a given indexName  instead use `getForIndex(String)` directly. Also converted some loops to streaming.  * Add changelog  * Review comments  * Review comments part two
vespa-engine,vespa,98f911ddfe9cfa78fdac8e2acda3474f7f27d9c3,https://github.com/vespa-engine/vespa/commit/98f911ddfe9cfa78fdac8e2acda3474f7f27d9c3,Spend less cycles on metric aggregation  Remove unused metrics and dimensions. Cache context instances.
Graylog2,graylog2-server,c9ce413c96dba900cf9a2b4e6b6924d6ccd646ee,https://github.com/Graylog2/graylog2-server/commit/c9ce413c96dba900cf9a2b4e6b6924d6ccd646ee,Adds new CIDRPatriciaTrie data structure for CIDR lookup tables (#21474)  * Adds new CIDRPatriciaTrie data structure for CIDR lookup tables
camunda,camunda,22ce434d1937e185ae3bf211be356079090af4d2,https://github.com/camunda/camunda/commit/22ce434d1937e185ae3bf211be356079090af4d2,fix: bypass precondition checks for retried user task commands  When retrying a user task command after resolving an incident caused by task listener expression evaluation failures  the `UserTaskCommandPreconditionChecker` now bypasses authorization and state checks if the command lacks request metadata.  This change ensures that for internally retried commands (indicated by missing request metadata)  only the existence of the user task record is verified. Since these checks were already performed during the initial command processing  redoing them is redundant.
iterate-ch,cyberduck,97160c2a0483a3619bda026b16741129f15723ae,https://github.com/iterate-ch/cyberduck/commit/97160c2a0483a3619bda026b16741129f15723ae,Load task bundle on demand.
prestodb,presto,b190fe8d42eeb7023d540aaf390f4e15fe2e5818,https://github.com/prestodb/presto/commit/b190fe8d42eeb7023d540aaf390f4e15fe2e5818,Remove synchronization for updateFinalTaskInfo()  During lock profiling we observed that there is some contention when calling SqlStageExecution.updateFinalTaskInfo(). runningTasks used inside this method is a thread safe hashset. Also the stateMachine.setAllTasksFinal() is thread safe  as it acquires locks before execution. So its safe to remvoe the "synchronized" for updateFinalTaskInfo().
flowable,flowable-engine,3c283fb58176ff067f05a9b34d4db40e35ee4674,https://github.com/flowable/flowable-engine/commit/3c283fb58176ff067f05a9b34d4db40e35ee4674,Add method on planItemInstanceEntityManager to retrieve plan item instances by type(s) and state(s) which also checks the cache
pinpoint-apm,pinpoint,4780e3c2ed79383d867e636a968b41dc1d7b9473,https://github.com/pinpoint-apm/pinpoint/commit/4780e3c2ed79383d867e636a968b41dc1d7b9473,[#12434] Remove unnecessary OutLink stats for UserNode
pmd,pmd,6966b9fc121721c4dcde220cec48407d38a51646,https://github.com/pmd/pmd/commit/6966b9fc121721c4dcde220cec48407d38a51646,Optimize BackslackEscapeTranslator
opentripplanner,OpenTripPlanner,5a2051be6cedc65d85e43ab2ea3008b9ae0b2830,https://github.com/opentripplanner/OpenTripPlanner/commit/5a2051be6cedc65d85e43ab2ea3008b9ae0b2830,Merge pull request #6326 from Jnction/parallel-raptor-cache  Generate Raptor transfer cache in parallel
648540858,wvp-GB28181-pro,42322c75cc4df1a02b2faed44f8226061a1c81df,https://github.com/648540858/wvp-GB28181-pro/commit/42322c75cc4df1a02b2faed44f8226061a1c81df,[集群] 优化国标级联目录更新
netty,netty,90dff73a0f698525cbb9492d94331fe6692609cb,https://github.com/netty/netty/commit/90dff73a0f698525cbb9492d94331fe6692609cb,Simplify MQTT remaining length parsing (#15196)  Motivation:  Simplify the MQTT remaining length variable parsing in the MqttDecoder.  Modification:  Extracted the parsing logic to a separate method and refactored it.  Result:  The code becomes clearer and easier to understand. Also  the performance got slightly improved: ``` Benchmark                                                (size)  Mode  Cnt   Score   Error  Units MqttRemainingLengthBench.remainingLengthWithDoWhileLoop       1  avgt    3  31.790 ± 2.197  ns/op MqttRemainingLengthBench.remainingLengthWithDoWhileLoop       2  avgt    3  32.582 ± 1.884  ns/op MqttRemainingLengthBench.remainingLengthWithDoWhileLoop       3  avgt    3  32.656 ± 1.432  ns/op MqttRemainingLengthBench.remainingLengthWithDoWhileLoop       4  avgt    3  32.619 ± 1.795  ns/op MqttRemainingLengthBench.remainingLengthWithForLoop           1  avgt    3  31.516 ± 2.110  ns/op MqttRemainingLengthBench.remainingLengthWithForLoop           2  avgt    3  32.459 ± 2.740  ns/op MqttRemainingLengthBench.remainingLengthWithForLoop           3  avgt    3  32.407 ± 1.630  ns/op MqttRemainingLengthBench.remainingLengthWithForLoop           4  avgt    3  32.238 ± 3.994  ns/op ```  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
keycloak,keycloak,4fc065aadc5146c938ecf842a1548ef67f1ecdb3,https://github.com/keycloak/keycloak/commit/4fc065aadc5146c938ecf842a1548ef67f1ecdb3,Removed unnecessary boxing/unboxing  Closes #39987  Signed-off-by: Anchels <mishtitov@gmail.com>
spring-projects,spring-batch,a3e59b526e6e94ac41e7f243d195c2ea29d2f04a,https://github.com/spring-projects/spring-batch/commit/a3e59b526e6e94ac41e7f243d195c2ea29d2f04a,Improve performance of `JdbcStepExecutionDao::getStepExecution`  `JOB_EXECUTION_ID = ?` in where clause is unnecessary since `STEP_EXECUTION_ID` is primary key.  Signed-off-by: Yanming Zhou <zhouyanming@gmail.com>
apache,kylin,aa4952218a9e9d9caca1e365da75945a04d9c57c,https://github.com/apache/kylin/commit/aa4952218a9e9d9caca1e365da75945a04d9c57c,KYLIN-6039 Optimize query placeholder search by reducing loop count
camunda,camunda,84fab4994210d118064a9cafb262b0c98ba01d51,https://github.com/camunda/camunda/commit/84fab4994210d118064a9cafb262b0c98ba01d51,refactor: use search query instead of aggregation  * This commit replaces the previous used aggregation with a normal search query to filter for process instances or batch operations by end date * The use case for aggregations are completly different to what we wanted to use it for * Benchmarks has shown that aggregations perform way slower than a normal search query * It is not clear why we used an aggregration before * Aggregation are limited by how many results it can return  at somepoint it simply failed without any results  and unclear error messages. This made it hard to fine-tune. * The general change was motivated by 819c0b70ac6356f1a49e0f7f3fb6ee33a8feee4c from @lenaschoenburg
apache,paimon,2aef438c28905950436d30bdb7644bc9a78b9925,https://github.com/apache/paimon/commit/2aef438c28905950436d30bdb7644bc9a78b9925,[core] StreamScan should skip empty plan to more timely (#5931)
confluentinc,schema-registry,9c35ffa4eb56cb1ce71960d4109856ec697fd894,https://github.com/confluentinc/schema-registry/commit/9c35ffa4eb56cb1ce71960d4109856ec697fd894,Minor optimization to AeadWrapper initialization (#3833)
apache,flink-cdc,fc71888d7a9a84b73f1f6a16f7c755e2b1b40c02,https://github.com/apache/flink-cdc/commit/fc71888d7a9a84b73f1f6a16f7c755e2b1b40c02,[hotfix][cdc-common] Remove duplicated code to improve performance  This closes #3840.  Co-authored-by: zhangchaoming.zcm <zhangchaoming.zcm@antgroup.com>
apache,iotdb,04810e27cc899d86d0d090d4c59fb6d29dcc3941,https://github.com/apache/iotdb/commit/04810e27cc899d86d0d090d4c59fb6d29dcc3941,Fix predicate pushdown when dealing with ProjectNode (#14754)
apache,camel,973da4134654c9cceae3e59d709e46419cb1fbdd,https://github.com/apache/camel/commit/973da4134654c9cceae3e59d709e46419cb1fbdd,CAMEL-21580: camel-core: Fix rare potential ConcurrentModificationException when using producer template result processor during header copying. Use specialized processor as the message body is the only desired output so we avoid the header copying entirely. (#16690)
apache,iotdb,630a3d255d92fc1975b023ae987457a49e3e276e,https://github.com/apache/iotdb/commit/630a3d255d92fc1975b023ae987457a49e3e276e,Set safeDeletedSearchIndex for iotv2 to accelerate wal deletion #15221  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>
keycloak,keycloak,37f8baeb1fa22985a7bcabec44459347e76ef1f1,https://github.com/keycloak/keycloak/commit/37f8baeb1fa22985a7bcabec44459347e76ef1f1,Reorder operations to avoid the slow operation to get all client sessions (#39666)  Closes #39665  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
prestodb,presto,41aba926697e8c14e8c860f18df874f04db351ca,https://github.com/prestodb/presto/commit/41aba926697e8c14e8c860f18df874f04db351ca,Add single node execution  To improve performance for small queries which can be executed within a single node  we introduce single worker execution mode: query will only use one node to execute and plan would be optimized accordingly.
camunda,camunda,8931008393c4a72b5edd107ca5a98cc0aa4b3b0d,https://github.com/camunda/camunda/commit/8931008393c4a72b5edd107ca5a98cc0aa4b3b0d,refactor: compute properties only once
apache,iotdb,5911f231b79eb7c46dbab2180059b752ecd2e5e1,https://github.com/apache/iotdb/commit/5911f231b79eb7c46dbab2180059b752ecd2e5e1,Pipe: Using caching to optimize the verifyTableDataType method in the Load analysis phase (#15007)
igniterealtime,Openfire,b6edd98cc1ecf7a16512814a19d3c582a50457d5,https://github.com/igniterealtime/Openfire/commit/b6edd98cc1ecf7a16512814a19d3c582a50457d5,OF-3061: Improve DB query to get last pubsub items  The old codebase defined two queries to get the last item for a pubsub node  and to get all items for a pubsub node. The actual SQL of both definitions is the same. It does not contain any ‘limit’ or ‘top’ clause (although database driver hints are given).  This is likely the result of Openfire supporting multiple database systems  that each have their own clauses to limit a resultset. SQLServer uses SELECT TOP(?) ...  Oracle has ... FETCH FIRST ? ROWS ONLY while other databases generally use ... LIMIT ?. It is inconvenient to fold all these alternatives in one implementation.  In this commit  the code is modified to:  - limit the size of the requested resultset from the database appropriately. - remove SQL duplication (getting the latest item can use the same query as getting the latest X items  using an argument value of 1).  This intends to make the database interaction more efficient (by reducing the likelihood that the database offers up all items for a node  when only a few (or one!) is needed.
apache,ignite,b1edb09bff5c1132943e256b0840d07704cba759,https://github.com/apache/ignite/commit/b1edb09bff5c1132943e256b0840d07704cba759,IGNITE-24666 Optimize Outbox#flush method (#11901)
tencentmusic,supersonic,72780f9acf843d51b7c0c38b56079547f673551e,https://github.com/tencentmusic/supersonic/commit/72780f9acf843d51b7c0c38b56079547f673551e,[improvement][common] The thread pool adopts a generic thread pool configuration. (#1966)
quarkusio,quarkus,dfb5ff99ad7e5219f0eccdbeb0f50df3df2ed4bd,https://github.com/quarkusio/quarkus/commit/dfb5ff99ad7e5219f0eccdbeb0f50df3df2ed4bd,KeycloakDevServicesProcessor - Avoid all work if disabled  Even if the Dev Services for Keycloak were disabled  we were actually doing a lot of things  including some Docker work  which should be avoided.
dataease,dataease,0a2ceb2b2619baf9cd0388a2b745a5c7544996c2,https://github.com/dataease/dataease/commit/0a2ceb2b2619baf9cd0388a2b745a5c7544996c2,fix: 【数据导出中心】修复切换tab页导致cpu暴增
apache,hudi,62af2113c1afc0dce2af3bf40b80e7ce2363b6f7,https://github.com/apache/hudi/commit/62af2113c1afc0dce2af3bf40b80e7ce2363b6f7,[HUDI-8940] Fix Bloom Index Partitioner to distribute keys uniformly across partitions (#12741)  Co-authored-by: Vamsi <vamsi@onehouse.ai> Co-authored-by: Y Ethan Guo <ethan.guoyihua@gmail.com>
prestodb,presto,f02046f22ae01af401ece030f28329cac78524e3,https://github.com/prestodb/presto/commit/f02046f22ae01af401ece030f28329cac78524e3,Avoid creating expensive Path objects in split creation code
trinodb,trino,ace0da6d0bca62783de3e0c25bf781b1172bfbde,https://github.com/trinodb/trino/commit/ace0da6d0bca62783de3e0c25bf781b1172bfbde,Cache hash values where appropriate  Adds logical to dynamically decide whether to cache hash values into the hash table itself based on whether the GroupByHash instance is spillable  whether container types are present in the grouping keys  the number of variable width types  and the number of types overall.  Caching hash values in GroupByHash is a classic compute / memory trade-off. Caching the value costs more memory (8 extra bytes per record) but avoids relatively more expensive hash recalculation when re-hashing the table or sorting the table contents by raw hash value for spilling. Caching the hash value can also make inserting new entries cheaper by avoiding the need for relatively more expensive valueIdentical checks when the hash value can prove that the values are not identical  although this effect is already somewhat mitigated by the FlatHash control vector.
netty,netty,31c033a1d95eb4a74002c5f17ea01c967b07add9,https://github.com/netty/netty/commit/31c033a1d95eb4a74002c5f17ea01c967b07add9,Optimize ByteBuf.setCharSequence for adaptive allocator (#15165)  Motivation: The `setCharSequence` method is used a fair bit when encoding HTTP headers. I noticed the AdaptiveByteBuf was sending the call down a path with a more indirections than strictly necessary.  Modification: Implement `setCharSequence` in the `AdaptiveByteBuf` so we skip a level of indirections. This is especially profitable for direct/off-heap buffers  where we see up to a 50% performance improvement in the benchmark. The benefit is greater the longer the string is.  Interestingly  the benchmark also show that it isn't profitable to do this for the `getCharSequence` sibling method.  Result: Direct buffers from the adaptive allocator now have much faster `setCharSequence`  which will help with HTTP header encoding.
apache,paimon,cfb007562914123f6f7ac17253e0cdf397a52a1a,https://github.com/apache/paimon/commit/cfb007562914123f6f7ac17253e0cdf397a52a1a,[core] Optimized iterative list implementations for FileIO (#4952)
apache,hive,6166da46337a75d0131c591e4b3aa339961514d2,https://github.com/apache/hive/commit/6166da46337a75d0131c591e4b3aa339961514d2,HIVE-27873: Fix getOperationStatus and optimize fetch (Kurt Deschler  reviewed by Attila Turoczy  Denys Kuzmenko)  This patch fixes a major performance issue fetching result from Impala. The problem was that Impala does not set isHasResultSet during getOperationStatus() calls  resulting in that RPC getting called and logging a completion message for every row fetched. Optimizes the fetch path to minimize conditional checks in the fast path.  Closes #4902
camunda,camunda,66117bde8fe951f552f516c40ca01d89e38d3ddc,https://github.com/camunda/camunda/commit/66117bde8fe951f552f516c40ca01d89e38d3ddc,fix: improve performance of range queries
crate,crate,7b4544bf39f2c75af10a210bb319d6562db52e17,https://github.com/crate/crate/commit/7b4544bf39f2c75af10a210bb319d6562db52e17,Lookup circuit breaker only once per job setup  Minor micro optimizaton. Noticed this while profiling related to https://github.com/crate/crate/pull/17820#discussion_r2066395824  Can't freeze the breaker during the `JobSetup` initialization because we still need to observe setting changes  but can limit the lookup to once per query.
thingsboard,thingsboard,a2382c206f10d84c17d0336bb9cc086ecf19d549,https://github.com/thingsboard/thingsboard/commit/a2382c206f10d84c17d0336bb9cc086ecf19d549,fixes for performance
theonedev,onedev,d4e8f071511b74a76f4335ff6182b021026f5655,https://github.com/theonedev/onedev/commit/d4e8f071511b74a76f4335ff6182b021026f5655,feat: cache cherry-pick and revert result.
apache,shenyu,5bd78ff6bc303925a4e419153ca48b645ec92c4a,https://github.com/apache/shenyu/commit/5bd78ff6bc303925a4e419153ca48b645ec92c4a,perf(logging): Optimize the performance of log collection (#5931)  - Adjust the serialization timing of the request body and response body to avoid unnecessary string operations. - Perform string conversion only after confirming the need to record logs to reduce resource consumption.  Co-authored-by: 宗杰 <1491040549@qq.com>
netty,netty,2f24b94c137368b548284858f2ede807c8f16c23,https://github.com/netty/netty/commit/2f24b94c137368b548284858f2ede807c8f16c23,Small adaptive allocator optimization (#15062)  Motivation:  The ByteBuffer.slice() operation is fairly costly  and not always necessary. We can instead create it upon first use.  Modification:  Create the tmp nio buffer on demand in the AdaptiveByteBuf instead of in the buffer initialization. Also clean up some nits I noticed.  Result:  The `ByteBufAllocatorConcurrentBenchmark` goes from this:  ``` Benchmark                                                    (size)   Mode  Cnt          Score          Error  Units ByteBufAllocatorConcurrentBenchmark.allocateReleaseAdaptive   00256  thrpt   20   90016002.762 ± 16401133.377  ops/s ByteBufAllocatorConcurrentBenchmark.allocateReleasePooled     00256  thrpt   20  133278469.959 ± 23482602.497  ops/s ```  To this:  ``` Benchmark                                                    (size)   Mode  Cnt          Score         Error  Units ByteBufAllocatorConcurrentBenchmark.allocateReleaseAdaptive   00256  thrpt   20  246909449.159 ± 1472871.187  ops/s ByteBufAllocatorConcurrentBenchmark.allocateReleasePooled     00256  thrpt   20  159183952.551 ±  177573.851  ops/s ```  Although there is still quite a lot of run-to-run variability  e.g. the "pooled" numbers are supposed to be unchanged between the two runs  but clearly aren't. Adaptive suffers similar  or perhaps worse variability.  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
apache,incubator-seata,efa341a0720084e5bf62fbdfa2271453cc3a4468,https://github.com/apache/incubator-seata/commit/efa341a0720084e5bf62fbdfa2271453cc3a4468,optimize: caching the ConsistentHashSelector to avoid remapping when select every time. (#7072)
apache,lucene,b43432cba307355f9b45ad43eb997551f1764f09,https://github.com/apache/lucene/commit/b43432cba307355f9b45ad43eb997551f1764f09,Removing unnecessary ByteArrayDataInput allocations by resetting inplace 
openhab,openhab-addons,e7acb14d027f4a6371cc871304be1edb9e22cc72,https://github.com/openhab/openhab-addons/commit/e7acb14d027f4a6371cc871304be1edb9e22cc72,[easee] speedup command processing (#18027)  * speedup command processing  Signed-off-by: Alexander Friese <af944580@googlemail.com>
pinpoint-apm,pinpoint,266dbc10bd388de2820eac746a73b5fc143e0210,https://github.com/pinpoint-apm/pinpoint/commit/266dbc10bd388de2820eac746a73b5fc143e0210,[#12440] Improved reuse of ObjectMapper in Agent
camunda,camunda,0f5a8b22fdc3132205e11c5b930c0695895f20c8,https://github.com/camunda/camunda/commit/0f5a8b22fdc3132205e11c5b930c0695895f20c8,fix: refactor context loader to consider simple mappings (#33877)  ## Description  <!-- Describe the goal and purpose of this PR. -->  This PR resolves a couple of things 1. Solves the bug where the roles loaded do not consider all possible ways a principal can be assigned a role 2. Refactors the query/filter sent to ES so its a single call with OR vs multiple calls per member type  The intention is to extend this to the other membership based entities in the class.  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria) - [ ] enable backports [when recommended](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)  ## Related issues  Related to https://github.com/camunda/camunda/issues/26572
apache,druid,a8da3814ec1af24f06e14cc785df1a8f2e02d1d3,https://github.com/apache/druid/commit/a8da3814ec1af24f06e14cc785df1a8f2e02d1d3,k8s: Update fabric8 to 6.13.1  switch to Vert.x http client. (#17913)  * k8s: Update fabric8 to 6.13.1  switch to Vert.x http client.  fabric8 6.x uses the OkHttp client by default  which itself uses an unbounded-size cached pool  with 60s timeout  for making requests. In production with large task counts  this leads to lots of thread churn.  The Vert.x client is the default in fabric8 7.x  and is better behaved. By default it uses a worker pool of 20 threads (see javadoc for VertxOptions).  This patch uses fabric8 6.13.1 rather than some later version  because higher versions are not compatible with Jackson 2.12.  * Fix call.  * Update licenses.yaml. Override thread pool configs.  * Remove annotation.  * Fix style.  * Update licenses.yaml.  * Add dep.
signalapp,Signal-Server,faef614d809074ce43999a668e80b943f8ec7f8e,https://github.com/signalapp/Signal-Server/commit/faef614d809074ce43999a668e80b943f8ec7f8e,Parse message content as a byte array in request entities
google,guice,c4401b8f985044520ee0413e92eb3468f4c28995,https://github.com/google/guice/commit/c4401b8f985044520ee0413e92eb3468f4c28995,Simplify the protocols for 'constant' bindings  * accept an `InternalContext` parameter from `Initializable.get` which all callers can provide. - This speeds up the `injectAll` phrase of injector creation since we no longer need to create an `InternalContext` object for each instance binding. * for 'constant' bindings with no injection points use a simpler set of `InternalFactory` types. - This provides some immediate benefits by eliminating indirection (though admittedly the impacts are minor)  but when we adopt method handles this will enable a cheaper implementation there as well.  PiperOrigin-RevId: 715093467
camunda,camunda,a8b170e7835910e3babc49457d6657e4f83e3b89,https://github.com/camunda/camunda/commit/a8b170e7835910e3babc49457d6657e4f83e3b89,perf: avoid more copies directly from state (#34454)  Builds on top of #34431 and removes a couple of other places that used the get-then-copy approach. I've split the commits roughly by complexity  f7bd11723686d3564da6591f0d3ad024caf7d5b9 contains all the straigh-forward cases  the other commits deserve a bit more attention.  I'm also a bit hesitant to backport this  mostly due to the manual effort in dropping changes for states that are not present in older versions and verifying correctness for the more complex cases.
tencentmusic,supersonic,8c6ae6252220afa542ec5d9bab30f715c45e6990,https://github.com/tencentmusic/supersonic/commit/8c6ae6252220afa542ec5d9bab30f715c45e6990,[improvement][chat] Change the embedding to execute in parallel (#1967)
orientechnologies,orientdb,061458385ab5e79fdc5b80fa105e9ade03832ba2,https://github.com/orientechnologies/orientdb/commit/061458385ab5e79fdc5b80fa105e9ade03832ba2,refactor: minor optimization in the query parsing
graphhopper,graphhopper,4e7b5d4d941348a27e6971973814dcf5056f8ea6,https://github.com/graphhopper/graphhopper/commit/4e7b5d4d941348a27e6971973814dcf5056f8ea6,Improve compressed stream handling (#3142)  * Speedup readFile  * Buffer compressed downloads  * Use entry to determine buffer size  * Move buffer before ZipInputStream  * Add fallback for unknown entry size
apache,camel,2c12367316bf5ace1e0b5da0afac28568ab8f348,https://github.com/apache/camel/commit/2c12367316bf5ace1e0b5da0afac28568ab8f348,[CAMEL-21761] Use model cache for maven-resolver based downloader
SPLWare,esProc,238acba5974fbc4cbd3b2280b0332bc9a272ee77,https://github.com/SPLWare/esProc/commit/238acba5974fbc4cbd3b2280b0332bc9a272ee77,Optimized excel functions.
camunda,camunda,bcc389615bec1af9faac9ef3ae130f9b18ba6b22,https://github.com/camunda/camunda/commit/bcc389615bec1af9faac9ef3ae130f9b18ba6b22,fix: do not perform nested computeIfAbsent in SwimMembershipProtocolMetrics
apache,guacamole-client,38541c63aa964f769f1b6ca8e12cc21b83b761c5,https://github.com/apache/guacamole-client/commit/38541c63aa964f769f1b6ca8e12cc21b83b761c5,GUACAMOLE-377: Merge address performance regression related to migration to guac_display.
jar-analyzer,jar-analyzer,9a9a51696f0971bd5eafbb4b4554cc0b5152a275,https://github.com/jar-analyzer/jar-analyzer/commit/9a9a51696f0971bd5eafbb4b4554cc0b5152a275,使用合理的线程池
alibaba,spring-ai-alibaba,6f1bcfa791b1020ea37bb689551a42592e149735,https://github.com/alibaba/spring-ai-alibaba/commit/6f1bcfa791b1020ea37bb689551a42592e149735,perf(deepresearch): optimize reporter node prompts (#1547)  * upgrad(deepresearch): Update elasticsearch similarity retrieval implementation. Plan to reuse similarity retrieval implementation later.  * upgrad(deepresearch): Split knn searchimplementation later.  * upgrad(deepresearch): Removed plan1 specification method annotation  * perf(deepresearch): optimize reporter node prompts  * perf(deepresearch): optimize reporter node prompts  * perf(deepresearch): optimize reporter node prompts
opensolon,solon,3848ba603747aafce4de60ddce00a0c89da8ebef,https://github.com/opensolon/solon/commit/3848ba603747aafce4de60ddce00a0c89da8ebef,优化 solon-expression MethodNode 性能
crate,crate,19c449f0918621e8aac5c7b626555b580910cce5,https://github.com/crate/crate/commit/19c449f0918621e8aac5c7b626555b580910cce5,Don't re-create RetryingListener on each retry
camunda,camunda,3690608ac44c89830efd8323126b3bafa7538f35,https://github.com/camunda/camunda/commit/3690608ac44c89830efd8323126b3bafa7538f35,fix: use parallelStream  Use parallelStream on creation of indices and templates this is to make bootstrapping quicker  especially for tests
questdb,questdb,ca6a8242dd756d93efe71cbca0cef89335df85fc,https://github.com/questdb/questdb/commit/ca6a8242dd756d93efe71cbca0cef89335df85fc,perf(sql): speed up initial refresh of materialized views with high cardinality symbols (#5906)
apache,hudi,34ff039da5a9605335016aec0ab8094093de7f46,https://github.com/apache/hudi/commit/34ff039da5a9605335016aec0ab8094093de7f46,[HUDI-9399] Improve bloom filter bucketizing in Spark (#13284)
vespa-engine,vespa,dfe1ca2713300925f09c14382f5e2386074f45ed,https://github.com/vespa-engine/vespa/commit/dfe1ca2713300925f09c14382f5e2386074f45ed,Remove synchronized from startDownload()  We check for ongoing downloads and if we happen to start downloads concurrently  we handle that as well (write to temp file  move atomically). I suspect using synchronized here might lead to downloads waiting until they time out when several clients ask for the same file
apache,maven,4324cada41fb92f5dff6eb3fd702260f02b4079f,https://github.com/apache/maven/commit/4324cada41fb92f5dff6eb3fd702260f02b4079f,Optimize XmlPlexusConfiguration for performance and thread safety (#2527)  * Optimize XmlPlexusConfiguration for performance and thread safety  This commit significantly improves the XmlPlexusConfiguration class by addressing both performance bottlenecks and thread safety issues:  Performance Improvements: - Eliminated expensive deep copying in constructor by wrapping XmlNode directly - Implemented lazy evaluation for child configurations (created only when accessed) - Improved memory efficiency by sharing underlying XML structure - Reduced object allocation overhead during XML processing  Thread Safety Fixes: - Replaced HashMap with ConcurrentHashMap for childMap to prevent race conditions - Added proper synchronization around child configuration modifications - Fixed infinite loops and inconsistent state during parallel builds - Ensures safe concurrent access in multi-threaded environments  Backward Compatibility: - Maintained full API compatibility with existing PlexusConfiguration interface - Implemented all write methods (setValue  addChild  etc.) for completeness - Preserved existing behavior while improving internal implementation - Added comprehensive test coverage for all functionality  Impact: - Resolves MavenITmng5760ResumeFeatureTest failures in parallel builds - Significantly reduces memory usage and improves XML processing speed - Enables safe usage in concurrent scenarios without performance degradation - Maintains 100% backward compatibility with existing code  The optimization maintains the existing public API while dramatically improving performance characteristics and ensuring thread safety for parallel builds.  * Add comprehensive JMH performance benchmarks for XmlPlexusConfiguration  - Added XmlPlexusConfigurationOld: Copy of original implementation for comparison - Added XmlPlexusConfigurationBenchmark: Core performance benchmarks - Added XmlPlexusConfigurationConcurrencyBenchmark: Thread safety benchmarks - Added XmlPlexusConfigurationMemoryBenchmark: Memory allocation benchmarks - Added BENCHMARKS.md: Comprehensive documentation and usage instructions - Added JMH dependencies to maven-xml pom.xml  The benchmarks compare old vs new implementations across: - Constructor performance (simple  complex  deep XML structures) - Memory allocation patterns and efficiency - Thread safety and concurrent access performance - Lazy vs eager loading benefits  Usage: mvn test-compile exec:java -Dexec.mainClass=\org.openjdk.jmh.Main\ \\ -Dexec.classpathScope=test \\ -Dexec.args=\org.apache.maven.internal.xml.*Benchmark\ \\ -pl impl/maven-xml  Expected results show 50-80% performance improvements and significant memory usage reduction in the optimized implementation.  * Update benchmarks with actual performance results  - Added real JMH benchmark results to BENCHMARKS.md - Simple XML: 8.9x faster (88% improvement) - Complex XML: 134x faster (99.3% improvement) - Demonstrates dramatic benefits of eliminating deep copying - Validates the optimization's effectiveness with concrete data
quarkusio,quarkus,b870c90569a4c88467313587565205818034f4df,https://github.com/quarkusio/quarkus/commit/b870c90569a4c88467313587565205818034f4df,Merge pull request #45512 from gsmet/add-a-cache-for-classproxies  Add a cache for class proxies in BytecodeRecorderImpl
camunda,camunda,aae54c6dbbd4015c56524cbe2330f3e212bfd69b,https://github.com/camunda/camunda/commit/aae54c6dbbd4015c56524cbe2330f3e212bfd69b,feat: call input collection behavior instead of evaluating the input collection  Instead of always evaluating the input collection we should try and retrieve it from the sate instead.
apache,flink,b76108ccdb480a51eeb1c97fe6fdd57f7c06e199,https://github.com/apache/flink/commit/b76108ccdb480a51eeb1c97fe6fdd57f7c06e199,[FLINK-37379][state/forst] Enable forst file cache by default
alibaba,fastjson2,3cb8ff19549a2f7fa9b72e26832655cae0ab46fb,https://github.com/alibaba/fastjson2/commit/3cb8ff19549a2f7fa9b72e26832655cae0ab46fb,Swar 20250123 (#3310)  * fail fast  * fail fast  * optimize parseDate  * bug fix  * check style  * ymd  * formatComplex  * optimize parseTime  * optimize lines  * optimize writeFloat
jetlinks,jetlinks-community,d3adf0e752fbb6b4d16be49815fa84184033e46c,https://github.com/jetlinks/jetlinks-community/commit/d3adf0e752fbb6b4d16be49815fa84184033e46c,refactor: 优化设备会话持久化逻辑
apache,pulsar,06f424c4823399ae66608ad9fd0e2133a1055b1a,https://github.com/apache/pulsar/commit/06f424c4823399ae66608ad9fd0e2133a1055b1a,[improve][misc] Optimize topic list hashing so that potentially large String allocation is avoided (#24525)
apache,flink,dccb782134b42f41b2a595b8b3e27851c495a3fd,https://github.com/apache/flink/commit/dccb782134b42f41b2a595b8b3e27851c495a3fd,[FLINK-37021][state/forst] Leverage fast-copying of FileSystems for snapshots
alibaba,fastjson2,7bb7f34f9d8acd5ab814cf517efb37a82e98304b,https://github.com/alibaba/fastjson2/commit/7bb7f34f9d8acd5ab814cf517efb37a82e98304b,optimize deserialize float/double
checkstyle,checkstyle,1a88f3436b7ddbe5968fac7479df8c730d7dda81,https://github.com/checkstyle/checkstyle/commit/1a88f3436b7ddbe5968fac7479df8c730d7dda81,Pull #16628: Try SLL prediction mode for fast javadoc parsing
apache,hive,dd5b05e4be89a3c705675871450821b66b8ec4d7,https://github.com/apache/hive/commit/dd5b05e4be89a3c705675871450821b66b8ec4d7,HIVE-28725: Sorting is performed when order by position is disabled when CBO is enabled (Krisztian Kasa  reviewed by Shohei Okumiya)
trinodb,trino,48b5e78943e4fbc3bf839c57d4ae9fee2a327ef3,https://github.com/trinodb/trino/commit/48b5e78943e4fbc3bf839c57d4ae9fee2a327ef3,Cache JWT tokens instead of generating per request
apache,iotdb,72aeed2591f23de2f3a567b43e12d02e5ee74ca4,https://github.com/apache/iotdb/commit/72aeed2591f23de2f3a567b43e12d02e5ee74ca4,Pipe: Optimized insert node cache hit possibility & Pipe: Set thread name for pipe receiver (#15263)  * Pipe: Optimized insert node cache hit possibility  * Pipe: Set thread name for pipe receiver
quarkusio,quarkus,8a1ab70291b67ce2134299d28cf2227d9910e219,https://github.com/quarkusio/quarkus/commit/8a1ab70291b67ce2134299d28cf2227d9910e219,Make production of quarkus.uuid lazy  This is done because bootstrapping the plumbing needed by the JDK to produce a UUID value is expensive  it thus doesn't make sense to pay this cost when the property isn't actually needed
camunda,camunda,05067210f9ff727d8c033c2478aa7abe10337689,https://github.com/camunda/camunda/commit/05067210f9ff727d8c033c2478aa7abe10337689,Perform Incident notification on the background (#31937)  ## Description  <!-- Describe the goal and purpose of this PR. --> Perform the process of notifying regarding Incidents in the Background task of `IncidentUpdateTask`. We already have access to the Incident's in that part of the code and it would be more efficient to batch the notifications instead of send one per exported Incident in the respective `IncidentHandler`.  In this PR the Process and Form caches are also being exposed by the `ExporterResourceProvider` so as to be reused for the background task  as I believe their implementation is not of a shared cache but distinct instances.  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria) - [ ] enable backports [when recommended](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)  ## Related issues  closes #31937
tlaplus,tlaplus,4bdabbea3aaf1a52a4d4590f9980732e985d218b,https://github.com/tlaplus/tlaplus/commit/4bdabbea3aaf1a52a4d4590f9980732e985d218b,Simplify integer arithmetic with faster `Math.multiplyHigh`.  The variant is noticeably faster if the JVM (HotSpot) can leverage the intrinsic of the underlying hardware (arm64 below):  ``` Benchmark                                  Mode  Cnt         Score Error  Units OffHeapIndexerBenchmark.InfMult           thrpt       47561833.170 ops/s OffHeapIndexerBenchmark.InfMultIntrinsic  thrpt       52496412.155 ops/s ```  Part of Github issue #1112 "Warning: DiskFPSet.mergeNewEntries: xxx is already on disk with hangup following." https://github.com/tlaplus/tlaplus/issues/1112  [Refactor][TLC]  Signed-off-by: Markus Alexander Kuppe <github.com@lemmster.de>
keycloak,keycloak,1cf51a700c8db6b9d750ea44a13ea7544e9f59af,https://github.com/keycloak/keycloak/commit/1cf51a700c8db6b9d750ea44a13ea7544e9f59af,Also cache client roles if looked up by name and not found  Closes #36919  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
opensolon,solon,340752a8d4adf9ab158a8c19e3373d39fbacd7b1,https://github.com/opensolon/solon/commit/340752a8d4adf9ab158a8c19e3373d39fbacd7b1,优化 solon-expression 缓存策略
apache,camel,d2588d06ffeff9364b31661cf13c318e355b53f7,https://github.com/apache/camel/commit/d2588d06ffeff9364b31661cf13c318e355b53f7,CAMEL-19898: camel-core - Optimize StreamCaching strategy to skip conversion for well known types and do fast lookup of dedicated StreamCache converters  to bypass regular type converter.
camunda,camunda,ba1a0b20a952c4f18bb0892e2f6c8cd5e3602903,https://github.com/camunda/camunda/commit/ba1a0b20a952c4f18bb0892e2f6c8cd5e3602903,feat: copy form only if needs to be put in cache
alibaba,fastjson2,91e54fc36dc71a3f3e00de51bb32478299828ec4,https://github.com/alibaba/fastjson2/commit/91e54fc36dc71a3f3e00de51bb32478299828ec4,optimization for readLocalDate (#3270)  * optimization for readLocalDate  * use IOUtils.digit2  * check style
apache,pinot,fe1767ebdbec857ac245d04a6ddb5e1fa6e520a0,https://github.com/apache/pinot/commit/fe1767ebdbec857ac245d04a6ddb5e1fa6e520a0,Avoid bytes copy in MessageDecoder (#16349)
trinodb,trino,21f42d0ef8abd30b145f3bc5cdf298f2a9623973,https://github.com/trinodb/trino/commit/21f42d0ef8abd30b145f3bc5cdf298f2a9623973,Use presized builder when rewritting row values
apache,hudi,79bcb69361203adc75f7b387bfa91eaa02993bb5,https://github.com/apache/hudi/commit/79bcb69361203adc75f7b387bfa91eaa02993bb5,[HUDI-8787] Improve compaction performance by reducing unnecessary disk access (#12531)  * perf: improve compaction performance by avoid unnecessary disk visiting  1. improve compaction performance by avoid unnecessary disk visiting 2. support push down predicate to `ExternalSpillableMap`  Signed-off-by: TheR1sing3un <chaoyang@apache.org>  * Cosmetic changes  * feat: support RocksDbDiskMap::iterator(filter)  1. support RocksDbDiskMap::iterator(filter) 2. refactor RocksDBDao::iterator to return key-value pairs rather than only values  Signed-off-by: TheR1sing3un <chaoyang@apache.org>  * refactor: remove unused changes  1. remove unused changes  Signed-off-by: TheR1sing3un <chaoyang@apache.org>  ---------  Signed-off-by: TheR1sing3un <chaoyang@apache.org> Co-authored-by: danny0405 <yuzhao.cyz@gmail.com>
netty,netty,ad5f328c4625550e6ca3df0bed2aade31fa1247b,https://github.com/netty/netty/commit/ad5f328c4625550e6ca3df0bed2aade31fa1247b,WebSocket08FrameEncoder improvements (#15216)  Motivation:  While checking https://github.com/netty/netty/issues/15157  I found a few small improvements that could be done for `WebSocket08FrameEncoder`:  Modifications: - `opcode` resolving moved to its own method to make the code more readable - removed unnecessary `isReadable()` call and replaced it with `length > 0` check - replaced modulo operations with bit operations which are cheaper  Result: Cleanup
apache,guacamole-client,f2958ffb552dbfdf7064169e459429ff7a0773e6,https://github.com/apache/guacamole-client/commit/f2958ffb552dbfdf7064169e459429ff7a0773e6,GUACAMOLE-377: Set NO_DELAY on guacd socket to avoid unnecessary latency.
casbin,jcasbin,97a3bdd3ce28a619a1475e8f9a0078846b5b19b4,https://github.com/casbin/jcasbin/commit/97a3bdd3ce28a619a1475e8f9a0078846b5b19b4,feat: optimizations when logging is disabled (#453)
AxonFramework,AxonFramework,d86a16ace1a8cfdb9ed55f19a76acdcc4c206dd0,https://github.com/AxonFramework/AxonFramework/commit/d86a16ace1a8cfdb9ed55f19a76acdcc4c206dd0,[#3402] FallbackMessageTypeResolver - add cache
apache,iotdb,07e0d21478a7145c9aa36f1a280b4960c64680dd,https://github.com/apache/iotdb/commit/07e0d21478a7145c9aa36f1a280b4960c64680dd,[opt](query) Improve the logic to calculate TRegionReplicaSets for devices (#15102)
alibaba,fastjson2,096ee76a2e69b89f908c83d7a1dc3143fd5828bf,https://github.com/alibaba/fastjson2/commit/096ee76a2e69b89f908c83d7a1dc3143fd5828bf,optimize bound check
Azure,azure-sdk-for-java,c1810590c8e8120c9d28df2dfce312eaa88bad2e,https://github.com/Azure/azure-sdk-for-java/commit/c1810590c8e8120c9d28df2dfce312eaa88bad2e,Fixed small perf overhead due to NPE for readItem returning 404 (#44008)  * Addressing NPE for readItem returning 404  * Update CHANGELOG.md  * Update SparkE2EGatewayChangeFeedITest.scala
keycloak,keycloak,9ce4539d2290a64bfaca96abd544f3dc5d22c7a3,https://github.com/keycloak/keycloak/commit/9ce4539d2290a64bfaca96abd544f3dc5d22c7a3,fix: switching default client scopes to lazy loading (#38553)  closes: #38552  Signed-off-by: Steve Hawkins <shawkins@redhat.com>
graphhopper,jsprit,3842271c0090057386d4c7817f6bea406a9e444c,https://github.com/graphhopper/jsprit/commit/3842271c0090057386d4c7817f6bea406a9e444c,perf: use route indexing with Trove maps for state storage  - Add index field to VehicleRoute for efficient state lookup - Replace HashMap with TIntObjectMap for better performance - Optimize route state access methods using indices - Reduce map operations and array lookups in hot methods
apache,hudi,4e421ed86d86d414d66284681171bf80c236d97e,https://github.com/apache/hudi/commit/4e421ed86d86d414d66284681171bf80c236d97e,[HUDI-9322] HoodieRecord#getAvroBytes returns ByteArrayOutputStream to reduce bytes copy (#13186)
languagetool-org,languagetool,cd3c2fd1e5f6047fcd8c6e05da189e2f8f74f89c,https://github.com/languagetool-org/languagetool/commit/cd3c2fd1e5f6047fcd8c6e05da189e2f8f74f89c,Improve pipeline prewarming (#11397)
trinodb,trino,ff5fd2730604ba5a81123b999f382d2bfd9ceab5,https://github.com/trinodb/trino/commit/ff5fd2730604ba5a81123b999f382d2bfd9ceab5,Add FlatGroupByHash cached mode  Adds support for caching the computed hash values in FlatGroupByHash hash tables when the GroupByHash may be spilled or when the hash calculation is expensive to compute.  In the case of spillable hash tables  spilling will involve sorting the table contents based on the raw hash value- which can be extremely expensive if the value is being recomputed on each comparison compared to simply accessed from the table.  Similarly  re-hashing large FlatGroupByHash instances can be significantly more expensive without the hash value cached when there are a large number of columns or when the hash calculation itself is relatively expensive.
apache,hbase,7737ae18482daa2afd0db31581061ea49edae0ec,https://github.com/apache/hbase/commit/7737ae18482daa2afd0db31581061ea49edae0ec,HBASE-29160: Cache region name string in RegionInfo (#6742)  Signed-off-by: Wellington Chevreuil <wchevreuil@apache.org>
trinodb,trino,2d4b930df9ac10a4da6c131217fa4837429017ef,https://github.com/trinodb/trino/commit/2d4b930df9ac10a4da6c131217fa4837429017ef,Use CharMatcher instead of a regex
primefaces,primefaces,4f0c87acbfb0e499ee73b312b8ead2e38d0c1945,https://github.com/primefaces/primefaces/commit/4f0c87acbfb0e499ee73b312b8ead2e38d0c1945,#13185 - WidgetVar: improve performance by resolve it on the client side  (#13186)  * Revert "#12868"  This reverts commit f2740ea82007ee410dfb53af7ebb402a40b72a2f.  * Revert "Revert "#12868""  This reverts commit af9fb8811d46b02b05c6fb0cd033eedccb878972.  * #13185  * #13185 refactored  * #13185 clarify VisitHint usage  * #13185 refactored
jetlinks,jetlinks-community,821a9ec736606f63c157acd7949f2b17fe6a3962,https://github.com/jetlinks/jetlinks-community/commit/821a9ec736606f63c157acd7949f2b17fe6a3962,refactor: 优化mqtt连接处理
camunda,camunda,06386777157962ee7fd0a78fafc2da77ed1d925d,https://github.com/camunda/camunda/commit/06386777157962ee7fd0a78fafc2da77ed1d925d,refactor: use virtual threads  Use virtual threads and completable futures to create indices  this is to speed up index creation
keycloak,keycloak,bac5ec8858c48e0139cda22c8ffc7720f2c0447c,https://github.com/keycloak/keycloak/commit/bac5ec8858c48e0139cda22c8ffc7720f2c0447c,Better caching for federated users Closes #35637  Signed-off-by: rmartinc <rmartinc@redhat.com>
apache,seatunnel,6205065b25ceeb96d1a1555c4ab774cce8e8bccf,https://github.com/apache/seatunnel/commit/6205065b25ceeb96d1a1555c4ab774cce8e8bccf,[Improve][Jdbc] Improve catalog connection cache (#8626)
soot-oss,soot,29b24b41b0a90db2dab176fb92b1690345f96d9d,https://github.com/soot-oss/soot/commit/29b24b41b0a90db2dab176fb92b1690345f96d9d,Optimize caching
opensolon,solon,edca91a62f2e93bb78edd6d8f3abc68cda55fa89,https://github.com/opensolon/solon/commit/edca91a62f2e93bb78edd6d8f3abc68cda55fa89,perf: 添加 AssistantMessage:getResultContent 获取没有推理标签的内容
crossoverJie,cim,da29184d50f4afe9af7da2c693a647b06d1b7e15,https://github.com/crossoverJie/cim/commit/da29184d50f4afe9af7da2c693a647b06d1b7e15,fit:  Remove the lock of the fetchOfflineMsgs method
sofastack,sofa-bolt,5c528805c1c24899c0c9e3573f231e499e221ca9,https://github.com/sofastack/sofa-bolt/commit/5c528805c1c24899c0c9e3573f231e499e221ca9,opt: replace Random with ThreadLocalRandom (#373)
lealone,Lealone,343fec12199e9b7587a01245cf9a0aedcb7b7735,https://github.com/lealone/Lealone/commit/343fec12199e9b7587a01245cf9a0aedcb7b7735,调度器执行一次是否需要yield的检测后调用一下wakeUp避免自己阻塞在select()操作中
netty,netty,93a3e638885c2e6b3fe87c5525ea2769fc4caf33,https://github.com/netty/netty/commit/93a3e638885c2e6b3fe87c5525ea2769fc4caf33,replace regexp in SslHandler with custom code (#15320)  Motivation:  Improves cold start  no need to keep static vatriable  Modification:  Regexp replaced with custom code.  Result:  One regexp less
dbeaver,dbeaver,10b9174e0b37f54f5ebfb25890b465ca1939489d,https://github.com/dbeaver/dbeaver/commit/10b9174e0b37f54f5ebfb25890b465ca1939489d,dbeaver/pro#4367 AI: Cache schema for custom objects (#37901)  Reset custom objects when the scope changes  Co-authored-by: kseniaguzeeva <112612526+kseniaguzeeva@users.noreply.github.com>
quarkusio,quarkus,a202b44807357505eb1e24b0ed5d8a1a2e225b54,https://github.com/quarkusio/quarkus/commit/a202b44807357505eb1e24b0ed5d8a1a2e225b54,Merge pull request #45526 from mkouba/list-all-current-ip  ArC: optimize "List all" injection points
opensourceBIM,BIMserver,10fe78a40dd7653df1e035589c6e5c9c80d7e63f,https://github.com/opensourceBIM/BIMserver/commit/10fe78a40dd7653df1e035589c6e5c9c80d7e63f,preliminary fix for #1342  remove redundant query code
apache,pdfbox,eebce4db5150f17d8fefb2e33bfb56288a8e9223,https://github.com/apache/pdfbox/commit/eebce4db5150f17d8fefb2e33bfb56288a8e9223,PDFBOX-5957: optimize  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1923835 13f79535-47bb-0310-9956-ffa450edef68
opentripplanner,OpenTripPlanner,dcd6526e3794ef6de21285a9bcc518a4a8e8f91b,https://github.com/opentripplanner/OpenTripPlanner/commit/dcd6526e3794ef6de21285a9bcc518a4a8e8f91b,Adapt area vertex linking better to area complexity  Very complex areas have many visibility points. Computation of visibility edge intersections with are edges therefore eventually becomes too slow. Now the linker creates less visibility edges when the area gets more complex. Closest visibility points are used for connections. Probablility that a random visibility points far away could be connected are low  so this is a fair heuristics to speed up linking.
trinodb,trino,5917549981f9e700d287f50d88dff919629877a7,https://github.com/trinodb/trino/commit/5917549981f9e700d287f50d88dff919629877a7,Use executor service for iceberg scan planning system tables
apache,paimon,b4ccb58c2551d4f9c89728f0bca619cfa16c0edb,https://github.com/apache/paimon/commit/b4ccb58c2551d4f9c89728f0bca619cfa16c0edb,[flink] Enable limit pushdown and count optimization for dv table (#4712)
ta4j,ta4j,e7f0f8f90f00942b1ad190a1e75c04e0a63d01b6,https://github.com/ta4j/ta4j/commit/e7f0f8f90f00942b1ad190a1e75c04e0a63d01b6,#1250 Use highest and lowest indicators as instance variables  - there is no need to create them each execution
chinabugotech,hutool,e65e006b245e5586629ca5ba3c5180f7bb2099e4,https://github.com/chinabugotech/hutool/commit/e65e006b245e5586629ca5ba3c5180f7bb2099e4,优化XXXToMapCopier的部分性能
thingsboard,thingsboard,41257b6138d706d545cfd7ad9cbf0f715cf27f1c,https://github.com/thingsboard/thingsboard/commit/41257b6138d706d545cfd7ad9cbf0f715cf27f1c,AI rule node: optimize bulk deletion by tenant ID; remove application events
immutables,immutables,a8aaaee510842c36ee038034f55e794dba57d883,https://github.com/immutables/immutables/commit/a8aaaee510842c36ee038034f55e794dba57d883,Optimize mergeInternal generation with specialized methods per subtype  Prior to this commit  our mergeInternal function that is created when a derived class is used as an Immutables target would check the possible types in a series of if blocks. However  this can lead to an explosion in the length of this method  especially for target classes with multiple parents. Long methods are concerning because it can exceed the JVM's default 8 KB limit for method compilation  forcing calls to remain interpreted.  Instead  generate specialized methods for each relevant subtype. This helps break up the monolithic mergeInternal method while not introducing too many method hops.  This approach  however  requires special handling of our bit masks  since we may have more than one long value to represent cases where the model has >64 fields. To deal with this  introduce a specialized case where we use a long[] of values  in order for each specialized method to easily update the overall state. This approach balances optimizing the simple case (<= 64 fields) for performance on small models  while allowing for larger models with only introducing a minimal amount of overhead in the allocation and access of the array values.
apache,hudi,d6c1272ee954496e4f3c91f2a428e430851beee8,https://github.com/apache/hudi/commit/d6c1272ee954496e4f3c91f2a428e430851beee8,[HUDI-9321] Fix unnecessary hoodie config conversion for ConfigUtils.getPayloadClass (#13167)  The construction of HoodieConfig is very costly  this would impact the regular read and also compaction.
trinodb,trino,9015414aa35824c0bb948836545311890138ad74,https://github.com/trinodb/trino/commit/9015414aa35824c0bb948836545311890138ad74,Cleanup InformationSchemaPageSource projection  Avoids unnecessary Integer boxing and Block[] allocations in InformationSchemaPageSource by using Page#getColumns.
vespa-engine,vespa,10a45c1b7d10dfd50587e9de428736293a40c9da,https://github.com/vespa-engine/vespa/commit/10a45c1b7d10dfd50587e9de428736293a40c9da,Use more threads for FileServer thread pool  Seeing requests stalling due to all threads being in use  for cases where nodes has few cores
ModelEngine-Group,fit-framework,6a09ad3dbe3b321b4dc5ce63a1efb6bd6586c2da,https://github.com/ModelEngine-Group/fit-framework/commit/6a09ad3dbe3b321b4dc5ce63a1efb6bd6586c2da,optimizes the performance of the HTTP client when transferring large JSON-formatted files (#181)
alibaba,fastjson2,a31ccc998cfaf2c4ad0f0a8bfb3da6c096e269c3,https://github.com/alibaba/fastjson2/commit/a31ccc998cfaf2c4ad0f0a8bfb3da6c096e269c3,optimize IOUtils
power721,alist-tvbox,c2130a28f62ddab0910d779a9e460c40853240c9,https://github.com/power721/alist-tvbox/commit/c2130a28f62ddab0910d779a9e460c40853240c9,优化Emby
helidon-io,helidon,90315f6072877eb65b8fc9afa3cb9494e953a550,https://github.com/helidon-io/helidon/commit/90315f6072877eb65b8fc9afa3cb9494e953a550,gRPC Improvements (#10147)  * Avoids some buffer copies when sending and receiving gRPC payloads. New config property to completely disable compression that can be useful for perf testing. * Sets the final CLOSED state for the stream to ensure it is properly removed from the collection of active streams for associated connection. * Report any socket exceptions (such as broken pipe) in log level TRACE not higher. * Ensures proper field synchronization if an RST stream frame is received at the HTTP/2 connection level. Improves some comments.
opentripplanner,OpenTripPlanner,50d5c2382a35743613036216fbb47134ff6d7aba,https://github.com/opentripplanner/OpenTripPlanner/commit/50d5c2382a35743613036216fbb47134ff6d7aba,Skip unnecessary test for checking if area boundary intersects the area.
pmd,pmd,2e03ef1d2b140058a47a8b5d9df0ffa359d32cd1,https://github.com/pmd/pmd/commit/2e03ef1d2b140058a47a8b5d9df0ffa359d32cd1,Reduce calls to getImage in java parser
trinodb,trino,d1fbb3aa2d051ddd1d55a733ad2aa03a1e15ed90,https://github.com/trinodb/trino/commit/d1fbb3aa2d051ddd1d55a733ad2aa03a1e15ed90,Remove redundant synchronization
langchain4j,langchain4j,770c77038ad00b3512e6997f043ea4c31003fe6b,https://github.com/langchain4j/langchain4j/commit/770c77038ad00b3512e6997f043ea4c31003fe6b,Rewrite the PgVectorEmbeddingStore search query to enable index (#2485)  Closes #2484  ## Change Now the query looks like this and it corresponds the pgvector documentation so it uses the index (not just seq scan) which will improve the performance for large tables.  ``` SELECT (embedding <=> '[...]') AS score  embedding_id  embedding  text FROM document_embeddings WHERE (embedding <=> '[...]') <= 0.5 ORDER BY embedding <=> '[...]' LIMIT 10; ```  And here is the execution plan: ``` Limit  (cost=411.07..412.29 rows=10 width=47) (actual time=5.074..5.183 rows=10 loops=1) ->  Index Scan using document_embeddings_ivfflat_index on document_embeddings  (cost=411.07..2014.16 rows=13180 width=47) (actual time=5.073..5.180 rows=10 loops=1) "        Order By: (embedding <=> '[...]'::vector)" "        Filter: ((embedding <=> '[...]'::vector) <= '0.5'::double precision)" Planning Time: 0.095 ms Execution Time: 5.225 ms ```  Note: I haven't added new tests since I didn't add or remove any functionality. This PR is just a search performance fix.  ## General checklist  - [x] There are no breaking changes - [ ] I have added unit and/or integration tests for my change - [ ] The tests cover both positive and negative cases - [x] I have manually run all the unit and integration tests in the module I have added/changed  and they are all green - [x] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules  and they are all green
YunaiV,ruoyi-vue-pro,04b8aa04222d6fbe516c657221b3532c4146c480,https://github.com/YunaiV/ruoyi-vue-pro/commit/04b8aa04222d6fbe516c657221b3532c4146c480,reactor：【AI 大模型】优化消息发送后，读取文档的逻辑，避免 N 次读取
BiglySoftware,BiglyBT,254ac64c5ebfbfc0e2ba0d67ec7e2430e3a59ef5,https://github.com/BiglySoftware/BiglyBT/commit/254ac64c5ebfbfc0e2ba0d67ec7e2430e3a59ef5,Improve performance of some tag columns
apache,pdfbox,90511b54784aa897f8d11a2c88e560e2218b5ebe,https://github.com/apache/pdfbox/commit/90511b54784aa897f8d11a2c88e560e2218b5ebe,PDFBOX-5660: remove streaming that isn't needed  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1924071 13f79535-47bb-0310-9956-ffa450edef68
apache,iotdb,56158b46eab7788770ce4c0387d472ac8cbfe5d1,https://github.com/apache/iotdb/commit/56158b46eab7788770ce4c0387d472ac8cbfe5d1,perf: Optimize the code structure and add comments for CaseWhen
apache,iotdb,7ba971748598654a82c401e0a4aafa94afc70581,https://github.com/apache/iotdb/commit/7ba971748598654a82c401e0a4aafa94afc70581,Optimize partition cache getRegionReplicaSet interface performance by batching (#15396)  * finish  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * enhance  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * fix  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * fix ci  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * fix new arrayList redundantly  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * fix new arrayList redundantly  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  * refine code  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>  ---------  Signed-off-by: OneSizeFitQuorum <tanxinyu@apache.org>
thingsboard,thingsboard,5f793b11f91d097187565810a63ac1856672e0b4,https://github.com/thingsboard/thingsboard/commit/5f793b11f91d097187565810a63ac1856672e0b4,BaseTelemetryProcessor - use async instead of .get()
Graylog2,graylog2-server,defe54098d47f496472228a8cc65940d96d8ca66,https://github.com/Graylog2/graylog2-server/commit/defe54098d47f496472228a8cc65940d96d8ca66,Fix rule fragment loading in rule builder (#22645)  * update rule fragments in RuleBuilderRegistry on cluster event when they are changed via the service  cache these and reload only on change  * cl  * rename local freemarker configuration variable  * move event bus post after db action
locationtech,jts,47b52bd0236df3d8fad99360da9341be26255889,https://github.com/locationtech/jts/commit/47b52bd0236df3d8fad99360da9341be26255889,Add GeometryCollection dimension cache (#1103)
apache,iotdb,02febc0506e2d319f2a2684af88571300ca92085,https://github.com/apache/iotdb/commit/02febc0506e2d319f2a2684af88571300ca92085,Optimize group by query in ClientRPCServiceImpl to reduce cpu usage
apache,flink,49d0a759ada228c2be87a57b063f62db2e6aa0d6,https://github.com/apache/flink/commit/49d0a759ada228c2be87a57b063f62db2e6aa0d6,[FLINK-36607][table-planner] Introduce AdaptiveJoinProcessor to inject adaptive join node.
quarkusio,quarkus,48e9b9c66a3ecf8c6964fb27896eca217fb260e4,https://github.com/quarkusio/quarkus/commit/48e9b9c66a3ecf8c6964fb27896eca217fb260e4,Merge pull request #48037 from brunobat/micrometer-optimizations-1  Remove regex from hot path in micrometer
keycloak,keycloak,c8078fa2afe635655c07d36fae6cdc895d27c88d,https://github.com/keycloak/keycloak/commit/c8078fa2afe635655c07d36fae6cdc895d27c88d,Optimize meter generation  Closes #35834  Signed-off-by: Alexander Schwartz <aschwart@redhat.com> Signed-off-by: Alexander Schwartz <alexander.schwartz@gmx.net> Co-authored-by: Pedro Ruivo <pruivo@users.noreply.github.com>
quarkusio,quarkus,3fdca802cc5a95725fc915272aadbefe949163a8,https://github.com/quarkusio/quarkus/commit/3fdca802cc5a95725fc915272aadbefe949163a8,Use empty default values when building no-op CP instance  This is done in order to avoid the overhead of looking up properties that won't be used anyway  Requires: https://github.com/smallrye/smallrye-context-propagation/pull/477 Signed-off-by: Georgios Andrianakis <geoand@gmail.com>
netty,netty,31db3f3a3ddc5c32eb26ebff77b93c98cf458369,https://github.com/netty/netty/commit/31db3f3a3ddc5c32eb26ebff77b93c98cf458369,IoUring: Make ringHead visible to the kernel once all completions are… (#14864)  … processed  Motivation:  It's good enough to only make the ringHead visible to the kernel once all compleions are processed. This is cheaper then do it after each completion.  Modifications:  - Move call of putIntOrdered at the end of the loop.  Result:  Cheaper processing of the completion queue
theonedev,onedev,9061c773468bb78bd18f184e7669e865bf62852e,https://github.com/theonedev/onedev/commit/9061c773468bb78bd18f184e7669e865bf62852e,chore: More performance improvements
apache,hudi,eb39b2a696864e1e152c1d6ef1878b17ea9133fc,https://github.com/apache/hudi/commit/eb39b2a696864e1e152c1d6ef1878b17ea9133fc,[MINOR] Avoid scanning raw timeline on archival if no instants to archive (#12482)
apache,guacamole-client,8aec82fd855e0769b8db98d17156fe1eb3cd4fd5,https://github.com/apache/guacamole-client/commit/8aec82fd855e0769b8db98d17156fe1eb3cd4fd5,GUACAMOLE-2036: Merge changes to reuse buffers received by parser when converting instructions back to character arrays.
apache,pulsar,bb2e4ab897e3827f8869cef349bdfbe092531fec,https://github.com/apache/pulsar/commit/bb2e4ab897e3827f8869cef349bdfbe092531fec,[improve][broker]Improve the feature "Optimize subscription seek (cursor reset) by timestamp": search less entries (#24219)
apache,ignite,ae9f6396de5caf1f769e484797282e6102118598,https://github.com/apache/ignite/commit/ae9f6396de5caf1f769e484797282e6102118598,IGNITE-25039 Fix suboptimal expire shift calculation (#11984)
tencentmusic,supersonic,d1e5e8777aa1e8e29248d70ad415016a84c97428,https://github.com/tencentmusic/supersonic/commit/d1e5e8777aa1e8e29248d70ad415016a84c97428,(improvement)(chat)Try to find all fields in the same model to avoid unnecessary join.
vespa-engine,vespa,e1aef46e0490d4bdbd559335b2881018e13d950c,https://github.com/vespa-engine/vespa/commit/e1aef46e0490d4bdbd559335b2881018e13d950c,Use preserialized JSON field name strings for Document V1 output  Avoids having to do the same UTF-8 encoding/character escaping work over and over for every static field name string written.
questdb,questdb,191c282b66a49c1811b2443782d5cae242785c40,https://github.com/questdb/questdb/commit/191c282b66a49c1811b2443782d5cae242785c40,fix(core): fix startup delay on instances with lots of data (#5399)  Co-authored-by: glasstiger <imre@questdb.io>
apache,hudi,9dd5358c4193c3480d7b95f6e4961566a0706238,https://github.com/apache/hudi/commit/9dd5358c4193c3480d7b95f6e4961566a0706238,[HUDI-9365] Reduce overhead of Hive and AWS Glue sync tools (#13249)
apache,paimon,f2cae5d5c312f78f73029dd7359b05a6324de48e,https://github.com/apache/paimon/commit/f2cae5d5c312f78f73029dd7359b05a6324de48e,[core] Reduce useless getFileStatus for Parquet Reader (#5217)
datastax,jvector,e4181620479c542d8afb69d59c1d4cbcb1252f2d,https://github.com/datastax/jvector/commit/e4181620479c542d8afb69d59c1d4cbcb1252f2d,Find insertion point before performing copy in ConcurrentNeighborMap (#468)  Find insertion point before performing copy in ConcurrentNeighborMap
netty,netty,5880f3662a77600d19ea37d6278c43c65c45d351,https://github.com/netty/netty/commit/5880f3662a77600d19ea37d6278c43c65c45d351,MqttEncoder: unroll getVariableLengthInt and move duplicated condition into variable (#15208)  Motivation: getVariableLengthInt(..) can be improved.  Modifications: - Unroll `getVariableLengthInt` loop  should be ~2 faster - Moved duplicated condition into a boolean variable  Result:  Cleanup and faster.
apache,pinot,3d4905ac8ef48aa9043d0166506a2ea6776d5505,https://github.com/apache/pinot/commit/3d4905ac8ef48aa9043d0166506a2ea6776d5505,Reduce reflection overhead of ByteBufferUtil::newDirectByteBuffer (#15878)
GIScience,openrouteservice,b4868ce67badbb8c824d5a0ad6944b5eea637ad9,https://github.com/GIScience/openrouteservice/commit/b4868ce67badbb8c824d5a0ad6944b5eea637ad9,fix: Use pooling http client to avoid port overload
google,google-java-format,86338266807cb8d78082179733b31a8fd0be972c,https://github.com/google/google-java-format/commit/86338266807cb8d78082179733b31a8fd0be972c,Optimize string wrapping  PiperOrigin-RevId: 744065507
soot-oss,soot,8d201bb94d0d23513d82806137489a4cbd0edcdf,https://github.com/soot-oss/soot/commit/8d201bb94d0d23513d82806137489a4cbd0edcdf,Merge pull request #2138 from MarcMil/mdev  Fix the ConstantValueToInitializerTransformer & Performance optimizations for type resolver
jar-analyzer,jar-analyzer,cb02e18f79efaf2978af75fc9d3511b7eabb2e4b,https://github.com/jar-analyzer/jar-analyzer/commit/cb02e18f79efaf2978af75fc9d3511b7eabb2e4b,[重要] 自定义表达式搜索功能代码重构和性能提升 @4ra1n
opensolon,solon,bd359d03f6fc50a9505537ebc7d4c0f3477b4e99,https://github.com/opensolon/solon/commit/bd359d03f6fc50a9505537ebc7d4c0f3477b4e99,优化 solon-expression 属性访问，改为 MethodHandle
redisson,redisson,f7abfc5d6023625de8b0f5dffbfbd95e0b16366b,https://github.com/redisson/redisson/commit/f7abfc5d6023625de8b0f5dffbfbd95e0b16366b,Merge pull request #6601 from seakider/fix_sentinel_update_salves  Fixed - New connection opened for each write operation after master h…
apache,pinot,64dc9226e8cde8b8c76531b45ab024a5c5333fa3,https://github.com/apache/pinot/commit/64dc9226e8cde8b8c76531b45ab024a5c5333fa3, Speed up BinaryOperatorTransformFunction evaluation to use PredicateEvaluator (#14619)
graphhopper,jsprit,138422af3bb67a2dcac98aff0dec4986258b340e,https://github.com/graphhopper/jsprit/commit/138422af3bb67a2dcac98aff0dec4986258b340e,optimize
apache,hudi,129c0da70c2d68b3c95ba093182222f0c24645dc,https://github.com/apache/hudi/commit/129c0da70c2d68b3c95ba093182222f0c24645dc,[HUDI-9437] Improve Flink Clustering Performance Using Row Reader (#13344)
flowable,flowable-engine,ed519f11e762deac26bfc014a86c44260ed39d11,https://github.com/flowable/flowable-engine/commit/ed519f11e762deac26bfc014a86c44260ed39d11,Use dedicated linked list for storing the EvaluateCriteriaOperation  The EvaluateCriteriaOperation(s) are special types of operations that should be executed only after the regular operations are executed. The previous implementation was iterating the operations to find the first EvaluateCriteriaOperation and insert the regular operation before that one. However  when there are a lot of operations iterating the list is costly. Therefore  using a different list avoids the costly iterations
201206030,novel-plus,8c572edb101fef1a999cacd5fd0f0b67dedabe49,https://github.com/201206030/novel-plus/commit/8c572edb101fef1a999cacd5fd0f0b67dedabe49,perf(novel-crawl): 优化单本采集任务进度显示功能
opensolon,solon,2eef0f7338f08631353749365648ecd8ad6ea363,https://github.com/opensolon/solon/commit/2eef0f7338f08631353749365648ecd8ad6ea363,优化 solon-mvc Action 返回为 void，不作渲染处理
trinodb,trino,2e743037b07a7d55807842d0d683ec4bca1622ed,https://github.com/trinodb/trino/commit/2e743037b07a7d55807842d0d683ec4bca1622ed,Map blocks by source page channel once per page
quarkusio,quarkus,c47714d7f1c55acd3b54fe02bec2bfd3a3d75d48,https://github.com/quarkusio/quarkus/commit/c47714d7f1c55acd3b54fe02bec2bfd3a3d75d48,Introduce EngineBuilder#enableTracing()  If disabled then Engine#getTraceManager() returns null. The idea is to keep the runtime overhead of tracing minimal in case of debugging is not used  i.e. in production mode.
quarkusio,quarkus,4abf51f3d3c8784456600db4fb584f64b9c26b25,https://github.com/quarkusio/quarkus/commit/4abf51f3d3c8784456600db4fb584f64b9c26b25,Merge pull request #45225 from geoand/quarkusentrypoint.doRun  Use MethodHandle to invoke the application's main class
apache,camel,65123ab6ccd5b62c69edb81aff52bb2b3c54245f,https://github.com/apache/camel/commit/65123ab6ccd5b62c69edb81aff52bb2b3c54245f,CAMEL-21845: camel-sql - Improve performance of batch inserts (#17390)  * CAMEL-21845: camel-sql - Improve performance of batch inserts
quarkusio,quarkus,73e1d2eee2d712a3ecabfb4051cdd64b0778a48d,https://github.com/quarkusio/quarkus/commit/73e1d2eee2d712a3ecabfb4051cdd64b0778a48d,Merge pull request #47774 from brunobat/otel-optimizations-1  Otel optimizations I
camunda,camunda,f7bd11723686d3564da6591f0d3ad024caf7d5b9,https://github.com/camunda/camunda/commit/f7bd11723686d3564da6591f0d3ad024caf7d5b9,perf: avoid immediate copy of returned values
prestodb,presto,f4f1934b5f248d7931146d8d312fc7ddccca8e1d,https://github.com/prestodb/presto/commit/f4f1934b5f248d7931146d8d312fc7ddccca8e1d,Add function metadata ability to push down struct argument in optimizer (#25175)  Summary: For some user defined functions  the pushdown subfield optimizer should transparently pass down utilized subfields of a struct type. The goal is to make the query plan look the same as if the udf was not being called on the struct. In order to accomplish this  the user defined function needs to take the struct argument passed into it  and unwrap it when converting an expression to a subfield.  Since there is no guarantee that the struct argument is always the first argument in the udf  the udf needs to specify which argument index to push down in its metadata.  T224244100  Presto version 0.293-20250525.210422-369  Differential Revision: D74738214   Test plan: With this change  both of the queries below produce the same query plan after the table scan node rewrite ``` explain with shaped as (SELECT fb_reshape_row(person CAST(NULL AS ROW(age INTEGER  city VARCHAR))) AS pcol FROM tangk_struct_table)  raw as (select person as pcol from tangk_struct_table) select pcol.age from raw; ```  ``` explain with shaped as (SELECT fb_reshape_row(person CAST(NULL AS ROW(age INTEGER  city VARCHAR))) AS pcol FROM tangk_struct_table)  raw as (select person as pcol from tangk_struct_table) select pcol.age from shaped;  ```  20250525_235045_00003_tu7a9 correct query plan with pushed down subfield ``` Fragment 0 [SINGLE] CPU: 0.00ns  Scheduled: 0.00ns  Input: 0 rows (0B); per task: avg.: 0.00 std.dev.: 0.00  Output: 0 rows (0B)  1 tasks Output layout: [field] Output partitioning: SINGLE [] Output encoding: COLUMNAR Stage Execution Strategy: UNGROUPED_EXECUTION - Output[PlanNodeId 6][Query Plan] => [field:varchar(807)] Query Plan := field - Values[PlanNodeId 0] => [field:varchar(807)] (VARCHAR'- Output[PlanNodeId 10][age] => [expr_3:integer] age := expr_3 (3:8) - RemoteStreamingExchange[PlanNodeId 218][GATHER - COLUMNAR] => [expr_3:integer] - ScanProject[PlanNodeId 0 6][table = TableHandle {connectorId=''prism''  connectorHandle=''PrismTableHandle{schemaName=di  tableName=tangk_struct_table  analyzePartitionValues=Optional.empty  sideTableFeatureIds=[]}''  layout=''Optional[di.tangk_struct_table{}]''}  projectLocality = LOCAL] => [expr_3:integer] expr_3 := DEREFERENCE(fb_reshape_row(person  null)  INTEGER''0'') (1:114) LAYOUT: di.tangk_struct_table{} person := person:struct<age:int city:string>:0:REGULAR:[person.age] (1:113) id:bigint:-13:PARTITION_KEY :: [["1"]  ["2"]  ["3"]  ["4"]  ["5"]] ')  ```   20250525_235408_00004_tu7a9 query plan with non relevant function ``` Fragment 0 [SINGLE] CPU: 0.00ns  Scheduled: 0.00ns  Input: 0 rows (0B); per task: avg.: 0.00 std.dev.: 0.00  Output: 0 rows (0B)  1 tasks Output layout: [field] Output partitioning: SINGLE [] Output encoding: COLUMNAR Stage Execution Strategy: UNGROUPED_EXECUTION - Output[PlanNodeId 6][Query Plan] => [field:varchar(798)] Query Plan := field - Values[PlanNodeId 0] => [field:varchar(798)] (VARCHAR'- Output[PlanNodeId 10][age] => [expr_3:integer] age := expr_3 (3:8) - RemoteStreamingExchange[PlanNodeId 218][GATHER - COLUMNAR] => [expr_3:integer] - ScanProject[PlanNodeId 0 6][table = TableHandle {connectorId=''prism''  connectorHandle=''PrismTableHandle{schemaName=di  tableName=tangk_struct_table  analyzePartitionValues=Optional.empty  sideTableFeatureIds=[]}''  layout=''Optional[di.tangk_struct_table{}]''}  projectLocality = LOCAL] => [expr_3:integer] expr_3 := DEREFERENCE(fb_reshape_row_old(person  null)  INTEGER''0'') (1:118) LAYOUT: di.tangk_struct_table{} person := person:struct<age:int city:string>:0:REGULAR (1:117) id:bigint:-13:PARTITION_KEY :: [["1"]  ["2"]  ["3"]  ["4"]  ["5"]] ') ```   20250525_235845_00005_tu7a9 expected plan ``` Fragment 0 [SINGLE] CPU: 0.00ns  Scheduled: 0.00ns  Input: 0 rows (0B); per task: avg.: 0.00 std.dev.: 0.00  Output: 0 rows (0B)  1 tasks Output layout: [field] Output partitioning: SINGLE [] Output encoding: COLUMNAR Stage Execution Strategy: UNGROUPED_EXECUTION - Output[PlanNodeId 6][Query Plan] => [field:varchar(783)] Query Plan := field - Values[PlanNodeId 0] => [field:varchar(783)] (VARCHAR'- Output[PlanNodeId 10][age] => [expr_4:integer] age := expr_4 (3:8) - RemoteStreamingExchange[PlanNodeId 211][GATHER - COLUMNAR] => [expr_4:integer] - ScanProject[PlanNodeId 0 6][table = TableHandle {connectorId=''prism''  connectorHandle=''PrismTableHandle{schemaName=di  tableName=tangk_struct_table  analyzePartitionValues=Optional.empty  sideTableFeatureIds=[]}''  layout=''Optional[di.tangk_struct_table{}]''}  projectLocality = LOCAL] => [expr_4:integer] expr_4 := DEREFERENCE(person  INTEGER''0'') (2:17) LAYOUT: di.tangk_struct_table{} person := person:struct<age:int city:string>:0:REGULAR:[person.age] (2:36) id:bigint:-13:PARTITION_KEY :: [["1"]  ["2"]  ["3"]  ["4"]  ["5"]] ')   ```  Verifier suite build: 20250521_205359_71488_cm4iz ``` pt suite build --predicate "lower(query) like '%fb_reshape_row%'" --suite atn_fb_reshape_row_subfields_udf --region atn --days 100 ```  UDF only  https://www.internalfb.com/intern/presto/verifier/results/?test_id=223902 General  https://our.intern.facebook.com/intern/presto/verifier/results/?test_id=223903   ## Release Notes Please follow [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines) and fill in the release notes below.  ``` == RELEASE NOTES ==  General Changes * Add pushdownSubfieldArgIndex parameter to @ScalarFunction and @CodegenScalarFunction annotation for subfield optimization during query planning
debezium,debezium,1f5ddd8fb96f293b882029ed0e753832a6521870,https://github.com/debezium/debezium/commit/1f5ddd8fb96f293b882029ed0e753832a6521870,DBZ-9091: Optimize JdbcConnection#createPatternFromName()
alibaba,spring-ai-alibaba,648f8d3009bf0282ce4155268cd52e967efdd8a2,https://github.com/alibaba/spring-ai-alibaba/commit/648f8d3009bf0282ce4155268cd52e967efdd8a2,reduce redundant getProperty calls to improve performance.
apache,guacamole-client,a672229dada96f8036aa6f2443f53b718528cc72,https://github.com/apache/guacamole-client/commit/a672229dada96f8036aa6f2443f53b718528cc72,GUACAMOLE-2036: Reuse buffers received by parser when converting instructions back to character arrays.
iterate-ch,cyberduck,0aec62b55bb0fa3fd1fc4b338156a5229c36a1b6,https://github.com/iterate-ch/cyberduck/commit/0aec62b55bb0fa3fd1fc4b338156a5229c36a1b6,Lazy initialize DiskSharePool.
apache,ignite,e29db88717c5c1207d6ab9c33d8716649be7d531,https://github.com/apache/ignite/commit/e29db88717c5c1207d6ab9c33d8716649be7d531,IGNITE-14964 SQL Calcite: Optimize IN statement with literals - Fixes #11873.  Signed-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>
apache,flink,df021354008135292c7c04785396cb0f0b0870ac,https://github.com/apache/flink/commit/df021354008135292c7c04785396cb0f0b0870ac,[FLINK-36629][table-planner] Introduce the AdaptiveSkewedJoinOptimizationStrategy
netty,netty,4bbe6f71d0d0bbf514b281d920aed276b5156919,https://github.com/netty/netty/commit/4bbe6f71d0d0bbf514b281d920aed276b5156919,Optimize capacity bumping for adaptive ByteBufs (#15080)  Motivation: It is quite common in downstream code to not specify a buffer size when allocating. People instead rely on the ByteBuf ability to increase its size automatically. The ByteBufs allocated by the adaptive allocator also support this  but has thus far required a round-trip through the allocator every time. In contrast  the pooled allocator is reserving the chunk run-size when allocating buffers  and very cheaply allow smaller buffers to bump up to the run-size limit. This is an important performance optimisation in practice. We can do something similar in the adaptive allocator  because we keep statistics about the buffer sizes that we allocate.  Modification: The adaptive allocator now reserves space equal to the 99-percentile buffer size (though with some reasonable heuristic limits for smaller buffers)  when allocating buffers  and allow its ByteBufs to cheaply bump their capacities up to this limit. We already compute this percentile during histogram rotation  so it is simply a matter of storing this value in the magazine  and then using it when reserving space out of chunks.  The collection of buffer size statistics is now also delayed and moved to when the `ByteBuf` instances are reused. This way  we collect statistics about the _final_ buffer size  rather than the requested sizes or the sizes of capacity bumps. This prevents oscillations that would otherwise be caused by undersized buffers producing a lot of statistics as they resize to their final size  and then no statistics being produced for the final buffer sizes if they are correctly predicted at allocation time.  Result: Calls like `ByteBuf.ensureWritable()` will now on average be much cheaper when using the adaptive allocator.  Based on https://github.com/netty/netty/pull/15062
apache,iotdb,bdf36ba1907ac663f744221d54132ab079632799,https://github.com/apache/iotdb/commit/bdf36ba1907ac663f744221d54132ab079632799,Skip subquery plan if subqueryExpression List is empty for efficiency (#14647)
vespa-engine,vespa,a3ac9db6f08d2af928052264b3ac88ec8d6b79e1,https://github.com/vespa-engine/vespa/commit/a3ac9db6f08d2af928052264b3ac88ec8d6b79e1,Only enable request/connection logging handlers if enabled
apache,dubbo,c8a8946f89ef7f1d3bb9725f754465c6bb675834,https://github.com/apache/dubbo/commit/c8a8946f89ef7f1d3bb9725f754465c6bb675834,Fix the issue of high CPU load caused by continuously creating new ConsistentHashSelector instances under high concurrency (#15497)
signalapp,Signal-Server,51569ce0a572daa464ae0e32bb896b653050786b,https://github.com/signalapp/Signal-Server/commit/51569ce0a572daa464ae0e32bb896b653050786b,Use cached partition topology for metrics/logs
quarkusio,quarkus,f3068af826302c989853aa0ff708c0a761771497,https://github.com/quarkusio/quarkus/commit/f3068af826302c989853aa0ff708c0a761771497,Merge pull request #46284 from Postremus/issues/45631-filter-resource-getmethod-slow  Only check filters once for calls to getResourceMethod
opentripplanner,OpenTripPlanner,37fcc57ca9c89cf91dc133c27805439a81c168dc,https://github.com/opentripplanner/OpenTripPlanner/commit/37fcc57ca9c89cf91dc133c27805439a81c168dc,Skip collapsed edges early
apache,iotdb,b5b7b70f6be17186c85039b2304f0b9f5845c338,https://github.com/apache/iotdb/commit/b5b7b70f6be17186c85039b2304f0b9f5845c338,Implemented fast last query for tree model with prefix path (#15678)  * Fast last query on local  * Remove debug settings 2  * Bug fix  * Update SessionExample.java  * Update SessionConnection.java  * Fix  * logger  * Update DualKeyCacheImpl.java  * Update DualKeyCacheImpl.java
alibaba,spring-ai-alibaba,370bd723e22b03ad660ec15ff933e52802fe28fd,https://github.com/alibaba/spring-ai-alibaba/commit/370bd723e22b03ad660ec15ff933e52802fe28fd,fix(jManus):Improve interactive element retrieval speed (#1112)  Co-authored-by: aias00 <liuhongyu@apache.org>
Konloch,bytecode-viewer,8708506782274aa885f1e73a49df4e3db3340cf0,https://github.com/Konloch/bytecode-viewer/commit/8708506782274aa885f1e73a49df4e3db3340cf0,Merge pull request #536 from oraveczandrew/resources  resources load optimization
camunda,camunda,46eacec34f4f67e8bff0250dc7054418178f8cdf,https://github.com/camunda/camunda/commit/46eacec34f4f67e8bff0250dc7054418178f8cdf,fix: batch query for deleted process instances check
apache,zookeeper,c0e92411fbb38025d4cd257835cf5e4afeea4956,https://github.com/apache/zookeeper/commit/c0e92411fbb38025d4cd257835cf5e4afeea4956,ZOOKEEPER-4858: Remove the lock contention between snapshotting and the sync operation  Reviewers: anmolnar  kezhuw Author: li4wang Closes #2185 from li4wang/ZOOKEEPER-4858
alibaba,fastjson2,ea99a7bee2d29bb850ede1c64a5ab93a31249e78,https://github.com/alibaba/fastjson2/commit/ea99a7bee2d29bb850ede1c64a5ab93a31249e78,optimize read csv
apache,hbase,78f01019ad54bd40cbdf5f3fac11bc4a40f0f9ae,https://github.com/apache/hbase/commit/78f01019ad54bd40cbdf5f3fac11bc4a40f0f9ae,HBASE-29134 Optimize bulkload backup process for incremental backups (#6706)  Signed-off-by: Ray Mattingly <rmattingly@apache.org>
theonedev,onedev,b46dfb8637a3cefeefdde11ebad0cfd1f2b02553,https://github.com/theonedev/onedev/commit/b46dfb8637a3cefeefdde11ebad0cfd1f2b02553,feat: Improve startup speed when there are many projects (OD-2509)
spring-projects,spring-data-redis,06ad21b23b5f5187b75aa7565802ce4a43de7f52,https://github.com/spring-projects/spring-data-redis/commit/06ad21b23b5f5187b75aa7565802ce4a43de7f52,Skip metadata lookup for top-level collections in MappingRedisConverter.  Closes: #2168 Original Pull Request: #3146  Signed-off-by: dlguddn3024 <dlguddn3024@gmail.com>
camunda,camunda,578b75ac8bf8c625fadbf2999449b6b63730906b,https://github.com/camunda/camunda/commit/578b75ac8bf8c625fadbf2999449b6b63730906b,feat: use batchOperationCache to only process records relevant to referenced batchOperation #33936
apache,seatunnel,90e88cafc57e9d129f334e6f579c02d9bfc8b998,https://github.com/apache/seatunnel/commit/90e88cafc57e9d129f334e6f579c02d9bfc8b998,[Improve][Oracle-CDC] Remove duplicate load table names (#9357)
apache,rocketmq-spring,80700a2a3e5d91bea56f00078554394b19d30244,https://github.com/apache/rocketmq-spring/commit/80700a2a3e5d91bea56f00078554394b19d30244,[ISSUE #733] Fix the issue that ClientServiceProvider is initialized every time a message is sent (#732)
quarkusio,quarkus,cd9d9f0604458058c26998151812a1a54cd49ed3,https://github.com/quarkusio/quarkus/commit/cd9d9f0604458058c26998151812a1a54cd49ed3,Merge pull request #45356 from geoand/arc-micro-opt  Use empty Set when no annotation present in injection point
quarkusio,quarkus,974851eb4a5003745e642882804516f03b297d58,https://github.com/quarkusio/quarkus/commit/974851eb4a5003745e642882804516f03b297d58,Merge pull request #46950 from franz1981/46949  Save using stream(s) to retrieve Http Headers
quarkusio,quarkus,9cd2b132cec1637d0dae7cbe60fe74f90ff5d07b,https://github.com/quarkusio/quarkus/commit/9cd2b132cec1637d0dae7cbe60fe74f90ff5d07b,Use an HashSet contract for DropTargetsSamplerTest  It's a detail but it's the contract we want and matching will be faster.
thingsboard,thingsboard,6314cb7ee545cf2164fa6cdbb359accc9e9c3eeb,https://github.com/thingsboard/thingsboard/commit/6314cb7ee545cf2164fa6cdbb359accc9e9c3eeb,Merge pull request #13510 from irynamatveieva/performance  Calculated fields performance improvements
apache,hudi,ec044790fe71f04710472ad63e7859f1b29e3985,https://github.com/apache/hudi/commit/ec044790fe71f04710472ad63e7859f1b29e3985,[HUDI-8442] Reduce timeline loads while rolling back failed writes (#12164)
apache,pdfbox,4d95e036f5254dd0021bde5baf6bf1e607b8a610,https://github.com/apache/pdfbox/commit/4d95e036f5254dd0021bde5baf6bf1e607b8a610,PDFBOX-5902: cache CMap-string-mappings to avoid multiple instances of the very same string  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1922530 13f79535-47bb-0310-9956-ffa450edef68
checkstyle,checkstyle,7ba2c5d48cee7e551efeb657a8451148ed771e10,https://github.com/checkstyle/checkstyle/commit/7ba2c5d48cee7e551efeb657a8451148ed771e10,Issue #15821: remove usage of synchronized block
opentripplanner,OpenTripPlanner,27fda993f99fa8640f8a19858447d6ef26d88b8d,https://github.com/opentripplanner/OpenTripPlanner/commit/27fda993f99fa8640f8a19858447d6ef26d88b8d,Accept lower visibility node count
dromara,RuoYi-Vue-Plus,3f9919fbeea0e3424ad9d6037c292ac1ad170339,https://github.com/dromara/RuoYi-Vue-Plus/commit/3f9919fbeea0e3424ad9d6037c292ac1ad170339,update 优化 Redis缓存监控接口 手动归还连接给连接池 提高效率
apache,flink,8b6a608490322d7eb1056120824809c2455950c3,https://github.com/apache/flink/commit/8b6a608490322d7eb1056120824809c2455950c3,[FLINK-37218][network] Avoid repeatedly reading the broadcast buffer from the sort-merge shuffle data file while accumulating small buffers from multiple sub-partitions.
aws,aws-sdk-java-v2,5f2af7768e7fcbbb9be259c1718203080147bfdc,https://github.com/aws/aws-sdk-java-v2/commit/5f2af7768e7fcbbb9be259c1718203080147bfdc,Validate sent body len  remove buffering  This commit removes the buffering of `RequestBody.fromContentProvider(ContentStreamProvider long String)`  which was used to ensure that the provider always provided the expected number of bytes given by `length`.  Instead of doing the buffering  this commit updates `SdkLengthAwareInputstream` to validate the number of bytes read is correct  and throws an error if EOF is reached prematurely. We use this stream to ensure that we sent the correct amount of bytes to the server when sending the HTTP request.  Note that this a weaker check because we're only testing for the *number* of bytes sent rather than their contents but has the benefit of sidestepping buffering.
PBH-BTN,PeerBanHelper,6d95dce9e9535a0ec81bae3854b63f4cc58c2788,https://github.com/PBH-BTN/PeerBanHelper/commit/6d95dce9e9535a0ec81bae3854b63f4cc58c2788,添加后台任务，定时执行 SQLite 的优化 SQL
alibaba,fastjson2,9101e8c2a2d69683b1a7cfb5c87bf23fabccdfba,https://github.com/alibaba/fastjson2/commit/9101e8c2a2d69683b1a7cfb5c87bf23fabccdfba,optimize for parse non-slash ascii
netty,netty,1b19e4f7d85b499ea63054eea2d2171e0318c3fd,https://github.com/netty/netty/commit/1b19e4f7d85b499ea63054eea2d2171e0318c3fd,IoUring: Use IORING_ACCEPT_POLL_FIRST instead of IORING_RECVSEND_POLL… (#14669)  …_FIRST for accept  Motivation:  When doing accepts we need to use IORING_ACCEPT_POLL_FIRST  but used IORING_RECVSEND_POLL_FIRST before. See https://github.com/axboe/liburing/wiki/What's-new-with-io_uring-in-6.10#improvements-for-accept  Modifications:  Replace IORING_RECVSEND_POLL_FIRST by IORING_ACCEPT_POLL_FIRST for accepts.  Result:  Use correct hint when doing accepts
apache,hudi,59373c7af3a17f256f23410656431a1293bbe9ac,https://github.com/apache/hudi/commit/59373c7af3a17f256f23410656431a1293bbe9ac,[HUDI-9479] Improve perf for getOrderingValue of timestamp type for flink FileGroup reader (#13378)
camunda,camunda,f03b03db679f39071b47e2f66aa44c8ea08d1dbe,https://github.com/camunda/camunda/commit/f03b03db679f39071b47e2f66aa44c8ea08d1dbe,feat: preallocate an empty DeploymentRecord used for triggering new commands
opensolon,solon,79f6cde98e87346832603a42ed59374a1dadc285,https://github.com/opensolon/solon/commit/79f6cde98e87346832603a42ed59374a1dadc285,优化 solon-expression 完成方法调用性能
apache,hive,e9daabad2050c318ea536cf73f2bb93c8a80a2d6,https://github.com/apache/hive/commit/e9daabad2050c318ea536cf73f2bb93c8a80a2d6,HIVE-28956 : Use RawStore#alterPartitions API and implement batching for alter table add column cascade command (#5814)
ClickHouse,clickhouse-java,f085ddd86db643b8a400364ae1789e4011369046,https://github.com/ClickHouse/clickhouse-java/commit/f085ddd86db643b8a400364ae1789e4011369046,Merge pull request #2090 from ClickHouse/v2_reduce_init_time  [client-v2] Reduce client init time
hazelcast,hazelcast,8ca36349f45bb169562d6797bdcb57cfcf26616a,https://github.com/hazelcast/hazelcast/commit/8ca36349f45bb169562d6797bdcb57cfcf26616a,Improve Metrics performance by replacing `AtomicLongFieldUpdater#lazySet` with `VarHandle#setOpaque` (#4074)  In https://github.com/hazelcast/hazelcast/pull/24620 we updated `SwCounter` to use `VarHandle#setOpaque` instead of `AtomicLongFieldUpdater#lazySet`.  We can apply this same change to other metrics  too.  This (micro-optimisation) shows a ~75% improvement in [benchmarks](https://github.com/hazelcast/internal-benchmarks/pull/56): | Method                              	| ns/op 	| |-------------------------------------	|-------	| | `AtomicIntegerFieldUpdater#lazySet` 	| 0.61 	| | `VarHandle#setOpaque`               	| 0.35	|  GitOrigin-RevId: d7538028b203110a3b98d102321b870332cf7b3e
apache,atlas,ebf4253c5973e0a76fe4ccfd9601905a20c79b6b,https://github.com/apache/atlas/commit/ebf4253c5973e0a76fe4ccfd9601905a20c79b6b,ATLAS-5061: Fix delay in startup by making the import startup asynchronous (#390)
Activiti,Activiti,e60704f13e645bb2c817a3510b1bb155f9b628d0,https://github.com/Activiti/Activiti/commit/e60704f13e645bb2c817a3510b1bb155f9b628d0,AAE-33103 Fix ignored pagination in process definition search endpoint (#4965)
alibaba,fastjson2,9d3a6168cf59a550f154a2249c1a6d5df1ca7d1a,https://github.com/alibaba/fastjson2/commit/9d3a6168cf59a550f154a2249c1a6d5df1ca7d1a,use Unsafe.getChar
igniterealtime,Openfire,debf053d07b363752aa421dd688e97ee830534c4,https://github.com/igniterealtime/Openfire/commit/debf053d07b363752aa421dd688e97ee830534c4,OF-2921: Reduce Websocket operations under mutex  When stream management is enabled  deliver and record stanzas under a mutex. If it's not enabled  don't acquire the lock to reduce lock contention.
hs-web,hsweb-framework,7f86d0d7d54e9a0d53e73ea15d15ee90591beef0,https://github.com/hs-web/hsweb-framework/commit/7f86d0d7d54e9a0d53e73ea15d15ee90591beef0,refactor: 优化权限信息获取性能
spring-projects,spring-data-jpa,b66c96d363f0804c8142abada4d55e4bed3742c6,https://github.com/spring-projects/spring-data-jpa/commit/b66c96d363f0804c8142abada4d55e4bed3742c6,Use `SelectionQuery.getResultCount()` for count queries if possible.  We now use Hibernate's built-in mechanism to obtain the result count if there is an enclosing transaction. Without the transaction  the session is being closed and we cannot run the query.  Closes #3456
keycloak,keycloak,d9fe2dcc48a587d23b5396b601185e655a10300e,https://github.com/keycloak/keycloak/commit/d9fe2dcc48a587d23b5396b601185e655a10300e,Cache empty results for role-by-name lookup  Closes #36919  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
quarkusio,quarkus,9849effa0ea48d711a803dc6b993d23de80ae476,https://github.com/quarkusio/quarkus/commit/9849effa0ea48d711a803dc6b993d23de80ae476,Slightly improve performance of RequestMapper construction
apache,camel,d48ab20c225de1f477b25ae0bb24bffa7e468b12,https://github.com/apache/camel/commit/d48ab20c225de1f477b25ae0bb24bffa7e468b12,CAMEL-22278: Improve rabbitmq producer performance
apache,drill,27f3359ddb764cad7856828c37646ae99be843ed,https://github.com/apache/drill/commit/27f3359ddb764cad7856828c37646ae99be843ed,DRILL-8528: Hbase Limit Push Down (#3000)
camunda,camunda,e2ee8c3be6d1b228b76a90bb0f855741f3b0b1fc,https://github.com/camunda/camunda/commit/e2ee8c3be6d1b228b76a90bb0f855741f3b0b1fc,refactor: use search query instead of aggregation  * Similar to 0354a9693a092e81a50470b1ef0c2cff78bc6698 this commit affects the OS part of the archiving logic * This commit replaces the previous used aggregation with a normal search query to filter for process instances or batch operations by end date * The use case for aggregations are completly different to what we wanted to use it for * Benchmarks has shown that aggregations perform way slower than a normal search query * It is not clear why we used an aggregration before * Aggregation are limited by how many results it can return  at somepoint it simply failed without any results  and unclear error messages. This made it hard to fine-tune. * The general change was motivated by 819c0b70ac6356f1a49e0f7f3fb6ee33a8feee4c from @lenaschoenburg
soot-oss,soot,1830783ee33d5771d3e4a6bbba8be329cf8b3e1f,https://github.com/soot-oss/soot/commit/1830783ee33d5771d3e4a6bbba8be329cf8b3e1f,Only synchronize if necessary
keycloak,keycloak,ae88d7921f7b956de56707efa276b4c189b9c7e9,https://github.com/keycloak/keycloak/commit/ae88d7921f7b956de56707efa276b4c189b9c7e9,Improvements to partial evaluation  Closes #38732  Signed-off-by: Pedro Igor <pigor.craveiro@gmail.com>
chinabugotech,hutool,bff3ddc2f18ba2c361f827e17bd48c2fcfaf4948,https://github.com/chinabugotech/hutool/commit/bff3ddc2f18ba2c361f827e17bd48c2fcfaf4948,优化BeanUtil.copyToList拷贝较大数据量的性能问题
jOOQ,jOOQ,0eb5a0801664991959f21a973e5b1f3fbf07f73d,https://github.com/jOOQ/jOOQ/commit/0eb5a0801664991959f21a973e5b1f3fbf07f73d,[jOOQ/jOOQ#16567] Restore caching of resolvedType in AbstractTypedElementDefinition
trinodb,trino,d4214c12f3299b2251913badab482016f704f3a7,https://github.com/trinodb/trino/commit/d4214c12f3299b2251913badab482016f704f3a7,Set the default number of spiller threads to 2*number of spill dirs  This allows to saturate spill disks better in case of multiple spill locations.
crate,crate,7fa4cf9549894eebf3a1b26bbb078d95c2de0f40,https://github.com/crate/crate/commit/7fa4cf9549894eebf3a1b26bbb078d95c2de0f40,Optimize count(not_null_col) to use count operator  Closes https://github.com/crate/crate/issues/17601
alibaba,fastjson2,d5707ef85a1801881e23e1bee4dec3d58f1a947f,https://github.com/alibaba/fastjson2/commit/d5707ef85a1801881e23e1bee4dec3d58f1a947f,optimize JSONWriter
trinodb,trino,678a5f70dfbb2dae09c686c68eab20abd6b7a398,https://github.com/trinodb/trino/commit/678a5f70dfbb2dae09c686c68eab20abd6b7a398,Use already retrieved columns
trinodb,trino,22bc7167b42450f4b7eee342a268e49f3fd65d9c,https://github.com/trinodb/trino/commit/22bc7167b42450f4b7eee342a268e49f3fd65d9c,Increase size threshold for splitting pages to 2MB  Previous limit of 1MB was already low compared to the 8MB limit on size of pages produced by parquet and orc readers. After changes to getSizeInBytes for RLE  this limit could be hit more often.
quarkusio,quarkus,0f5364111e384eb32ccce7cd111cb0558d4bc93e,https://github.com/quarkusio/quarkus/commit/0f5364111e384eb32ccce7cd111cb0558d4bc93e,Merge pull request #47395 from ia3andy/issue-47384  Optimise path decoding in RoutingUtils
alibaba,fastjson2,e8e9acb50d7887d254096877f8b1c6926b53ec21,https://github.com/alibaba/fastjson2/commit/e8e9acb50d7887d254096877f8b1c6926b53ec21,optimize JSONReaderUTF16::readString
camunda,camunda,9a4fea5117b93426a4479cbf831b1a5cae79b596,https://github.com/camunda/camunda/commit/9a4fea5117b93426a4479cbf831b1a5cae79b596,refactor: get user by username  We used to go through make a call to the USER_KEY_BY_USERNAME CF to fetch the key first before fetching the user. We can skip this step now and get the user directly using the username.
quarkusio,quarkus,f2d0581c8c7c4214a81b51746017fa5e8e31ffe9,https://github.com/quarkusio/quarkus/commit/f2d0581c8c7c4214a81b51746017fa5e8e31ffe9,Merge pull request #45540 from yrodiere/agroal-no-driver-service-loading  Don't load JDBC drivers through the service loader without using them
apache,pulsar,a40ac3c30e3202ccf992e84be481f6ece588ac62,https://github.com/apache/pulsar/commit/a40ac3c30e3202ccf992e84be481f6ece588ac62,[improve][broker] Enhance compaction triggering with message check to avoid unnecessary operations (#24449)
PBH-BTN,PeerBanHelper,6545ef2cdb46a1437b83b12b8b684fd24041fbd1,https://github.com/PBH-BTN/PeerBanHelper/commit/6545ef2cdb46a1437b83b12b8b684fd24041fbd1,提升速度到 1 分钟检查一次 TrafficStatus
camunda,camunda,2ff3096769bd0d9be8699060eca06052948706e0,https://github.com/camunda/camunda/commit/2ff3096769bd0d9be8699060eca06052948706e0,refactor: retrieve `userTaskKey` from job custom headers  Optimizes the check for assignee correction on creating listener jobs by retrieving `userTaskKey` directly from the persisted job custom headers instead of querying the element instance state.  This avoids unnecessary reads from the state and aligns with the expectation that every task listener job carries the "io.camunda.zeebe:userTaskKey" header.  If the `userTaskKey` is missing or invalid  an `IllegalStateException` is thrown  indicating a data inconsistency  as this shouldn't happen during a normal engine operation.
crate,crate,5da729b1ddcb03363512cfdcd272687b29b99ba7,https://github.com/crate/crate/commit/5da729b1ddcb03363512cfdcd272687b29b99ba7,
apache,paimon,04d75278bb2f2d1c021246d5a83ad8b8e4449840,https://github.com/apache/paimon/commit/04d75278bb2f2d1c021246d5a83ad8b8e4449840,[hive] Batch list tables and skip checking table exists in filesystem with hive catalog (#4737)
theonedev,onedev,eef8ce0e346720d2356cae2059126f11b78d1038,https://github.com/theonedev/onedev/commit/eef8ce0e346720d2356cae2059126f11b78d1038,chore: Improve web UI performance for large number of projects
camunda,camunda,4a5840a2ab4f03564683dcbf20c5caa3f24bdba5,https://github.com/camunda/camunda/commit/4a5840a2ab4f03564683dcbf20c5caa3f24bdba5,refactor: make the name enrichment more efficient
alibaba,fastjson2,395ac99511d545aaab665e18de5c8ff608dec5f6,https://github.com/alibaba/fastjson2/commit/395ac99511d545aaab665e18de5c8ff608dec5f6,refactor(ObjectReaderCreatorASM JSONReader): Remove redundant comma checks  Removed redundant calls to `nextIfComma()` in various parts of `ObjectReaderCreatorASM` and `JSONReader`  improving readability and reducing unnecessary method invocations.
ClickHouse,clickhouse-java,d21d9dbc2c5f1d056d9cf108e55798c8a7b3dc4c,https://github.com/ClickHouse/clickhouse-java/commit/d21d9dbc2c5f1d056d9cf108e55798c8a7b3dc4c,Select performance (#2230)  * removed using maps  * optimized reading some types  * Updated query tests to use blackhole.  * reverted next() API return type  * Removed minor changes  * amost there  * Uses pre-allocated buffers  * Fixed Native Reader  * fixed comments  * fixed comments  * fixed comments
netty,netty,f52405d2b47a6ec255de23ceb18bac9c06cdb3d8,https://github.com/netty/netty/commit/f52405d2b47a6ec255de23ceb18bac9c06cdb3d8,IoUring: Explicit set CQSIZE by default and use a much saner default … (#15477)  …value for the submission ring  Motivation:  As default we used a size of 4096 for the submission ring which these days does not make a lot of sense anymore as you can size the submission queue and completion queue seperately. Generally speaking usually you see much more completions compared to submissions  especially as we enable multishot by default these days. Beside this you should also not batch too much in general before submission as this will affect latency. Because of this we should use a more sane default value for the submission queue which will also ensure we submit fast enough while still get some batching to reduce syscalls. Also we need to size the completion queue big enough to be able to receive enough completioms per batch.  Modifications:  - Change the default submission queue size to 128 - Change the default completion queue size to 4096  Result:  Better defaults
BiglySoftware,BiglyBT,8e5f0d8a12469f871eba1a58a3d8944203af452c,https://github.com/BiglySoftware/BiglyBT/commit/8e5f0d8a12469f871eba1a58a3d8944203af452c,Filter intermediate Files View nodes when no visible kids
apache,ignite,bc7061e8914033c71c7929f301163231399d6bdb,https://github.com/apache/ignite/commit/bc7061e8914033c71c7929f301163231399d6bdb,IGNITE-24135 BPlusTree reuses lastRow from rowFilter closure to fill buffer (#11816)
keycloak,keycloak,40f39f3f0953b70f8f6d012d25cfb2980e9c1041,https://github.com/keycloak/keycloak/commit/40f39f3f0953b70f8f6d012d25cfb2980e9c1041,Avoid looking up the client if it is known during the commit phase  Closes #36332  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
debezium,debezium,1d587fb6ff0a200b58d22c5e6e6a18059e782c98,https://github.com/debezium/debezium/commit/1d587fb6ff0a200b58d22c5e6e6a18059e782c98,DBZ-8879: Fix performance regression in debezium-core
orientechnologies,orientdb,04c7ac8480e088642d403252181433f0aea03b63,https://github.com/orientechnologies/orientdb/commit/04c7ac8480e088642d403252181433f0aea03b63,refactor: avoid to read data from transaction in internal implementation  already called by transaction
alibaba,spring-ai-alibaba,e75c79f5f520b50c502c7c71e1eafaa868295868,https://github.com/alibaba/spring-ai-alibaba/commit/e75c79f5f520b50c502c7c71e1eafaa868295868,Put the list->map out of the loop
ClickHouse,clickhouse-java,0ea28d4aae6b3594d972976cd06554d366dc5213,https://github.com/ClickHouse/clickhouse-java/commit/0ea28d4aae6b3594d972976cd06554d366dc5213,Merge pull request #2226 from ClickHouse/perf_deserializer_tests  [perf] Deserializer Tests
vespa-engine,vespa,41310abe49c859504fbf55924ae57e29463f9a5f,https://github.com/vespa-engine/vespa/commit/41310abe49c859504fbf55924ae57e29463f9a5f,Stop using gzip in file distribution  Very slow  uses more resources and native memory  not used for a long time
camunda,camunda,57fc821a76452ea9ca1a38232d5abd594d55f95f,https://github.com/camunda/camunda/commit/57fc821a76452ea9ca1a38232d5abd594d55f95f,feat: only force a snapshot when needed  This restores the previous behavior of skipping snapshots when positions didn't change  unless the snapshot is forced  either because of a migration or through the management API.
apache,kylin,847d1362a80f2875430001ef9c159edd4f535a27,https://github.com/apache/kylin/commit/847d1362a80f2875430001ef9c159edd4f535a27,KYLIN-6033 Route to calcite engine when answer min/max query by metadata (#2282)  Co-authored-by: Xuecheng Shan <shanxuecheng@gmail.com>
datastax,jvector,8e98e50b6768a60b642640180e2c89dd7873dfea,https://github.com/datastax/jvector/commit/8e98e50b6768a60b642640180e2c89dd7873dfea,add MADV_RANDOM (#382)  * add MADV_RANDOM  * promote ReaderSupplierFactory to jvector-base  * comments
crate,crate,a7a27bdd59c7e64e6533d049b469a48a3b01cbb5,https://github.com/crate/crate/commit/a7a27bdd59c7e64e6533d049b469a48a3b01cbb5,Keep Directory and Writer open in TableStatsService  Follow up to https://github.com/crate/crate/pull/18242  Binds them to the TableStatsService lifecycle and uses a `SearcherManager` to refresh the searcher only if needed.  Removes the locking  because the used Lucene components are thread-safe.
apache,flink,180d587717ba0997c35f89e080974851eea7a938,https://github.com/apache/flink/commit/180d587717ba0997c35f89e080974851eea7a938,[FLINK-37164][Runtime] Speed up state v2 synchronous methods execution (#26005)
google,guice,34c84e975d118c0c2ae717f6d0e008146144e348,https://github.com/google/guice/commit/34c84e975d118c0c2ae717f6d0e008146144e348,Make `InternalContext.setDependency` a no-op when cyclic proxies are disabled  This will save a tiny bit of memory and time and should simplify the `MethodHandle` implementations when we get there.  Behavior is nearly perfectly concerned  but as the `CircularDependencyTest` points out  error messages will change when failing with cycles that go through scoped bindings.  PiperOrigin-RevId: 738385449
crate,crate,575f17409bedb9d448f8c1016aea7e4fc5e59ba3,https://github.com/crate/crate/commit/575f17409bedb9d448f8c1016aea7e4fc5e59ba3,Use metadata.getIndices in OpenTableClusterStateTaskExecutor
alibaba,fastjson2,2e3264d77f4196f04748cf982985e009d24ec678,https://github.com/alibaba/fastjson2/commit/2e3264d77f4196f04748cf982985e009d24ec678,optimize for deserialize none-constructor class
vespa-engine,vespa,dcd1ae2b385220201e9105f405206bfbae90f581,https://github.com/vespa-engine/vespa/commit/dcd1ae2b385220201e9105f405206bfbae90f581,Merge pull request #33667 from vespa-engine/geirst/search-mmap-advise-sequential-default  Change MMAP madvise default to SEQUENTIAL for search.
SPLWare,esProc,1b99c7ca304548572374ff28c4816398b0b2edbd,https://github.com/SPLWare/esProc/commit/1b99c7ca304548572374ff28c4816398b0b2edbd,Optimize Excel functions.
apache,hive,895f3f3f5c5a1f5b4ecbba5af63e6a60db083dfc,https://github.com/apache/hive/commit/895f3f3f5c5a1f5b4ecbba5af63e6a60db083dfc,HIVE-29050: Optimize the partition validation in add_partitions (#5910)
apache,flink,9fb7cc38acdbd6a02e7733e60ed5cd1bfad33340,https://github.com/apache/flink/commit/9fb7cc38acdbd6a02e7733e60ed5cd1bfad33340,[FLINK-37542][table-planner] Support sink reuse in streaming mode (#26380)
pmd,pmd,d70a56ac9b9c73aeb10a3dcdbb54afe455a7337f,https://github.com/pmd/pmd/commit/d70a56ac9b9c73aeb10a3dcdbb54afe455a7337f,Reorder statements for short-circuit exit
jhy,jsoup,d80275e16ebd34bae5b48f29f3e4437e1b207955,https://github.com/jhy/jsoup/commit/d80275e16ebd34bae5b48f29f3e4437e1b207955,Performance tweak when appending tag names  For some crafted HTML  this path was accumulating an ultra-long tag name. Removed redundant
apache,rocketmq,a343021229673bdb4935442e23664b99306a874d,https://github.com/apache/rocketmq/commit/a343021229673bdb4935442e23664b99306a874d,[ISSUE #9064] Optimize transaction message callback check logic (#9062)
apache,paimon,1266c36b42539df75d3a1cc77c9636697bd2ddfc,https://github.com/apache/paimon/commit/1266c36b42539df75d3a1cc77c9636697bd2ddfc,[spark] Eliminate the De/serialization process when writing to the append bucket table (#5159)
apache,cloudstack,0b7aef7a0f7e5b4a86110a32d243e199517d7cdc,https://github.com/apache/cloudstack/commit/0b7aef7a0f7e5b4a86110a32d243e199517d7cdc,enhancement: iterate directly on HostJoinVO (#10613)
quarkusio,quarkus,2fdb9c5b0379f59c6133244496bfefbd28a74352,https://github.com/quarkusio/quarkus/commit/2fdb9c5b0379f59c6133244496bfefbd28a74352,Merge pull request #45219 from geoand/rr-optimization  Get rid of unnecessary reflective calls at RESTEasy Reactive startup
apache,iotdb,2482a71b10065292b563fdf8afe39c48ba0e1692,https://github.com/apache/iotdb/commit/2482a71b10065292b563fdf8afe39c48ba0e1692,Fixed the issue that columns may not be pruned when querying non-field columns in tree view scan
brettwooldridge,HikariCP,ee5328d209e32d43365538db4d5a2f5ae1361967,https://github.com/brettwooldridge/HikariCP/commit/ee5328d209e32d43365538db4d5a2f5ae1361967,decrease yield() frequency during direct hand-off attempts
opentripplanner,OpenTripPlanner,4219a4389075fec90225a112cf2df63a097e38a2,https://github.com/opentripplanner/OpenTripPlanner/commit/4219a4389075fec90225a112cf2df63a097e38a2,Use convexity to optimize unnecessary intersection tests
trinodb,trino,aaa888ba202a4e33ace4b2c169dd8c360683c17e,https://github.com/trinodb/trino/commit/aaa888ba202a4e33ace4b2c169dd8c360683c17e,Use icebergScanExecutor for reading manifests in IcebergMetadata  Reduces bottleneck on the default iceberg worker pool
keycloak,keycloak,6062ddc6b2fb5416faa3b30d0c0caf50c39662a3,https://github.com/keycloak/keycloak/commit/6062ddc6b2fb5416faa3b30d0c0caf50c39662a3,Avoid calling the underlying user storage multiple times when lazily loading model attributes  Closes #40213  Signed-off-by: Pedro Igor <pigor.craveiro@gmail.com>
zfile-dev,zfile,585764df9924e4adc9ebdccf48f280daea3062f3,https://github.com/zfile-dev/zfile/commit/585764df9924e4adc9ebdccf48f280daea3062f3,优化 aop 注解参数获取方式
apache,hudi,d9a21b80d68395391103fc33699e5dc9b0fae903,https://github.com/apache/hudi/commit/d9a21b80d68395391103fc33699e5dc9b0fae903,[MINOR] Use native file reader by default (#13160)
alibaba,spring-ai-alibaba,66e59ca7ee1de32bb495dbdd9c27c1fcdd48841b,https://github.com/alibaba/spring-ai-alibaba/commit/66e59ca7ee1de32bb495dbdd9c27c1fcdd48841b,feat: 添加标签页缓存和刷新逻辑，优化浏览器状态获取
freeok,so-novel,19d38007fbe1efab18ce6f321ce293bf3dec4f8f,https://github.com/freeok/so-novel/commit/19d38007fbe1efab18ce6f321ce293bf3dec4f8f,:recycle: 优化TocParser#extractPaginationUrls
thingsboard,thingsboard,265e4181b7dc4ae5132fbb23b68bf94c6e80f603,https://github.com/thingsboard/thingsboard/commit/265e4181b7dc4ae5132fbb23b68bf94c6e80f603,improved performance
jhy,jsoup,0679bef07f1e29ae72ae54102d5af9a1f80d45d4,https://github.com/jhy/jsoup/commit/0679bef07f1e29ae72ae54102d5af9a1f80d45d4,Perf: removed redundant lowercase normalization
quarkusio,quarkus,f598fcb11e9625b93939655ce05f5159fa942f98,https://github.com/quarkusio/quarkus/commit/f598fcb11e9625b93939655ce05f5159fa942f98,Merge pull request #45353 from mkouba/arc-instance-inject-metadata-optimize  ArC: optimize Instance injection points
modelcontextprotocol,java-sdk,580f95526fa87447ed6e84e6b4f12dd01a564baf,https://github.com/modelcontextprotocol/java-sdk/commit/580f95526fa87447ed6e84e6b4f12dd01a564baf,feat(McpAsyncServer): Add non-blocking execution for tools and resources  - Execute tool calls  resource reads and prompt handling in a non-blocking manner using Schedulers.boundedElastic(). This prevents blocking operations from impacting server responsiveness. - Added integration tests to verify non-blocking behavior with tools that make HTTP calls to external services.  Related to #48 This is  a temp patch until #48 is resolved properly.
netty,netty,279cc34a016462f585414a61734a1a442272a8ac,https://github.com/netty/netty/commit/279cc34a016462f585414a61734a1a442272a8ac,IoUring: Share IovArray to reduce jitter and allocations (#14996)  Motivation:  We can easily share the IovArray for Channels that are using the same IoUringIoHandler. This will remove jitter and allocations in general.  Modifications:  - Share IovArray by allocating it up-front - Submit once there is no space left in the IovArray so we can re-use it  Result:  Less jitter and allocations.
quarkusio,quarkus,932e5a8aa42205e57a41d27550cc1e98fe571c61,https://github.com/quarkusio/quarkus/commit/932e5a8aa42205e57a41d27550cc1e98fe571c61,Merge pull request #45222 from geoand/beancontainerimpl  Replace reflection with MethodHandle in DefaultInstanceFactor
ClickHouse,clickhouse-java,7ea67f90a1b869f095baf386b08dec7beadfe0e8,https://github.com/ClickHouse/clickhouse-java/commit/7ea67f90a1b869f095baf386b08dec7beadfe0e8,Merge pull request #2238 from ClickHouse/perf_code_review_01  [perf] Request pipeline review and improvements
netty,netty,fd27eacec2bff76bbc4cd512195c7f662b640623,https://github.com/netty/netty/commit/fd27eacec2bff76bbc4cd512195c7f662b640623,Optimize ReferenceCountedOpenSslEngine.setEnabledProtocols0 (#15448)  Motivation:  When a new SSL connection is established  it creates a `ReferenceCountedOpenSslEngine`  which calls `setEnabledProtocols` and then `setEnabledProtocols0`. If the server supports multiple protocols  the method `setEnabledProtocols0` calls `HashSet.contains` for every enabled protocol  making it notable during profiling:  ``` for (String protocol : protocols) { if (!OpenSsl.SUPPORTED_PROTOCOLS_SET.contains(protocol)) { ```  Modification:  Replaced `set.contains` with switch + shift operations. This approach is ~5 times faster (according to my microbenchmarks) than `map.contains` + small cleanups along the road.  Result:  Less CPU usage on initial connection when multiple protocols are supported.  ---------  Co-authored-by: Chris Vest <christianvest_hansen@apple.com>
netty,netty,51b625816a44b52620c67c00f774c04783ab2e8c,https://github.com/netty/netty/commit/51b625816a44b52620c67c00f774c04783ab2e8c,IoUring: Also make use of IORING_RECVSEND_POLL_FIRST for accept (#14617)  Motivation:  We can use IORING_RECVSEND_POLL_FIRST to signal if we should try to poll first or not.  Modifications:  Make use of IORING_RECVSEND_POLL_FIRST (the same as we do when recving bytes)  Result:  Less overhead when we already know that there is nothing to accept.  ---------  Co-authored-by: Chris Vest <christianvest_hansen@apple.com>
spring-projects,spring-data-mongodb,b43c09d1f41e252130ccb56a3e4eba10ba388c61,https://github.com/spring-projects/spring-data-mongodb/commit/b43c09d1f41e252130ccb56a3e4eba10ba388c61,Avoid unnecessary mapping of Sort object.  Closes: #4846
netty,netty,2e9dadb9ae4ffb5a720a680a5195be8193710783,https://github.com/netty/netty/commit/2e9dadb9ae4ffb5a720a680a5195be8193710783,IoUring: Retry buffer ring based ready directly once we receive a ENO… (#14866)  …BUFS.  Motivation:  When we use a buffer ring and receive ENOBUFS we should just let the user know and retry with a buffer ring again. This works as expected as we always refill the buffer ring once we used a buffer out of it. At the moment we will fallback to do a read loop without a buffer ring which slows down things without any benefits.  Modifications:  Just retry directly with a buffer ring.  Result:  Performance improvements when the buffer ring is exhausted in between.  Before:  ``` ./src/tcpkali -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   -c 50 -T 30 127.0.0.1:8081 Destination: [127.0.0.1]:8081 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8081 Ramped up to 50 connections. Total data sent:     130258.4 MiB (136585805824 bytes) Total data received: 130229.7 MiB (136555722112 bytes) Bandwidth per channel: 1456.511⇅ Mbps (182063.8 kBps) Aggregate bandwidth: 36408.753↓  36416.774↑ Mbps Packet rate estimate: 3333377.7↓  3125676.8↑ (12↓  45↑ TCP MSS/op) Test duration: 30.005 s. ```  With this change:  ``` ./src/tcpkali -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   -c 50 -T 30 127.0.0.1:8081 Destination: [127.0.0.1]:8081 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8081 Ramped up to 50 connections. Total data sent:     201195.0 MiB (210968248320 bytes) Total data received: 201185.2 MiB (210958005952 bytes) Bandwidth per channel: 2249.524⇅ Mbps (281190.5 kBps) Aggregate bandwidth: 56236.732↓  56239.462↑ Mbps Packet rate estimate: 5148636.2↓  4827071.8↑ (12↓  45↑ TCP MSS/op) Test duration: 30.01 s. ```
soot-oss,soot,4e63c1cf2eec22773fa5092c5893c9038bd6e5ce,https://github.com/soot-oss/soot/commit/4e63c1cf2eec22773fa5092c5893c9038bd6e5ce,Merge pull request #2172 from MarcMil/opt  Setting a max depth limit in UnitThrowAnalysis
onthegomap,planetiler,6f18e0af2e13b346228095576173d4263c5d8366,https://github.com/onthegomap/planetiler/commit/6f18e0af2e13b346228095576173d4263c5d8366,Use rtree spatial index from PlanetilerConfig bounds by default for Geopackages (#635)
spring-projects,spring-ai,7c674c9a6b72f2385b4d664f9a3ce29866a590c7,https://github.com/spring-projects/spring-ai/commit/7c674c9a6b72f2385b4d664f9a3ce29866a590c7,Avoid looping through all the page tree if there is no destination page (#3396)  * Avoid looping through all the page tree if there is no destination page  Fixes: #3396  Auto-cherry-pick to 1.0.x  Signed-off-by: torakiki <andrea.vacondio@gmail.com>
eclipse-vertx,vert.x,40bdf1e728206f3d4c49fca8c98b8c644fbb6654,https://github.com/eclipse-vertx/vert.x/commit/40bdf1e728206f3d4c49fca8c98b8c644fbb6654,VertxConnection message handling fast path: avoid creating a pending queue when handling a message in VertxConnection when it is not necessary.
apache,iotdb,a84bee756a580fd1d0a9b4264da193bae6fcacc8,https://github.com/apache/iotdb/commit/a84bee756a580fd1d0a9b4264da193bae6fcacc8,Pipe: use mem table to batch write tree data into tsfile (#15276)
trinodb,trino,04309cb7d4774cd5a52d83dfabdae4b5b814ca73,https://github.com/trinodb/trino/commit/04309cb7d4774cd5a52d83dfabdae4b5b814ca73,Reuse PagesIndexOrdering in ordered accumulators
netty,netty,1001008e7599db4a1efcde2fb629f0613f029d1e,https://github.com/netty/netty/commit/1001008e7599db4a1efcde2fb629f0613f029d1e,Remove regexp usage from HttpPostRequestEncoder (#15253)  Motivation:  Regexp can be easily replaced with custom code. Makes code easier to read and simpler.  Modification:  Regexp replaced with simple `replace` methods chain.  Result:  No more regexp usage in `HttpPostRequestEncoder`  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
magefree,mage,9812e133e1c26867999cb3412c394b81c7ab313c,https://github.com/magefree/mage/commit/9812e133e1c26867999cb3412c394b81c7ab313c,server: disabled triggers integrity checks for better performance
crate,crate,2057f82694cc687c08b8dc4ab64eac28a3c174f2,https://github.com/crate/crate/commit/2057f82694cc687c08b8dc4ab64eac28a3c174f2,Add prefetching for doc values and norms. (https://github.com/apache/lucene/pull/13411)
apache,camel,2e7dfd170ebbe22ada69587a605f2f19b937345e,https://github.com/apache/camel/commit/2e7dfd170ebbe22ada69587a605f2f19b937345e,CAMEL-22181: poll/pollEnrich should support eager limit option for file based components so it can be faster out of the box.
debezium,debezium,e4c7c2f5ec324020b9a82d19ecea71acca75cf5c,https://github.com/debezium/debezium/commit/e4c7c2f5ec324020b9a82d19ecea71acca75cf5c,DBZ-8492 Do not log and gather attributes for views
quarkusio,quarkus,09edb568c14d738463da42a9d7f513a5deb1b4ca,https://github.com/quarkusio/quarkus/commit/09edb568c14d738463da42a9d7f513a5deb1b4ca,Quarkus REST - Use ByteBufInputStream instead of copying bytes  This is related to #45122 and reduce the amount of copy of the content we keep in memory.
questdb,questdb,a01dc0ba9d4d4dd542d054375f92c75d722bbd02,https://github.com/questdb/questdb/commit/a01dc0ba9d4d4dd542d054375f92c75d722bbd02,chore(core): speed up comparison of short utf8 sequences (#5753)
debezium,debezium,262c7a5d3fed5b45c22428e54e9b52a06d91d1cc,https://github.com/debezium/debezium/commit/262c7a5d3fed5b45c22428e54e9b52a06d91d1cc,DBZ-5845 Improved mechanism for offsets retrieval
trinodb,trino,6ab17dc5443491e7c15fcbedb3f08c63da2a7e01,https://github.com/trinodb/trino/commit/6ab17dc5443491e7c15fcbedb3f08c63da2a7e01,Skip subquery plan if subqueryExpression List is empty for efficiency
orientechnologies,orientdb,d1ccd847dd38e54c2a9dade0d8c3066505efd5c1,https://github.com/orientechnologies/orientdb/commit/d1ccd847dd38e54c2a9dade0d8c3066505efd5c1,refactor: minor optimization in the parser logic
apache,hive,f2fdea058f0124153514d40fa827e91c730c0e51,https://github.com/apache/hive/commit/f2fdea058f0124153514d40fa827e91c730c0e51,HIVE-25948: Optimize Iceberg writes by directing records either to Clustered or Fanout writer (#5789)
eclipse-vertx,vert.x,a0f7f2c4e7dedb0b22a51b27d985083664dbb18f,https://github.com/eclipse-vertx/vert.x/commit/a0f7f2c4e7dedb0b22a51b27d985083664dbb18f,Add system property to intern common HTTP/1.x request headers to their lower case version.  Motivation:  Netty HttpRequestDecoder only interns HTTP common request headers (such as content-type) to their camel case version (e.g. Content-Type).  Changes:  Intern common HTTP request headers to their case insensitive constant version as used by Vert.x to query headers. This noticeably avoids full string comparison when looking for certain headers such as determining whether a connection is persistent (connection header).
apache,drill,78a52087bb85bcc7034157544193155b87503111,https://github.com/apache/drill/commit/78a52087bb85bcc7034157544193155b87503111,DRILL-8527: Hive Limit Push Down (#2997)
itext,itext-java,749a16fcdf3a9ef7cfb5f2af219e04fc403772de,https://github.com/itext/itext-java/commit/749a16fcdf3a9ef7cfb5f2af219e04fc403772de,Cache collapsed vertical border calculation result  DEVSIX-8836
keycloak,keycloak,4b47697c838b9c7373610d826f68d0c0ed8fb635,https://github.com/keycloak/keycloak/commit/4b47697c838b9c7373610d826f68d0c0ed8fb635,Lazily process sessions from ISPN to avoid fetching client sessions (#39639)  Closes #39638  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
immutables,immutables,9ef4839eac96d139f57ecd9d4c12be6fc0373d79,https://github.com/immutables/immutables/commit/9ef4839eac96d139f57ecd9d4c12be6fc0373d79,Merge pull request #1573 from christophercolumbusdog/mergeFunction  Optimize mergeInternal generation with specialized methods per subtype
apache,avro,b61427fdb9bae00cf4d14225b40c3399c7c823aa,https://github.com/apache/avro/commit/b61427fdb9bae00cf4d14225b40c3399c7c823aa,AVRO-4060: Use JDK to Hash Byte Array in UTF8 (#3175)
camunda,camunda,4040c6d3da9877f2b9c31eebf08369cb8b8be926,https://github.com/camunda/camunda/commit/4040c6d3da9877f2b9c31eebf08369cb8b8be926,refactor: track both possible counters instead of recreating them
apache,cloudstack,111d87b845ab8bddf35f5d0f3303947bfff8719c,https://github.com/apache/cloudstack/commit/111d87b845ab8bddf35f5d0f3303947bfff8719c,console: optimise buffer sizes for faster console performance (#11221)  * console-proxy: fix stream buffer sizes to improve console performance  This bumps the input and output stream buffers to 64KiB and uses them consistent across TLS and non-TLS based VNC connections.  This fixes #10650  Co-authored-by: Vishesh Jindal <vishesh.jindal@shapeblue.com> Signed-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>  * Make buffer size configurable & other improvements for CPU & memory utilisation  * Setup batching of data for TLS connections to the VNC server  * Apply suggestions from code review  * Fix buffer size for xenserver  ---------  Signed-off-by: Rohit Yadav <rohit.yadav@shapeblue.com> Co-authored-by: Vishesh Jindal <vishesh.jindal@shapeblue.com> Co-authored-by: vishesh92 <vishesh92@gmail.com>
openpnp,openpnp,1a7aba2307b45a37cef176a750191c0a448a14a8,https://github.com/openpnp/openpnp/commit/1a7aba2307b45a37cef176a750191c0a448a14a8,performance enhancement
PBH-BTN,PeerBanHelper,f49b669be0e2bcb51b69a2f0ad56cb2ce1a1e059,https://github.com/PBH-BTN/PeerBanHelper/commit/f49b669be0e2bcb51b69a2f0ad56cb2ce1a1e059,把 WAL 加回来，关掉 cache_spill（考虑到有 mmap 了）
netty,netty,8134aefc284a2a8b719daa382bfb04db46784590,https://github.com/netty/netty/commit/8134aefc284a2a8b719daa382bfb04db46784590,Branchless and O(1) size class look-up (#15417)  Motivation:  Searching the size class can involve few branches  which can lead to branch-misses  hurting IPC in the hot path  Modification:  Uses a branchless approach to compute the size class  Result:  Reduced branch-misses on size classes allocation
dromara,RuoYi-Vue-Plus,55b1a67637cf63504ca207181a0df7753e2b030e,https://github.com/dromara/RuoYi-Vue-Plus/commit/55b1a67637cf63504ca207181a0df7753e2b030e,update 优化 避免重复处理
apache,druid,9ff11731c8f0d6861bb0a6e9171c4809ec559ade,https://github.com/apache/druid/commit/9ff11731c8f0d6861bb0a6e9171c4809ec559ade,Parallelize supervisor stop logic to make it run faster (#17535)  - Add new method `Supervisor.stopAsync` - Implement `SeekableStreamSupervisor.stopAsync()` to use a shutdown executor - Call `stopAsync` from `SupervisorManager`
signalapp,Signal-Server,e12ba6b15b49c1ee601aa79442937e2a9dcf4a4d,https://github.com/signalapp/Signal-Server/commit/e12ba6b15b49c1ee601aa79442937e2a9dcf4a4d,Reduce page size in MessagesDynamoDb#mayHaveUrgentMessages
netty,netty,7515c263b95bb826c76b266821136920ca91e001,https://github.com/netty/netty/commit/7515c263b95bb826c76b266821136920ca91e001,IoUring: Use IORING_SETUP_NO_SQARRAY by default (#15447)  Motivation:  To reduce indirection (and so overhead) we should use IORING_SETUP_NO_SQARRAY if possible. This is also done by liburing since 2.6)  Modifications:  - Add code to support IORING_SETUP_NO_SQARRAY and use it by default if possible - Refactor native code to be more inline with liburing which makes it easier to maintain - Update io_uring structs to match latest  Result:  Less indirection by default when running on a 6.6+ kernel.
keycloak,keycloak,1cb7a4736c198988b3d84c50b0a3d9b0b54ed71b,https://github.com/keycloak/keycloak/commit/1cb7a4736c198988b3d84c50b0a3d9b0b54ed71b,Slow query when checking if a realm has brokers and brokering is enabled  Closes #37062  Signed-off-by: Pedro Igor <pigor.craveiro@gmail.com> Co-authored-by: Alexander Schwartz <alexander.schwartz@gmx.net>
liquibase,liquibase,9ccbb52cc3c3a2c11f657d935cbf63d3fc8f3e06,https://github.com/liquibase/liquibase/commit/9ccbb52cc3c3a2c11f657d935cbf63d3fc8f3e06,DAT-20082: analytics: don't needlessly call isEnabled method when determining priority (#6930)  The isEnabled method was being called while determining priority  which was unnecessary when multiple analytics listeners are on the classpath. This change delays the call to the isEnabled flag until after priority has been determined  which means that it should only be called once.
apache,hbase,08de8ed0e62a36df8dfff0c7a350de8af939f176,https://github.com/apache/hbase/commit/08de8ed0e62a36df8dfff0c7a350de8af939f176,HBASE-28836 Parallize the file archival to improve the split times (#6616)  Signed-off-by: Andrew Purtell <apurtell@apache.org> Signed-off-by: Peter Somogyi <psomogyi@apache.org>
alibaba,fastjson2,ff1cd243ea44e3cddeb9f21c2c6254084352213e,https://github.com/alibaba/fastjson2/commit/ff1cd243ea44e3cddeb9f21c2c6254084352213e,optimize for pr #3528
Card-Forge,forge,2568df1b9105673dd01673eb3100e5586bb3acaa,https://github.com/Card-Forge/forge/commit/2568df1b9105673dd01673eb3100e5586bb3acaa,Reorder `ReplaceMoved.canReplace` to do some common easy checks first.
zfile-dev,zfile,ef5057bf4101516a4aca9aa07c91615e31768f68,https://github.com/zfile-dev/zfile/commit/ef5057bf4101516a4aca9aa07c91615e31768f68,优化 concat 和 removeDuplicateSlashes 工具类性能
opensolon,solon,869ee6130749b618888eb4341e488d74b309d579,https://github.com/opensolon/solon/commit/869ee6130749b618888eb4341e488d74b309d579,优化 solon-mvc ActionExecuteHandler 相关适配，增加懶引用的适配
apache,pulsar,d2728253c666f7d4bd4f111356f3b97663603b6a,https://github.com/apache/pulsar/commit/d2728253c666f7d4bd4f111356f3b97663603b6a,[improve][broker] PIP-429: Optimize Handling of Compacted Last Entry by Skipping Payload Buffer Parsing  (#24523)
quarkusio,quarkus,2952e62cf89f2647549e1f0ee07b4fe9f9f908fd,https://github.com/quarkusio/quarkus/commit/2952e62cf89f2647549e1f0ee07b4fe9f9f908fd,Merge pull request #46202 from gsmet/keycloak-devservices  KeycloakDevServicesProcessor - Avoid all work if disabled
apache,skywalking,344f13191689d31e881c079feee97054283c7da3,https://github.com/apache/skywalking/commit/344f13191689d31e881c079feee97054283c7da3,Skip persisting metrics/record data that have been expired (#13102)
schemacrawler,SchemaCrawler,a268bab0b3ea6d1589473a33502893b07e17c3af,https://github.com/schemacrawler/SchemaCrawler/commit/a268bab0b3ea6d1589473a33502893b07e17c3af,Use Kryo for serialization
Konloch,bytecode-viewer,88e60059684de475fd4ab61f4a6b5a30529b92db,https://github.com/Konloch/bytecode-viewer/commit/88e60059684de475fd4ab61f4a6b5a30529b92db,speed up the resource file tree generation
netty,netty,7145ec130b8e62e405816ad0da0e86eae1041649,https://github.com/netty/netty/commit/7145ec130b8e62e405816ad0da0e86eae1041649,Adaptive: Override setZero(...) / writeZero(...) method to be able to… (#15384)  … use optimized implementations  Motivation:  We should override the *Zero(..) methods and just delegate to the super methods as these might have some optimized implementations.  Modifications:  - Override setZero(...) and writeZero(...) - Use trimIndicesToCapacity(...) in capacity(...) to simplify  Result:  Faster implementation of setZero(...) and writeZero(...)
jhy,jsoup,442ec7561a292a78d8f065fb0b87edf78f1c166b,https://github.com/jhy/jsoup/commit/442ec7561a292a78d8f065fb0b87edf78f1c166b,Use ArrayDeque instead of Stack  As the Stack implementation is synchronized  which is not required here.
apache,druid,512b70c4687fd0da1845c98693b8024bf829992a,https://github.com/apache/druid/commit/512b70c4687fd0da1845c98693b8024bf829992a,Make MSQ tests run faster (#17718)
camunda,camunda,3ed852e652c198099039d832bb4029f749dd5327,https://github.com/camunda/camunda/commit/3ed852e652c198099039d832bb4029f749dd5327,feat: cache buckets in JournalMetricsDoc
vespa-engine,vespa,0cf77adb335cbce60aefa3a99814d3d3a421644f,https://github.com/vespa-engine/vespa/commit/0cf77adb335cbce60aefa3a99814d3d3a421644f,Spend less cycles on metric aggregation  Remove unused metrics and dimensions. Cache context instances.
netty,netty,626707b524053f0cb7f7aca8a184b4fac050693a,https://github.com/netty/netty/commit/626707b524053f0cb7f7aca8a184b4fac050693a,IoUring: Add support for IORING_RECV_MULTISHOT (#14818)  Motivation:  To reduce overhead we should use IORING_RECV_MULTISHOT when possible.  Modifications:  - Add code to use IORING_RECV_MULTISHOT - Fix bug related to cancellations that are inflight  Result:  Be able to use IORING_RECV_MULTISHOT to reduce overhead if kernel supports it  ---------  Co-authored-by: Chris Vest <christianvest_hansen@apple.com>
spring-projects,spring-ai,af1ce67c8697f4f3ee2d8c80cb9e82cd2cf161bb,https://github.com/spring-projects/spring-ai/commit/af1ce67c8697f4f3ee2d8c80cb9e82cd2cf161bb,Reuse DocumentRowMapper instance to reduce redundant object creation  Fixes #3564 Auto-cherry-pick to 1.0.x  Signed-off-by: jonghoonpark <dev@jonghoonpark.com>
apache,paimon,274ed05699439d008094d10ffe6f49ce2ac523a6,https://github.com/apache/paimon/commit/274ed05699439d008094d10ffe6f49ce2ac523a6,[core] optimize the binlog table read performance (#4773)
netty,netty,0a11fc1fdba4db04061a3a8efaf01dfa4dac8598,https://github.com/netty/netty/commit/0a11fc1fdba4db04061a3a8efaf01dfa4dac8598,Use switch instead of map in OpenSslKeyMaterialManager (#15434)  Motivation:  Switch outperforms map  like it was shown in similar PRs. Also  this method could be optimized to avoid HashMap allocations on SSL handshake.  Modification:  Replaced static final map with switch method. Replaced HashMap allocation with bitwise operations.  Result:  No more static final map and HashMap allocations.
tlaplus,tlaplus,44364d527ee7367a0bdb68a49afd3103b32ad92f,https://github.com/tlaplus/tlaplus/commit/44364d527ee7367a0bdb68a49afd3103b32ad92f,Add new InfinitePrecisionMult1024Indexer based on Java's BigInteger.  Part of Github issue #1112 "Warning: DiskFPSet.mergeNewEntries: xxx is already on disk with hangup following." https://github.com/tlaplus/tlaplus/issues/1112  [Bug][TLC]  Signed-off-by: Markus Alexander Kuppe <github.com@lemmster.de>
apache,druid,c887976d2b64aa63a3041bec3d1259f3fd24ed7e,https://github.com/apache/druid/commit/c887976d2b64aa63a3041bec3d1259f3fd24ed7e,allow Expr to provide optimized BitmapColumnIndex implementations to optimize ExpressionFilter (#18094)  * allow Expr to provide optimized BitmapColumnIndex implementations to optimize ExpressionFilter  changes: * added `asBitmapColumnIndex` method to `Expr`  pushing down the default implementation of `ExpressionFilter.getBitmapColumnIndex` into this new method * added `asColumnIndexSupplier` and `asBitmapColumnIndex` to `Function` interface  to allow `Expr` that use `Function` to further specialize participation in filtering * `ExpressionFilter` now completely delegates to `Expr` for its `getBitmapColumnIndex` method * Moved predicate factory out of `ExpressionFilter` to standalone `ExpressionDruidPredicateFactory` since it is now used by the default implementation of `Expr.asBitmapColumnIndex` * added implementation of `asBitmapColumnIndex` to `BinEqExpression` so that the equals expression can use `ValueIndex` (except for string columns matching numeric values since that requires predicate indexes) * added implementation of `asBitmapColumnIndex` to `MvOverlapConstantArray` function to allow it use to `ValueSetIndex` with a string match value type  * add mv_overlap test to ExpressionFilterTest  * more test more better
netty,netty,9c3a01dd219f3a1e904b2a6a9f842e428266eed4,https://github.com/netty/netty/commit/9c3a01dd219f3a1e904b2a6a9f842e428266eed4,IoUring: Fill buffer rings from IO thread (#14851)  Motivation:  We should better fill the buffer rings from the thread that will actual use it as the used ByteBufAllocator might return buffers that are cheaper to release on the allocation thread.  Modification:  - Make fill method package-private and call it from the initialize() method.  Result:  Possibility of allocating buffers that will be cheaper to release on the IO thread.
trinodb,trino,82f3f037bd1f6ee77c38a819d5ccf1e16b1b23b1,https://github.com/trinodb/trino/commit/82f3f037bd1f6ee77c38a819d5ccf1e16b1b23b1,Increase streaming part size to 32MB  Default of 16MB causes S3 throttling issues with large clusters during inserts
apache,pulsar,86eb3b81ac327c4e34b69b7e77b6f5ec3d8c6688,https://github.com/apache/pulsar/commit/86eb3b81ac327c4e34b69b7e77b6f5ec3d8c6688,[fix][broker]Fix thread safety issues in BucketDelayedDeliveryTracker with StampedLock optimistic reads (#24542)
google,error-prone,010581b3157d44d0c95308b0f4c2317f02872043,https://github.com/google/error-prone/commit/010581b3157d44d0c95308b0f4c2317f02872043,Pass the combineable `VariableTree` around rather than looking for it twice.  Also  have `combinableVariableTree` do the _cheap_ work first: currently we scan bits of the AST a couple of times before potentially discarding the result anyway.  PiperOrigin-RevId: 768007500
microcks,microcks,c27cd3e421bae5754d55d68d4c411d2c6d96ab3d,https://github.com/microcks/microcks/commit/c27cd3e421bae5754d55d68d4c411d2c6d96ab3d,Perf/use batching for DailyStatisticsFeeder  (#1630)  * perf: use batching for metrics  Signed-off-by: Apoorva Srinivas Appadoo <apoorva-srinivas.appadoo@etu.univ-cotedazur.fr>  * fix: first increment  Signed-off-by: Apoorva Srinivas Appadoo <apoorva-srinivas.appadoo@etu.univ-cotedazur.fr>  * fix: flush metrics to database on shutdown  Signed-off-by: Apoorva Srinivas Appadoo <apoorva-srinivas.appadoo@etu.univ-cotedazur.fr>  ---------  Signed-off-by: Apoorva Srinivas Appadoo <apoorva-srinivas.appadoo@etu.univ-cotedazur.fr>
prestodb,presto,fdc6e653efa31d9e1890ea80769ff507eba01790,https://github.com/prestodb/presto/commit/fdc6e653efa31d9e1890ea80769ff507eba01790,Optimize partition value evaluation in filter pushdown
quarkusio,quarkus,9a3fd380848603192939373138260bf5b4c03905,https://github.com/quarkusio/quarkus/commit/9a3fd380848603192939373138260bf5b4c03905,Only check filters once for calls to getResourceMethod Before  for each resource method  no matter if rest-client or rest-server  each filter was checked if it called ResourceInfo#getResourceMethod. This can however be cached  since the set of filters does not change.
netty,netty,ad85f55793891a6473cb2f4f459c6c6e17d23c40,https://github.com/netty/netty/commit/ad85f55793891a6473cb2f4f459c6c6e17d23c40,Replace LinkedBlockingQueue with MPSCQueue in SingleThreadIoEventLoop (#15372)  Motivation:  Netty previously used MpscQueue as the taskQueue implementation in EpollEventLoop  KQueueEventLoop  and NioEventLoop. However  these are now deprecated. To ensure consistent performance  I override SingleThreadEventLoop.newTaskQueue to return an MpscQueue  This also helps avoid potential deadlocks when the EventLoop is used as a virtual thread scheduler.  For example  thread A calls submit() and acquires the putLock of a blocking queue. Meanwhile  the EventLoop-vt also calls submit()  but gets blocked trying to acquire the same lock and parks. The EventLoop itself later calls submit() and also parks. When thread A releases the putLock  it attempts to wake up the EventLoop-vt  but the EventLoop is already parked leading to a deadlock.  Modification:  Replace LinkedBlockingQueue with MPSCQueue in SingleThreadIoEventLoop  Result:  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
apache,camel,25e98faea7b18d5e0114b7686a3f7bd9d00fba79,https://github.com/apache/camel/commit/25e98faea7b18d5e0114b7686a3f7bd9d00fba79,CAMEL-21664: avoid unnecessary type cache miss
vespa-engine,vespa,ea6e15596e71d7993d9fbeae842a9c7fdbdd7c01,https://github.com/vespa-engine/vespa/commit/ea6e15596e71d7993d9fbeae842a9c7fdbdd7c01,optimize byte array copy
apache,hive,b7a3e8b87d909edd7fc4f939ff87bbadddd61c06,https://github.com/apache/hive/commit/b7a3e8b87d909edd7fc4f939ff87bbadddd61c06,HIVE-28675: Maximize the removal of redundant columns from GROUP BY clauses (Stamatis Zampetakis reviewed by Soumyakanti Das  Ramesh Kumar)  Enhance HiveRelFieldTrimmer to remove the maximum number of redundant columns from the GROUP BY clause.  The optimization has the following benefits: 1. Generate more efficient plans by pruning as many columns as possible (less CPU/IO/network cost). 2. Avoid missing optimization opportunities by examining all candidates.  Close apache/hive#5586
apache,iotdb,a54573a2afbe295ef218bcd910bb7354415e2f2d,https://github.com/apache/iotdb/commit/a54573a2afbe295ef218bcd910bb7354415e2f2d,Use DataNodeDevicePathCache when insert by sql (#14662)
google,guava,b3bb29a54b8f13d6f6630b6cb929867adbf6b9a0,https://github.com/google/guava/commit/b3bb29a54b8f13d6f6630b6cb929867adbf6b9a0,Make `UnsignedBytes.lexicographicalComparator()` use `Arrays.compareUnsigned` when it's available.  This provides another [alternative to using `Unsafe`](https://github.com/google/guava/issues/6806).  And port the benchmark to JMH  which for now means making it Google-internal. (Not that we have our _Caliper_ benchmarks actually _running_ externally  either  IIRC.)  The benchmarks suggest that the old  `Unsafe`-based implementation is faster up to 64 elements or so but that it's a matter of only about a nanosecond. The new implementation pulls ahead for larger arrays  including an advantage of about 5-10 ns for 1024 elements.  For now  I've included this implementation only in the JRE flavor of Guava. We could include it in the Android flavor  too  to see if it helps [under API Level 33+](https://developer.android.com/reference/java/util/Arrays#compareUnsigned(byte[] %20byte[])). But we really would want to do yet more benchmarking for that.  RELNOTES=n/a PiperOrigin-RevId: 714130759
jplag,JPlag,18b287bd20690ab75fa421e3b9d609caeaed2580,https://github.com/jplag/JPlag/commit/18b287bd20690ab75fa421e3b9d609caeaed2580,Unbox integer for loop.
apache,parquet-java,5468116c19a47041faec64a0b513e536aa922fc7,https://github.com/apache/parquet-java/commit/5468116c19a47041faec64a0b513e536aa922fc7,GH-3156: Enable vectored IO by default (#3155)
apache,flink-cdc,602abde36ffae5a7395b922e7ac50db6214a3df3,https://github.com/apache/flink-cdc/commit/602abde36ffae5a7395b922e7ac50db6214a3df3,[FLINK-37278][cdc-runtime] Optimize regular schema evolution topology's performance  This closes  #3912.
opensolon,solon,d6e0dbc568c8a73169467dfd675c0a6c1c7592f1,https://github.com/opensolon/solon/commit/d6e0dbc568c8a73169467dfd675c0a6c1c7592f1,优化 solon-expression 三元表达式处理
netty,netty,028d055fda0ccca6795b11deafd58b3391757c0c,https://github.com/netty/netty/commit/028d055fda0ccca6795b11deafd58b3391757c0c,IoUring: Use IORING_POLL_ADD_MULTI when possible (#14845)  Motivation:  If we need to use POLLIN (no buffer ring configured) we should at least try to use IORING_POLL_ADD_MULTI to reduce overhead  Modifications:  Use IORING_POLL_ADD_MULTI if possible  Result:  Less overhead if we cant use a buffer ring
apache,hudi,a79b10f5d29658c82b4416fdbebf48d25114cd9a,https://github.com/apache/hudi/commit/a79b10f5d29658c82b4416fdbebf48d25114cd9a,[HUDI-8769] Limit instantsToArchive to avoid expensive locks blocking ingestion and table services (#12491)
jenkinsci,jenkins,0878f538c22e81fdb2be46f4e0dcbf550bff95d6,https://github.com/jenkinsci/jenkins/commit/0878f538c22e81fdb2be46f4e0dcbf550bff95d6,[JENKINS-75152] Update hudson.model.Queue for long buildableItem queue cycle acceleration (#10234)
eclipse-vertx,vert.x,56cac9a482dc5b62c405330ad868cf363574b67f,https://github.com/eclipse-vertx/vert.x/commit/56cac9a482dc5b62c405330ad868cf363574b67f,Use immutable http headers response caching in benchmark and soft references for caching instead of weak
trinodb,trino,6c52253c3411d2e117e2f97cf4cc3f57a43501bb,https://github.com/trinodb/trino/commit/6c52253c3411d2e117e2f97cf4cc3f57a43501bb,Fix S3InputStream's handling of large skips  When the skip(n) method is called the MAX_SKIP_BYTES check is skipped  resulting in the call potentially blocking for a long time.  Instead of delegating to the underlying stream  set the nextReadPosition value. This allows the next read to decide if it is best to keep the existing s3 object stream or open a new one.  This behavior matches the implementations for Azure and GCS.
jetty,jetty.project,ac59ec30daaede0ccfe91a7ea91321fe44acdd45,https://github.com/jetty/jetty.project/commit/ac59ec30daaede0ccfe91a7ea91321fe44acdd45,#12985 replace Scheduler with CyclicTimeout to avoid repeatedly scheduling timeout tasks  Signed-off-by: Ludovic Orban <lorban@bitronix.be>
apache,ignite,fda9dbda7e62e9b2eef85caeb0288b01a252d7ff,https://github.com/apache/ignite/commit/fda9dbda7e62e9b2eef85caeb0288b01a252d7ff,IGNITE-24291 Calcite reuse Row for non-storing accumulators (#11827)
magefree,mage,99ca1e60296dcdbf44623c66dcad952939322db4,https://github.com/magefree/mage/commit/99ca1e60296dcdbf44623c66dcad952939322db4,AI: improved performance and server stability in games with "choose name" effects (related to #11285)
crate,crate,570f4772726a5a5b71bc04203dfd71406af04375,https://github.com/crate/crate/commit/570f4772726a5a5b71bc04203dfd71406af04375,Extend filter on project set push down to work on subscripts  The rule to push filters on the standalone outputs of a `ProjectSet` operator didn't work for cases like `obj['x'] = 1` where the standalone output was `obj`.  Closes https://github.com/crate/crate/issues/17183
PBH-BTN,PeerBanHelper,6193b4584c723ca45758b59e5371db2e24c99b54,https://github.com/PBH-BTN/PeerBanHelper/commit/6193b4584c723ca45758b59e5371db2e24c99b54,使用内存映射文件（MEMORY_MAPPED）优化 SQLite 性能，并设置内存缓存
locationtech,jts,aa755818e9299da4403c9fe4bcb7e998d79dca21,https://github.com/locationtech/jts/commit/aa755818e9299da4403c9fe4bcb7e998d79dca21,Change to use MathUtil.hypot (#1112)
apache,hudi,133c2a5befc50602a2c0fd25bba5668190bf7774,https://github.com/apache/hudi/commit/133c2a5befc50602a2c0fd25bba5668190bf7774,[MINOR] Optimizing metadata getter for metadata table (#13298)  * Optimizing metadata getter for metadata table * Minor code cleanup  ---------  Co-authored-by: vinoth chandar <vinoth@apache.org>
quarkusio,quarkus,3b166b7d02bbd7a51c2f65c0e6de42ace5ae8ace,https://github.com/quarkusio/quarkus/commit/3b166b7d02bbd7a51c2f65c0e6de42ace5ae8ace,Remove regex from hot path in micrometer
prestodb,presto,2f7f08f720361b305f19b54a1b15c247cc85417b,https://github.com/prestodb/presto/commit/2f7f08f720361b305f19b54a1b15c247cc85417b,Extend max_by/min_by optimization to mix of array/map/scalar type
tencentmusic,supersonic,f899d23b6320719b29c71cf1a894903ea1168e53,https://github.com/tencentmusic/supersonic/commit/f899d23b6320719b29c71cf1a894903ea1168e53,add new chat corrector  在助理最终执行物理SQL前，加入一步LLM优化性能功能
netty,netty,608fe79b5c944111ce2c4ce9bf4edfa0108f5634,https://github.com/netty/netty/commit/608fe79b5c944111ce2c4ce9bf4edfa0108f5634,Improve check in PoolThreadCache.cache method (#15464)  Motivation:  Avoid unnecessary subtraction operation.  Modification:  Replaced `> `operator with `>=` to avoid subtract operation.  Result:  -1 one operation in condition  easier to read.
hapifhir,hapi-fhir,e561abedd64d5a30033b8be17a0c49b0b925e702,https://github.com/hapifhir/hapi-fhir/commit/e561abedd64d5a30033b8be17a0c49b0b925e702,Add index for ResourceHistoryTable.srcUri  (#7084)  * Add index  * changelog  * fix changelog  * Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/8_2_0/6945-add-res-ver-source-index.yaml  Co-authored-by: Michael Buckley <michaelabuckley@gmail.com>  ---------  Co-authored-by: Michael Buckley <michaelabuckley@gmail.com>
camunda,camunda,66a6a943e37cfb4fb6e4975cfa8701d1f0395ef3,https://github.com/camunda/camunda/commit/66a6a943e37cfb4fb6e4975cfa8701d1f0395ef3,fix: cache tree path values of adhoc subprocess  related to #29404
vespa-engine,vespa,3e3db0ff2147987badbef2d651d8d2612535a04c,https://github.com/vespa-engine/vespa/commit/3e3db0ff2147987badbef2d651d8d2612535a04c,First step in changing MMAP madvise default to SEQUENTIAL for search.  Benchmarking of lexical search using a Wikipedia dataset has shown that madvise SEQUENTIAL for disk index posting list files results in lower 99 percentile query latencies and better utilization of the I/O subsystem.  Rollout is complete for node flavors with slow disks.
keycloak,keycloak,e68e43cbc873a2f2687bca67675a61cb4968ecaa,https://github.com/keycloak/keycloak/commit/e68e43cbc873a2f2687bca67675a61cb4968ecaa,Cache resource names associated to policies to improve partial evaluation  Closes #38837  Signed-off-by: Pedro Igor <pigor.craveiro@gmail.com>
camunda,camunda,18a73e46433806806a942db06c4a2d114a3c3900,https://github.com/camunda/camunda/commit/18a73e46433806806a942db06c4a2d114a3c3900,perf: correctly declare number of properties  This helps avoid unnecessary allocations and memory copies for the declared properties.  Co-authored-by: Dmitriy Melnychuk <dmitriy.melnychuk@capgemini.com> Co-authored-by: Remco <remco@westerhoud.nl> Co-authored-by: Stephan Epping <stephan.epping@camunda.com> Co-authored-by: berkaycanbc <berkay.can@camunda.com>
quarkusio,quarkus,1087db8b78773d2d19efee5d2435607f59e6a0e1,https://github.com/quarkusio/quarkus/commit/1087db8b78773d2d19efee5d2435607f59e6a0e1,Initialize only one ObjectMapper in Analytics
netty,netty,bfe726ba3ded6ff9109f55a4f513e872159baa48,https://github.com/netty/netty/commit/bfe726ba3ded6ff9109f55a4f513e872159baa48,Precalculate TOKEN_CHARS_HIGH and TOKEN_CHARS_LOW in HttpUtil (#15261)  Motivation:  No need to init `HttpUtil.BitSet128` class and call multiple static methods while we can precalculate `TOKEN_CHARS_HIGH` and `TOKEN_CHARS_LOW` upfront. I left the previous code in comments  so it was clear where these values came from.  Inspired by https://github.com/netty/netty/issues/15201  Modification:  Replaced runtime calculations with precalculated constants.  Result:  Saves some time on the netty initialization phase.
pinpoint-apm,pinpoint,726d728bb86aa08b06a5b32f1eadde2557fe7aa8,https://github.com/pinpoint-apm/pinpoint/commit/726d728bb86aa08b06a5b32f1eadde2557fe7aa8,[#12159] Store elapsed time directly as a column value instead of using a variable
thingsboard,thingsboard,c738d3a906cfe1627d9c9befad688fa1068b80a5,https://github.com/thingsboard/thingsboard/commit/c738d3a906cfe1627d9c9befad688fa1068b80a5,AI rule node: return early optimization in `deleteByTenantId()`
apache,iotdb,2459e5211ce7ded5a355ff6d96abbdcda10700f9,https://github.com/apache/iotdb/commit/2459e5211ce7ded5a355ff6d96abbdcda10700f9,Change sort_buffer_size_in_bytes default value
camunda,camunda,781dadad6afa1d617373ff7127666464e92c8b45,https://github.com/camunda/camunda/commit/781dadad6afa1d617373ff7127666464e92c8b45,refactor: simplify `VariableDocumentState` persistence by removing extra mapping  Revised the approach to persisting `VariableDocumentState` by eliminating the separate column family that mapped `scopeKey` to `variableDocumentKey`. Instead  now `VariableDocumentState` (including both `variableDocumentKey` and `variableDocumentRecord`) is stored directly by `scopeKey`.  This reduces the number of lookups needed to retrieve and remove a `VariableDocumentRecord` with a key.
apache,paimon,2e57c594d5e4adb9529de07637d6090e28bdb47b,https://github.com/apache/paimon/commit/2e57c594d5e4adb9529de07637d6090e28bdb47b,[core] Optimize fileFormat discovery and avoid creating fileFormat (#4782)
camunda,camunda,d838e7c049e183b57f30d98e39f0eb0ebd237751,https://github.com/camunda/camunda/commit/d838e7c049e183b57f30d98e39f0eb0ebd237751,feat: when partition is bootstrapped do not subscribe to events if already done
vespa-engine,vespa,a67bfcd314e480e11c0b688033177cee0cc45ac9,https://github.com/vespa-engine/vespa/commit/a67bfcd314e480e11c0b688033177cee0cc45ac9,Merge pull request #33498 from vespa-engine/andreer/optimize-byte-array-copy  optimize byte array copy
YunaiV,ruoyi-vue-pro,12170402e236ebf2ebd52d180502659c4a753a19,https://github.com/YunaiV/ruoyi-vue-pro/commit/12170402e236ebf2ebd52d180502659c4a753a19,【性能优化】循环中减少不必要的查询 update r/yudao/module/promotion/service/coupon/CouponServiceImpl.java.  Signed-off-by: 山野羡民 <liyujiang_tk@yeah.net>
redisson,redisson,2eba72ff70e9d4592b480cdcf001a6ad89e66ca4,https://github.com/redisson/redisson/commit/2eba72ff70e9d4592b480cdcf001a6ad89e66ca4,Merge pull request #6657 from lyrric/optimize-removeExpiredEntries  Optimize AbstractCacheMap.removeExpiredEntries  avoid useless iterate.
apache,rocketmq,34c32d8c8081f09f7c87cbd79534162eb0a08a0f,https://github.com/apache/rocketmq/commit/34c32d8c8081f09f7c87cbd79534162eb0a08a0f,[ISSUE #9259] Remove duplicate flushing operation of StoreCheckpoint(#9260)
trinodb,trino,5beff109f3e32722acb092c53d1f76155c6d3990,https://github.com/trinodb/trino/commit/5beff109f3e32722acb092c53d1f76155c6d3990,Use AppendOnlyVariableWidthData in FlatSet
apache,iotdb,2c6e00f1f1e89a311f44090e191a61fd7e32a9fc,https://github.com/apache/iotdb/commit/2c6e00f1f1e89a311f44090e191a61fd7e32a9fc,Support extract value filter push down
quarkusio,quarkus,78ff70133e7b163c9789be8ee05e16fe8fa1b621,https://github.com/quarkusio/quarkus/commit/78ff70133e7b163c9789be8ee05e16fe8fa1b621,Use StringBuilder instead of indyfied concat  This is done because the latter has a very small startup overhead (which one can see in a CPU time flamegraph obtained from a startup of a REST application)
trinodb,trino,c92a2ba2f8c147d833395730d9721f15e7b6140e,https://github.com/trinodb/trino/commit/c92a2ba2f8c147d833395730d9721f15e7b6140e,Move Iceberg reader early exit checks to start of method
apache,paimon,d9a31da7d01e911be4830ef874e40a20121fc5cc,https://github.com/apache/paimon/commit/d9a31da7d01e911be4830ef874e40a20121fc5cc,[core] Add withLevel method in SnapshotReader to optimize RO table scanning (#5412)
apache,iotdb,cc0a99a456f818dc189cb5c3175bf42a1fe94036,https://github.com/apache/iotdb/commit/cc0a99a456f818dc189cb5c3175bf42a1fe94036,Pipe: Optimize realtime performace when pipe starts after long time stop with heavy data backlog (#15048) (#15057)
vespa-engine,vespa,fb4077cf70e9df3a5c1964dad507ef4b18811380,https://github.com/vespa-engine/vespa/commit/fb4077cf70e9df3a5c1964dad507ef4b18811380,Simplify reference counting of HTTP requests  Take reference once created and once after request is completed
jenkinsci,jenkins,d31269ac1eaccb4012e665d00e73164d9d924a47,https://github.com/jenkinsci/jenkins/commit/d31269ac1eaccb4012e665d00e73164d9d924a47,use map instead of list to cache blockage reasons
trinodb,trino,17a9dfb3918cf8feeff7e4562c963ecb1f8c52a3,https://github.com/trinodb/trino/commit/17a9dfb3918cf8feeff7e4562c963ecb1f8c52a3,Parallelize Hive views retrieval  This is the same approach as in 6285a6d9ca93d210a6233f7d1fbf54b09fe58415
tencentmusic,supersonic,f7fce0217f677c223cfc16fabe18be075829a031,https://github.com/tencentmusic/supersonic/commit/f7fce0217f677c223cfc16fabe18be075829a031,[improvement][chat] Use a generic thread pool to perform concurrent mapping. (#1965)
jwtk,jjwt,f1fde231903c3431f37873a4ba8dbe0a61d6fa8b,https://github.com/jwtk/jjwt/commit/f1fde231903c3431f37873a4ba8dbe0a61d6fa8b,Ensured *Builder instances are no longer created with reflection  (#989)  Ensured *Builder instances are no longer created with reflection using `Classes.newInstance`.  Instead  `Classes.newInstance` is used to create static/thread-safe Supplier singletons when the api module is loaded  and those singletons will directly instantiate *Builder instances at runtime using the `new` keyword`.  Resolves #988.
thingsboard,thingsboard,bf46d974ab8b07f9a27e11277cd5758668d41e77,https://github.com/thingsboard/thingsboard/commit/bf46d974ab8b07f9a27e11277cd5758668d41e77,Remove duplicated indexes
apache,pulsar,397b0211cf1c9069d80daa691ca530e09bc37999,https://github.com/apache/pulsar/commit/397b0211cf1c9069d80daa691ca530e09bc37999,[improve][broker] Enable concurrent processing of pending read Entries to avoid duplicate Reads (#24346)
apache,nifi,ca517da19e95dc86c4f4ae7837e5ad66ca04aec2,https://github.com/apache/nifi/commit/ca517da19e95dc86c4f4ae7837e5ad66ca04aec2,NIFI-14255 Replaced use of List.stream() with for loops in SimpleRecordSchema (#9708)  - Added a lazily-initialized member variable for use in isRecursive  Signed-off-by: David Handermann <exceptionfactory@apache.org>
graphhopper,graphhopper,e927482ce0abbae41ec974c77237b25a2e26dd09,https://github.com/graphhopper/graphhopper/commit/e927482ce0abbae41ec974c77237b25a2e26dd09,Switch to fast evaluation (#3140)
apache,hbase,13f174b1d0926243539331774afb0764766387e4,https://github.com/apache/hbase/commit/13f174b1d0926243539331774afb0764766387e4,HBASE-29135: ZStandard decompression can operate directly on ByteBuffs (#6708)  Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
DataLinkDC,dinky,6bde30ee4c32e43601bc5289c7b12a222a7a860f,https://github.com/DataLinkDC/dinky/commit/6bde30ee4c32e43601bc5289c7b12a222a7a860f,[Optimization-4315][admin] Optimize WebSocket for asynchronous sending (#4445)
dataease,dataease,2842339b116a9ed655f05b24769c52e59bf7558e,https://github.com/dataease/dataease/commit/2842339b116a9ed655f05b24769c52e59bf7558e,refactor(仪表板、数据大屏): 增加仪表板大屏查询索引同时过滤非必要的图表信息以增加查询速度
trinodb,trino,e9b2e906e6d6c4dd4152ed2b661b912a0318ddde,https://github.com/trinodb/trino/commit/e9b2e906e6d6c4dd4152ed2b661b912a0318ddde,Presize PageProcessorMetrics builder
trinodb,trino,f2d497b5b66966f543ebf6b1d0e2ab060e15176c,https://github.com/trinodb/trino/commit/f2d497b5b66966f543ebf6b1d0e2ab060e15176c,Disable extra compression for segment data  When going through the coordinator or the worker as a proxy we don't want to apply Jetty-based gzip compression to segment data which can be compressed on it's own. This just adds an overhead without any benefits.
chinabugotech,hutool,05e68b96830cf169bdc23276a62873841a6f7afc,https://github.com/chinabugotech/hutool/commit/05e68b96830cf169bdc23276a62873841a6f7afc,Merge pull request #3859 from ghjdegithub/patch-1  [bug修复] Update ObjectMapper.java 删除重复调用StrUtil.trim(source)代码
quarkusio,quarkus,8e6ca6a4945b658e59787e49790c5e940055fc0d,https://github.com/quarkusio/quarkus/commit/8e6ca6a4945b658e59787e49790c5e940055fc0d,Merge pull request #46873 from gsmet/reduce-logging-allocations  Reduce debug logging allocations in MongoDnsClient
raphw,byte-buddy,efbd6cb453a8c37ec610bbdaeb8c382c0eaac139,https://github.com/raphw/byte-buddy/commit/efbd6cb453a8c37ec610bbdaeb8c382c0eaac139,Remove debug output.
vespa-engine,vespa,fcff9dbf315169723ff4987aa00bdb7d777a0cdb,https://github.com/vespa-engine/vespa/commit/fcff9dbf315169723ff4987aa00bdb7d777a0cdb,Merge pull request #33373 from vespa-engine/hmusum/increase-thread-count-for-file-server  Use more threads for FileServer thread pool
netty,netty,f17fb0547575fb0adba3bd2f0ccadf025c1d7d4b,https://github.com/netty/netty/commit/f17fb0547575fb0adba3bd2f0ccadf025c1d7d4b,IoUring: Create ring with IORING_SETUP_SINGLE_ISSUER and IORING_SETUP_DEFER_TASKRUN to reduce overhead (#14699)  Motivation:  We should create our ring with IORING_SETUP_SINGLE_ISSUER and IORING_SETUP_DEFER_TASKRUN to ensure we can make progress as fast as possible. This improves performance quite a bit:  See https://manpages.debian.org/unstable/liburing-dev/io_uring_setup.2.en.html#IORING_SETUP_DEFER_TASKRUN  Modifications:  - Create ring with IORING_SETUP_SINGLE_ISSUER and IORING_SETUP_DEFER_TASKRUN (and also IORING_SETUP_R_DISABLED to be able to select the correct thread)  Result:  Much faster handling of a lot of concurrent connections (while still maintain the same performance with small number).  Before: ``` Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1000 connections. Total data sent:     47317.6 MiB (49616085120 bytes) Total data received: 47430.3 MiB (49734300462 bytes) Bandwidth per channel: 26.492⇅ Mbps (3311.5 kBps) Aggregate bandwidth: 13261.733↓  13230.211↑ Mbps Packet rate estimate: 1137136.1↓  1139280.4↑ (11↓  45↑ TCP MSS/op) Test duration: 30.0017 s. ```  After: ``` Destination: [127.0.0.1]:8088 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1000 connections. Total data sent:     80425.0 MiB (84331771459 bytes) Total data received: 80513.6 MiB (84424659415 bytes) Bandwidth per channel: 44.998⇅ Mbps (5624.7 kBps) Aggregate bandwidth: 22511.278↓  22486.510↑ Mbps Packet rate estimate: 2077374.7↓  1936466.0↑ (11↓  45↑ TCP MSS/op) ```
debezium,debezium,ae6995fa9abee66a4258b46a0cc34ae6859f9eb4,https://github.com/debezium/debezium/commit/ae6995fa9abee66a4258b46a0cc34ae6859f9eb4,DBZ-9098 Reduce calls to getEndOffset during kafka schema history recovery
apache,hertzbeat,b7bd9eb3056be6f22db049d0abfb32d62e39ea27,https://github.com/apache/hertzbeat/commit/b7bd9eb3056be6f22db049d0abfb32d62e39ea27,[improve] support reuse jdbc connection switch (#3101)  Signed-off-by: tomsun28 <tomsun28@outlook.com> Co-authored-by: aias00 <rokkki@163.com>
apache,rocketmq,5c34a59cd90074a544525de6609f8ef400dfe2b3,https://github.com/apache/rocketmq/commit/5c34a59cd90074a544525de6609f8ef400dfe2b3,[ISSUE #9184] Optimize QueueLockManager#tryLock method (#9185)
apache,dolphinscheduler,2ed38213bc62c34fec6c0859f5ef104b1dd50a91,https://github.com/apache/dolphinscheduler/commit/2ed38213bc62c34fec6c0859f5ef104b1dd50a91,[Improvement-17302][Alert] simplify double handling in ExcelUtils (#17303)  Co-authored-by: xiangzihao <460888207@qq.com>
datastax,jvector,7b78c9e228c0e5df258abff7ca30ccae6c806c47,https://github.com/datastax/jvector/commit/7b78c9e228c0e5df258abff7ca30ccae6c806c47,Hand-unroll the SIMD dot product loop (#380)  * Improve SIMD vector dot product and its test
itext,itext-java,71451319ebb9463d2c577bdaa89e4958e4ca2dd8,https://github.com/itext/itext-java/commit/71451319ebb9463d2c577bdaa89e4958e4ca2dd8,Implement more optimized version of checking if kid is flushed  DEVSIX-8836
alibaba,fastjson2,43550f5616f64146c59e208e32871b0d3e0e3fb8,https://github.com/alibaba/fastjson2/commit/43550f5616f64146c59e208e32871b0d3e0e3fb8,use long as ByteVector64
AxonFramework,AxonFramework,e594dfd2e75be7d27aac94a8d38030da88c052c9,https://github.com/AxonFramework/AxonFramework/commit/e594dfd2e75be7d27aac94a8d38030da88c052c9,Added caching for unknown classes  Resolving classes based on a name that did not yield any results was very slow. This meant that processing a stream of event where the majority of events aren't represented as classes was slower than a case where the classes are available on the class path.  (cherry picked from commit a1d6ed3bf3c54048cbb8d9350bbc08e2a6c97c0e)
prometheus,client_java,9043b47dd8c7dfa2af5fb1d28b988ec85b896333,https://github.com/prometheus/client_java/commit/9043b47dd8c7dfa2af5fb1d28b988ec85b896333,Use buffered writer (#1241)  Without buffered reader  every single output character through given stack goes to "StreamEncoder public void write(int c)" and single element char array is created. It makes pressure to GC and CPU BufferedReader reduce the pressure  write:130  StreamEncoder (sun.nio.cs) write:201  OutputStreamWriter (java.io) writeMetadata:338  PrometheusTextFormatWriter (io.prometheus.metrics.expositionformats) writeGauge:129  PrometheusTextFormatWriter (io.prometheus.metrics.expositionformats) write:68  PrometheusTextFormatWriter (io.prometheus.metrics.expositionformats) write:48  PrometheusOutputFormat$1 (org.springframework.boot.actuate.metrics.export.prometheus) scrape:87  PrometheusScrapeEndpoint (org.springframework.boot.actuate.metrics.export.prometheus)  StreamEncoder public void write(int c) throws IOException { char[] cbuf = new char[1]; cbuf[0] = (char) c;  Signed-off-by: Michal Domagala <michaldo@github.io> Co-authored-by: Michal Domagala <michaldo@github.io>
camunda,camunda,fe4706154b4c5afcf9304097bbbdb80397ec8d6f,https://github.com/camunda/camunda/commit/fe4706154b4c5afcf9304097bbbdb80397ec8d6f,feat: optimize to only validate optimize indexes with OS
cryptomator,cryptomator,fc709eb700fb36d74dad75b6494d40c561343b1d,https://github.com/cryptomator/cryptomator/commit/fc709eb700fb36d74dad75b6494d40c561343b1d,use caffeine for building a cache
prestodb,presto,a05bc683f68acfceb1b8741f3b04d4c34868ffce,https://github.com/prestodb/presto/commit/a05bc683f68acfceb1b8741f3b04d4c34868ffce,Enable subfield pushdown for map_subset function
apache,flink,e299645bf5c24028392629ecba48b9168088e86e,https://github.com/apache/flink/commit/e299645bf5c24028392629ecba48b9168088e86e,[FLINK-37021][state/forst] Support reusing files in LEGACY recovery mode. (#26142)
apache,rocketmq,e0db6545b00770e8f41bf55cfb560ac79f9a17c9,https://github.com/apache/rocketmq/commit/e0db6545b00770e8f41bf55cfb560ac79f9a17c9,[ISSUE #9112] Speedup revive scan in Pop Consumption and support server side reset offset (#9113)
camunda,camunda,2de91b9de2ed46dd62340192d3f799d4272b05a7,https://github.com/camunda/camunda/commit/2de91b9de2ed46dd62340192d3f799d4272b05a7,Wrap the GroupRecord instead of making a full copy before insertion (#25898)  ## Description  <!-- Describe the goal and purpose of this PR. -->  Wrapping is more performant than copying. In this place we don't need a full copy as we immediately insert it in our ColumnFamily.  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria)  ## Related issues  relates to https://github.com/camunda/camunda/pull/25635#pullrequestreview-2481712329
pac4j,pac4j,1a279df4bf0c2031c91906536c48d743c317d2fb,https://github.com/pac4j/pac4j/commit/1a279df4bf0c2031c91906536c48d743c317d2fb,Resolve file-system sp metadata once w/o reloads (#3369)  * resolve file-system sp metadata once w/o reloads  * resolve file-system sp metadata once w/o reloads  * resolve file-system sp metadata once w/o reloads
eclipse-vertx,vert.x,215fe1eda40946e007986dea46c898b78211afe5,https://github.com/eclipse-vertx/vert.x/commit/215fe1eda40946e007986dea46c898b78211afe5,Reduce HeadersMultiMap#contains method size for better inlining
apache,paimon,8157be98e3e43e7fa95b3f52c3645823b7b3a569,https://github.com/apache/paimon/commit/8157be98e3e43e7fa95b3f52c3645823b7b3a569,[common] Using a faster deserialization method in RoaringBitmap32 (#4765)
debezium,debezium,dbe575830c329ae306f1eff456fa3c84132f6d9d,https://github.com/debezium/debezium/commit/dbe575830c329ae306f1eff456fa3c84132f6d9d,DBZ-8860 Move eldest scn calculation into transaction cache
liquibase,liquibase,a4da538d7d9970deae977ff4fd01bcbf1b254836,https://github.com/liquibase/liquibase/commit/a4da538d7d9970deae977ff4fd01bcbf1b254836,[DAT-18890] Copy files using copyLarge. Format file.
camunda,camunda,c34066fc76ca0056378a929f7b1f1a9ed78f48cf,https://github.com/camunda/camunda/commit/c34066fc76ca0056378a929f7b1f1a9ed78f48cf,feat: remove a limiter on appends based on avg append latency  The condition (now() - (appendLatency.mean() / maxAppendsPerMember) >= appendTimeStart) may be superfluous as we already limit the number of inflight requests to maxAppendsPerMember.  Looking into the implementation of DescriptiveStatistics class it's not been implemented with performance in mind  as it create a lot of temporary double[] instead of using a fixed size circular buffer.
apache,pdfbox,09dbd9c68822401be8398f5a497ad767f375c69a,https://github.com/apache/pdfbox/commit/09dbd9c68822401be8398f5a497ad767f375c69a,PDFBOX-6000: optimize if-clause as proposed by Tilman  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925464 13f79535-47bb-0310-9956-ffa450edef68
apache,maven,93d36155fbf94a605815ba049387875fa08a1e5e,https://github.com/apache/maven/commit/93d36155fbf94a605815ba049387875fa08a1e5e,Optimize validation performance with lazy SourceHint evaluation (#2518)  Replace SourceHint with Supplier<String> throughout DefaultModelValidator to eliminate expensive string formatting when validation passes.  Problem: As identified in PR #2483  SourceHint.dependencyManagementKey() is called dozens of times per dependency with expensive string concatenation performed even when validation succeeds. Results are rarely used since most validations pass  causing performance degradation for large projects.  Solution: Implement comprehensive lazy evaluation by replacing SourceHint with Supplier<String> throughout the entire validation system. SourceHint is only computed when validation actually fails.  Changes: - Updated 11 validation methods to use Supplier<String>: validateBoolean  validateEnum  validateVersion  validateBannedCharacters  validateStringNotEmpty  validateNotNull  validateCoordinatesId  validateProfileId  validateCoordinatesIdWithWildcards  validate20ProperSnapshotVersion  validate20PluginVersion - Modified addViolation to accept Supplier<String> with lazy evaluation - Converted 95+ call sites to use lambda expressions - Removed duplicate methods for clean  consistent API - Refined string formatting in dependencyManagementKey for better performance  Performance Benefits: - Eliminates expensive SourceHint computations when validation passes - Performance improvement scales with project size and dependency count - Zero overhead for successful validations (the common case) - Significant speedup for large projects with many dependencies  Quality Assurance: - All existing tests pass - Build succeeds with no warnings - Spotless formatted and checkstyle compliant - Zero functional changes  only performance optimization - Maintains exact same error message format  Example transformation: Before: validateBoolean(...  SourceHint.dependencyManagementKey(d)  ...) After:  validateBoolean(...  () -> SourceHint.dependencyManagementKey(d).toString()  ...)  This addresses the performance concern raised in PR #2483 where expensive SourceHint computations were performed unnecessarily during validation.
YunaiV,ruoyi-vue-pro,a364153d4a9a34375151d8527a5ad54ed60f6c22,https://github.com/YunaiV/ruoyi-vue-pro/commit/a364153d4a9a34375151d8527a5ad54ed60f6c22,【功能优化】IoT：device 和 thingmodel 读取增加缓存
camunda,camunda,1b4aa95c73d83b31b35cdd380e4cd74261b134dc,https://github.com/camunda/camunda/commit/1b4aa95c73d83b31b35cdd380e4cd74261b134dc,SchemaManager: Parallelize index creation (#28433)  ## Description  To make index and template creation quicker  as suggested by @entangled90.  For that we use virtual threads for the creation of indices and templates. This is to make bootstrapping quicker  especially for tests quite useful. We can see a test reduction (will post results tomorrow).  > [!Note] > > @npepinpe mentioned it might make more sense  to use ES async client  but for index creations I did find any async method. Open for any hints.  ## Related issues  closes #
apache,pinot,12e6c885d820511c28acd0cce0ca2ccf0ef39738,https://github.com/apache/pinot/commit/12e6c885d820511c28acd0cce0ca2ccf0ef39738,Remove all calls to System.gc() in PerQueryCPUMemAccountantFactory (#16374)
quarkusio,quarkus,be0bb1f2a0430d357960faf199b1e672af0cf2e0,https://github.com/quarkusio/quarkus/commit/be0bb1f2a0430d357960faf199b1e672af0cf2e0,Quarkus REST: do not go through the response builder
apache,pinot,9b9606898872105341b5a218c81a61f8d60d76e4,https://github.com/apache/pinot/commit/9b9606898872105341b5a218c81a61f8d60d76e4,Optimize MergeEqInFilterOptimizer by reducing the hash computation of Expression (#14732)
pinpoint-apm,pinpoint,5d2ce944db7c5d412df658f006570dd82394e76d,https://github.com/pinpoint-apm/pinpoint/commit/5d2ce944db7c5d412df658f006570dd82394e76d,[#12235] Improve windowRangeCount for TimeWindows to be precomputed
camunda,camunda,d922905acbc13991967787159e097d1ba720a2c8,https://github.com/camunda/camunda/commit/d922905acbc13991967787159e097d1ba720a2c8,
SPLWare,esProc,2bc90b65e4602f931cd9e02c5d0b2ba2f69eb679,https://github.com/SPLWare/esProc/commit/2bc90b65e4602f931cd9e02c5d0b2ba2f69eb679,Do optimization.
prestodb,presto,a120690bc699b7227711af394bf2f1ade789327f,https://github.com/prestodb/presto/commit/a120690bc699b7227711af394bf2f1ade789327f,Optimise SymlinkTextInputFormat Reader
apache,paimon,9c07e10902f2eef665316cd06766bce1daf29f49,https://github.com/apache/paimon/commit/9c07e10902f2eef665316cd06766bce1daf29f49,[core] Optimize Flink Orphan Files to do more works in distributed  (#5257)
netty,netty,ec465e75136a28f65f69966c64ea164c23912b9d,https://github.com/netty/netty/commit/ec465e75136a28f65f69966c64ea164c23912b9d,IoUring: Cache the result of ioUringProbe to speed up the initialization of IoUring (#15482)  Motivation:  We can cache the probe result to speed up initialization speed.  Modification:  - Cache the result of ioUringProbe to speed up the initialization of the io.netty.channel.uring.Native class.  Result:  Speed up the initialization of IoUring class initialization  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
SpigotMC,BungeeCord,a485d9f314017d4f537f477c7c4236cfcf1fd6a1,https://github.com/SpigotMC/BungeeCord/commit/a485d9f314017d4f537f477c7c4236cfcf1fd6a1,#3856: Do not decode Chat (TO_CLIENT)
trinodb,trino,79955ed683812b0b321795dbc07af946d114c35a,https://github.com/trinodb/trino/commit/79955ed683812b0b321795dbc07af946d114c35a,Reuse PagesIndexOrdering in OrderByOperator
alibaba,fastjson2,837ea1f87da207d69ab42c67622a2214853324a8,https://github.com/alibaba/fastjson2/commit/837ea1f87da207d69ab42c67622a2214853324a8,Speed up readUUID (#3266)  * optim readUUID  * bug fix
lealone,Lealone,e1e756e9980b4ada8c277e20d55434d7fb613cd4,https://github.com/lealone/Lealone/commit/e1e756e9980b4ada8c277e20d55434d7fb613cd4,输出Buffer个数到达指定值时要立刻批量写
apache,shardingsphere,dd3ee66539a422ea05aeb6aae6237d2c56b2297e,https://github.com/apache/shardingsphere/commit/dd3ee66539a422ea05aeb6aae6237d2c56b2297e,Optimize execution prepare engine for high frequency invocation (#35352)  - Add @HighFrequencyInvocation annotation to relevant classes - Improve data structure usage for better performance - Refactor method names for consistency and clarity
apache,cloudstack,8b092951cbd10880ca2bf33c8feedadd580d5268,https://github.com/apache/cloudstack/commit/8b092951cbd10880ca2bf33c8feedadd580d5268,prometheus: don't poll the same tag multiple times (#10450)
apache,paimon,43dff3a3799ae86de425021cfd99e269916c7421,https://github.com/apache/paimon/commit/43dff3a3799ae86de425021cfd99e269916c7421,[parquet] Support using file index result to filter row ranges (#4780)
quarkusio,quarkus,c65d7acb073e3b16466fcb077da5a393fcaf6a52,https://github.com/quarkusio/quarkus/commit/c65d7acb073e3b16466fcb077da5a393fcaf6a52,Otel optimizations I
apache,flink,9fe66715530e1cab4658e1e974141e3e6204cde6,https://github.com/apache/flink/commit/9fe66715530e1cab4658e1e974141e3e6204cde6,[FLINK-37720][table-planner] Enable sink reuse table optimizer by default and apply plan changes to existing test cases (#26503)
apache,pinot,3d6ca3fabc6c65473100917260466f6df009eb7b,https://github.com/apache/pinot/commit/3d6ca3fabc6c65473100917260466f6df009eb7b,Re-order Aggregation Optimizations (#15138)
mybatis,mybatis-3,f28e63acb62db52e5ab2cf320f8c7e201fbe6450,https://github.com/mybatis/mybatis-3/commit/f28e63acb62db52e5ab2cf320f8c7e201fbe6450,Use simpler/faster `SqlNode` implementation for empty nodes
langchain4j,langchain4j,911e8b6b3647f05a1995aae317be860c047866b0,https://github.com/langchain4j/langchain4j/commit/911e8b6b3647f05a1995aae317be860c047866b0,Feat: Introduce Executor for improved concurrency (#3297)  <!-- Thank you so much for your contribution!  Please fill in all the sections below. Please open the PR as a draft initially. Once it is reviewed and approved  we will ask you to add documentation and examples. Please note that PRs with breaking changes or without tests will be rejected.  Please note that PRs will be reviewed based on the priority of the issues they address. We ask for your patience. We are doing our best to review your PR as quickly as possible. Please refrain from pinging and asking when it will be reviewed. Thank you for understanding! -->  ## Issue <!-- Please specify the ID of the issue this PR is addressing. For example: "Closes #1234" or "Fixes #1234" --> Fixes #3288  ## Change - Added an `Executor` call in the `generate` method to improve asynchronous task handling by using a thread executor. - Update logger target class for accurate logging context. - Remove unnecessary null check for `allowedFunctionNames` property. - Fixed empty arguments in function call.  ## General checklist <!-- Please double-check the following points and mark them like this: [X] --> - [ ] There are no breaking changes - [ ] I have added unit and/or integration tests for my change - [ ] The tests cover both positive and negative cases - [ ] I have manually run all the unit and integration tests in the module I have added/changed  and they are all green - [ ] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules  and they are all green <!-- Before adding documentation and example(s) (below)  please wait until the PR is reviewed and approved. --> - [ ] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs) - [ ] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for "big" features) - [ ] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)   ## Checklist for adding new maven module <!-- Please double-check the following points and mark them like this: [X] --> - [ ] I have added my new module in the root `pom.xml` and `langchain4j-bom/pom.xml`   ## Checklist for adding new embedding store integration <!-- Please double-check the following points and mark them like this: [X] --> - [ ] I have added a `{NameOfIntegration}EmbeddingStoreIT` that extends from either `EmbeddingStoreIT` or `EmbeddingStoreWithFilteringIT` - [ ] I have added a `{NameOfIntegration}EmbeddingStoreRemovalIT` that extends from `EmbeddingStoreWithRemovalIT`  ## Checklist for changing existing embedding store integration <!-- Please double-check the following points and mark them like this: [X] --> - [ ] I have manually verified that the `{NameOfIntegration}EmbeddingStore` works correctly with the data persisted using the latest released version of LangChain4j  ---------  Co-authored-by: Konstantin Pavlov <1517853+kpavlov@users.noreply.github.com> Co-authored-by: Dmytro Liubarskyi <ljubarskij@gmail.com>
jetlinks,jetlinks-community,12ec7dfcb38c5e526ad49b1a5827dd1a79e09443,https://github.com/jetlinks/jetlinks-community/commit/12ec7dfcb38c5e526ad49b1a5827dd1a79e09443,refactor: 优化redis序列化配置
pinpoint-apm,pinpoint,d21cd513d3aca9a2fb203957dd9e7bb2047ab826,https://github.com/pinpoint-apm/pinpoint/commit/d21cd513d3aca9a2fb203957dd9e7bb2047ab826,[#12149] Update avoid tracking unnecessary subscribe method of reactor
prestodb,presto,fcc4735b1b0c65e81cbd55cfddcee4a51d5ea74a,https://github.com/prestodb/presto/commit/fcc4735b1b0c65e81cbd55cfddcee4a51d5ea74a,Run empty values node simplify optimizer after connector optimizer
Graylog2,graylog2-server,323f226fdb0a246e7504f1b8bb0a60444af3389c,https://github.com/Graylog2/graylog2-server/commit/323f226fdb0a246e7504f1b8bb0a60444af3389c,Using single query for retrieving streams-aware field types. (#22092)  * Using single query for retrieving streams-aware field types.  * Adding license header.  * Replacing custom `Map.Entry` implementation with record.  * Simplifying fetching/processing response.  * Avoiding unnecessary object allocation.  Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>  * Avoiding unnecessary object allocation.  Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>  * Using concrete type.  ---------  Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>
alibaba,fastjson2,2bbcc86d14c16e408dab9381f988d475b5fba1df,https://github.com/alibaba/fastjson2/commit/2bbcc86d14c16e408dab9381f988d475b5fba1df,Optim jsonb write array mapping (#3346)  * optimize jsonb write array_mapping  * bug fix for codegen  * update benchmark  * refactor(ObjectWriterCreatorASM): Update method descriptor for writeListValueJSONB  This commit updates the method descriptor for `writeListValueJSONB` to use a constant (`METHOD_DESC_WRITE_LIST_VALUE_JSONB`) instead of defining it inline. This refactors the code for better readability and maintainability.
apache,hudi,24f0db68904b78ef10c7594b26660ddbcb0c00c7,https://github.com/apache/hudi/commit/24f0db68904b78ef10c7594b26660ddbcb0c00c7,[HUDI-8678] feat: improve consistent-bucket resizing performance by reducing unnecessary record collecting (#12451)  * feat: improve consistent-bucket resizing performance by reducing unnecessary record collecting * refactor: remove ConsistentHashingBucketInsertPartitioner  ---------  Signed-off-by: TheR1sing3un <chaoyang@apache.org>
netty,netty,7e96030afa2a781f9cd1482b095081dcc014f2fe,https://github.com/netty/netty/commit/7e96030afa2a781f9cd1482b095081dcc014f2fe,Always prefer direct buffers for pooled allocators if not explicit di… (#15232)  …sabled  Motivation:  We should always prefer direct buffers if the ByteBufAllocator implementations are pooled as deallocating these buffers should be rare.  Modifications:  - Add new method to PlatformDependent that can be used to check if default direct buffer usage was explicit disabled - Use this method in our pooled ByteBufAllocator implementations to check if we should use direct buffers or not by default  Result:  Less memory copies and better performance when using the pooled allocators even if Unsafe can not be used.
apache,pdfbox,e6fd4e359c543ad669ccefdf0ab1ea7f818a6209,https://github.com/apache/pdfbox/commit/e6fd4e359c543ad669ccefdf0ab1ea7f818a6209,PDFBOX-5996: Set size for ByteArrayOutputStreams  as suggested by Axel Howind  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925301 13f79535-47bb-0310-9956-ffa450edef68
trinodb,trino,85a8300950f47e9598504295eb4e53b36641ac91,https://github.com/trinodb/trino/commit/85a8300950f47e9598504295eb4e53b36641ac91,Use `RunLengthEncodedBlock` for null column appends  Replaces manual null appending with `RunLengthEncodedBlock` when adding columns with null values
apache,shardingsphere,875ea05bc1eca41fedfba17c5baacb93d44418f4,https://github.com/apache/shardingsphere/commit/875ea05bc1eca41fedfba17c5baacb93d44418f4,Only reload the modified tables after rule configuration altered (#34906)  * Only reload the modified tables after rule configuration altered  * Refactor ClusterMetaDataManagerPersistService for load single table rule
apache,iotdb,c603b990c75b5342402d1f1ca3cf696997a1c132,https://github.com/apache/iotdb/commit/c603b990c75b5342402d1f1ca3cf696997a1c132,Subscription: return immediately when unsubscribe empty complete topics (#15770)
apache,hive,4bc17573fb826ec63dd817981ec7a2b05ab16726,https://github.com/apache/hive/commit/4bc17573fb826ec63dd817981ec7a2b05ab16726,HIVE-28677: Implement direct sql for delete table/partition column stats (#5587)(Wechar Yu  reviewed by Raghav Aggarwal  Bbutao Zhang)
keycloak,keycloak,a43b65281d6f3631366b71858cad25676aaf635d,https://github.com/keycloak/keycloak/commit/a43b65281d6f3631366b71858cad25676aaf635d,Search user by id and fallback to username when needed - prevents performance issues when reading policies as users are always stored by id.  Closes #35796  Signed-off-by: Stefan Guilhen <sguilhen@redhat.com>
vespa-engine,vespa,e908cff84b7b95ce63e1b8e80624a629d532a15d,https://github.com/vespa-engine/vespa/commit/e908cff84b7b95ce63e1b8e80624a629d532a15d,Simplify reference counting of HTTP requests  Take reference once created and once after request is completed
apache,flink,69559fb5d231d704633fed807773cd1853601862,https://github.com/apache/flink/commit/69559fb5d231d704633fed807773cd1853601862,[FLINK-37382][runtime] Early optimization for adaptive join when either input is below broadcast threshold.
redisson,redisson,41c9cc7b8c6e764dce8f3d7f387a873b4b0f065c,https://github.com/redisson/redisson/commit/41c9cc7b8c6e764dce8f3d7f387a873b4b0f065c,Optimize AbstractCacheMap.removeExpiredEntries avoid useless iterate. #6630  Signed-off-by: lyrric <xx20510@163.com>
orientechnologies,orientdb,02fc8bef103cac8b2ed0fe51ec475142b06da525,https://github.com/orientechnologies/orientdb/commit/02fc8bef103cac8b2ed0fe51ec475142b06da525,fix: avoid to check indexes for all and any functions
thingsboard,thingsboard,134dab91b8f063d035b1a0132d1b5bc16671a204,https://github.com/thingsboard/thingsboard/commit/134dab91b8f063d035b1a0132d1b5bc16671a204,Improve local repository opening
PBH-BTN,PeerBanHelper,17831e81d87ff436717b7dac93c40a28ad9bb46b,https://github.com/PBH-BTN/PeerBanHelper/commit/17831e81d87ff436717b7dac93c40a28ad9bb46b,使用 Guava 的 InetAddresses.forString 避免额外转换开销
AxonFramework,AxonFramework,514f6203935f6af2ec3379b34f22a78331b50ab8,https://github.com/AxonFramework/AxonFramework/commit/514f6203935f6af2ec3379b34f22a78331b50ab8,AnnotationBasedEventStateApplier - inspect type just once
opentripplanner,OpenTripPlanner,7ed561f9ccd33d9cd1f3ad9967fbdcb6a32b7ecd,https://github.com/opentripplanner/OpenTripPlanner/commit/7ed561f9ccd33d9cd1f3ad9967fbdcb6a32b7ecd,Do not generate expanded area geometries during routing  Vertexlinker should not create an expanded area polygon whenever itinerary search starts/ends in an area. Buffer operation for a complex geometry is obviously very slow. Precompute the expansion.
apache,hudi,2d99668881f3f83c224fc787367711ad73e34c27,https://github.com/apache/hudi/commit/2d99668881f3f83c224fc787367711ad73e34c27,[HUDI-9499] Add customized SizeEstimator and Serializer for Avro buffered record in FileGroup reader (#13408)
apache,druid,23e840330c06c72c98c21fb39c48740bdec9343e,https://github.com/apache/druid/commit/23e840330c06c72c98c21fb39c48740bdec9343e,String util upgrade for jdk9+ (#17795)  * Update StringUtils.replace() after fix in JDK9  * Upgrade optimized string replace algorithm  * Update methods by re-using declared StringUtils#replace method  * Replace hard-coded UTF-8 encodings with StandardCharsets
netty,netty,b8def10cc1787fae46aa958b4059db659b8746dc,https://github.com/netty/netty/commit/b8def10cc1787fae46aa958b4059db659b8746dc,IoUring: Pass correct value to scheduleRead(...) when recv fails beca… (#14815)  …use there is no buffer left in the buffer ring.  Motivation:  d1b63585a695426b0ab5aab75d6499ee9269fd55 introduced the usage of the buffer ring for all reads so we need to ensure we call scheduleRead(...) with the right param depending on if its the first read or not.  Modifications:  Keep track if its the first read or not and use this information to call scheduleRead(...)  Result:  Pick the optimial values for ioPro and flags when doing a recv because of no buffer left in the ring
opentripplanner,OpenTripPlanner,eeaccb5c3fb3b5c54e378eba642b522d53618508,https://github.com/opentripplanner/OpenTripPlanner/commit/eeaccb5c3fb3b5c54e378eba642b522d53618508,Simpler processing of visibility edges which cross several areas  - Refactor related code - Do not split the edge to many segments. Instead  merge properties of crossed areas.
apache,nifi,a2faf102ebc9f882a27baa016db53a52bee3d51d,https://github.com/apache/nifi/commit/a2faf102ebc9f882a27baa016db53a52bee3d51d,NIFI-14301 Set HTTP Client Concurrency to Available Processors in ConsumeKinesisStream (#9754)  Signed-off-by: David Handermann <exceptionfactory@apache.org>
alibaba,fastjson2,e6f17d25c8d3191195053f633f08d5b92631b190,https://github.com/alibaba/fastjson2/commit/e6f17d25c8d3191195053f633f08d5b92631b190,remove unnecessary check
apache,pdfbox,3338d0d398a885f7ab322631953015fdef60b30f,https://github.com/apache/pdfbox/commit/3338d0d398a885f7ab322631953015fdef60b30f,PDFBOX-5902: provide singleton instances for heavily used Integer and byte[] values to avoid multiple instances  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1922578 13f79535-47bb-0310-9956-ffa450edef68
648540858,wvp-GB28181-pro,bc545f12a50774dc36bf01ac3df2e78ba06e42f2,https://github.com/648540858/wvp-GB28181-pro/commit/bc545f12a50774dc36bf01ac3df2e78ba06e42f2,优化延时任务到期时间更新
freeok,so-novel,5766a0f6f73f766776488048111b286716d5f0d3,https://github.com/freeok/so-novel/commit/5766a0f6f73f766776488048111b286716d5f0d3,:boom: JS运行时改用Javet，嵌入V8引擎
apache,atlas,826f32da1cfbef3674c8c5971ca2c8cc2a5e8e82,https://github.com/apache/atlas/commit/826f32da1cfbef3674c8c5971ca2c8cc2a5e8e82,ATLAS-5024: Improve fetching edges of the vertex (#338)  Co-authored-by: amruth <amruth.s@cloudera.com>
apache,pinot,07998f484baa1fbb791cf828c795dd7e0e7bf884,https://github.com/apache/pinot/commit/07998f484baa1fbb791cf828c795dd7e0e7bf884,[Multi-stage] Reduce PinotQuery copy (#14669)
vespa-engine,vespa,e33ea00861e309a60ddc5e81e9b76980f1fea73e,https://github.com/vespa-engine/vespa/commit/e33ea00861e309a60ddc5e81e9b76980f1fea73e,Change MMAP madvise default to SEQUENTIAL for search.  Benchmarking of lexical search using a Wikipedia dataset has shown that madvise SEQUENTIAL for disk index posting list files results in lower 99 percentile query latencies and better utilization of the I/O subsystem.
apache,rocketmq,4571a853a2e0b5be4e4d94d9a9865f235a2c9c76,https://github.com/apache/rocketmq/commit/4571a853a2e0b5be4e4d94d9a9865f235a2c9c76,reduce duplicate calls (#9037)  Co-authored-by: noreply <noreply@qq.com>
jplag,JPlag,dcdc90a1427d8d6bbfc8fbeb0e9b8f9fdd7d7306,https://github.com/jplag/JPlag/commit/dcdc90a1427d8d6bbfc8fbeb0e9b8f9fdd7d7306,Parallelize subsequence match merging.
quarkusio,quarkus,7e20944167eec2b16ba2080229a80caf5c504eea,https://github.com/quarkusio/quarkus/commit/7e20944167eec2b16ba2080229a80caf5c504eea,SmallRye Fault Tolerance: few tiny improvements of FT scanner  With this commit  we'll no longer create `DotName`s for annotations  because we already have them pre-created in the `DotNames` class.  Also  this commit replaces a stream with a simple `for` loop in a relatively hot method.
quarkusio,quarkus,ab710d6b101dbf73fa71dd3e9bbda1c1591d70a8,https://github.com/quarkusio/quarkus/commit/ab710d6b101dbf73fa71dd3e9bbda1c1591d70a8,Get rid of unnecessary reflective calls at RESTEasy Reactive startup  These calls were originally done to support REST Links  but the information they obtained has long been available at build time  meaning the reflective calls are totally unnecessary (and wasteful)
pmd,pmd,a19037f404aefaf6a1db0e9c9756d44ed1343f58,https://github.com/pmd/pmd/commit/a19037f404aefaf6a1db0e9c9756d44ed1343f58,[java/core] Micro optimizations (#5586)  Merge pull request #5586 from oowekyala:micro-opts-for-chars
apache,paimon,683fa199e270459b435b58a2a22a4d8d5c6120ca,https://github.com/apache/paimon/commit/683fa199e270459b435b58a2a22a4d8d5c6120ca,[orc] Optimize configuration creating in orc file format (#4716)
opensolon,solon,c3d645ab4a7be743317d5a16a3ed53ef421569b0,https://github.com/opensolon/solon/commit/c3d645ab4a7be743317d5a16a3ed53ef421569b0,优化 solon-expression 属性访问，改为 MethodHandle
alibaba,fastjson2,5b3925453966e399c0252601ef25d26a3b261c24,https://github.com/alibaba/fastjson2/commit/5b3925453966e399c0252601ef25d26a3b261c24,optimize readBoolValue
camunda,camunda,19c5a8da79961c3b5f3f7c1c82c8edb31b3945db,https://github.com/camunda/camunda/commit/19c5a8da79961c3b5f3f7c1c82c8edb31b3945db,feat: optimize to only validate optimize indexes with OS (#32780)  ## Description  Context: https://github.com/camunda/camunda/issues/33064  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] for CI changes: - [ ] structural/foundational changes signed off by [CI DRI](https://github.com/cmur2) - [ ] [ci.yml](https://github.com/camunda/camunda/blob/main/.github/workflows/ci.yml) modifications comply with ["Unified CI" requirements](https://github.com/camunda/camunda/wiki/CI-&-Automation#workflow-inclusion-criteria) - [ ] enable backports [when recommended](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)  ## Related issues  closes https://github.com/camunda/camunda/issues/33064
YunaiV,ruoyi-vue-pro,6982243370fcd5f3234b61a0b6d4dab109b991f3,https://github.com/YunaiV/ruoyi-vue-pro/commit/6982243370fcd5f3234b61a0b6d4dab109b991f3,perf:【INFRA 基础设施】优化一些 todo 提到的问题
iterate-ch,cyberduck,031d8c2c71839d0f96a92391ac65f5ffedad0f5d,https://github.com/iterate-ch/cyberduck/commit/031d8c2c71839d0f96a92391ac65f5ffedad0f5d,Merge pull request #16981 from iterate-ch/bugfix/GH-16939  Always query cache.
crate,crate,3591ee5ac0e2c0df15a35f92e14edf948ca362c7,https://github.com/crate/crate/commit/3591ee5ac0e2c0df15a35f92e14edf948ca362c7,Create RoutineInfos on-demand in InformationSchemaIterables  It was created on each cluster state update but that's not really necessary. It can be created once and use the latest metadata state whenever it is used.
apache,pinot,3121f8fc56f28f3e76c3c14d7bc86b29da91b96d,https://github.com/apache/pinot/commit/3121f8fc56f28f3e76c3c14d7bc86b29da91b96d,Add state and table filtering support to task counts API (#16433)  * Add state and table filtering support to task counts API  - Enhanced /tasks/{taskType}/taskcounts endpoint with optional query parameters: * state: Filter by single or multiple comma-separated task states (waiting  running  error  completed  dropped  timedOut  aborted  unknown  total) * table: Filter by table name to show only tasks with subtasks for specific tables  - Features: * Multiple state filtering: ?state=running error waiting * Table-specific filtering: ?table=myTable_OFFLINE * Combined filtering: ?state=running&table=myTable_OFFLINE * Database-aware table name translation * Comprehensive input validation with clear error messages * Backward compatible - existing API usage unchanged  - Implementation: * New overloaded getTaskCounts methods in PinotHelixTaskResourceManager * Efficient filtering logic with early validation * Robust error handling for edge cases * Helper methods for state and table filtering logic  - Tests: * Added comprehensive test suite covering all scenarios * State filtering tests (single  multiple  invalid states) * Table filtering tests (table-only  combined with states) * Edge case handling (null values  exceptions  no matches) * 6 new test methods with proper mocking  This enhancement enables precise monitoring of Pinot tasks by allowing operators to filter task counts by both execution state and target table  significantly improving operational visibility.  * Update task counts API to use Helix TaskState enum for state filtering  - Changed state parameter to use official Helix TaskState enum values: NOT_STARTED  IN_PROGRESS  STOPPED  STOPPING  FAILED  COMPLETED  ABORTED  TIMED_OUT  TIMING_OUT  FAILING  - Updated API documentation with correct TaskState values and examples - Enhanced state validation using TaskState.valueOf() for robust enum validation - Updated filtering logic to work with actual TaskState enum instead of aggregated counts - Added validateAndParseTaskState() method for proper state validation with clear error messages - Updated all test methods to use correct TaskState enum values - Fixed all checkstyle violations and line length issues  This ensures the API uses the standard Helix TaskState semantics for consistent task monitoring across the Pinot ecosystem.  * Fix PinotHelixTaskResourceManagerTest workflow context mocking  - Fixed failing tests for TaskState enum filtering functionality - Updated workflow context mocking to use getJobStates() method instead of individual getJobState() calls - Added proper WorkflowConfig and JobDag mocking for getTaskStates() method dependencies - Fixed import organization and removed duplicate imports - All TaskState filtering tests now pass: testGetTaskCountsWithSingleStateFilter  testGetTaskCountsWithMultipleStatesFilter  testGetTaskCountsWithStateAndTableFilter  The tests now properly mock the Helix workflow dependencies required by the updated TaskState enum implementation  ensuring correct state filtering behavior.  * Optimize getTaskCounts performance by applying filters before collecting TaskCount  - Move expensive getTaskCount() operation to only happen after state and table filtering - Apply state filtering first  then table filtering  then collect TaskCount - Significantly improves performance when many tasks are filtered out - Addresses review feedback from krishan1390 on PR #16433  * Address PR review comments: use StringUtils.isNotEmpty() and add @Nullable annotations  - Replace null checks with StringUtils.isNotEmpty() for better string validation in PinotTaskRestletResource - Add @Nullable annotations to state and tableNameWithType parameters in PinotHelixTaskResourceManager.getTaskCounts() - Update state and table filtering logic to use StringUtils.isNotEmpty() for consistency - Improve method signature formatting for better readability  Addresses feedback from Jackie-Jiang on PR #16433
opensolon,solon,2daa747981be58b8b2fca5fd7ef2407b1e096938,https://github.com/opensolon/solon/commit/2daa747981be58b8b2fca5fd7ef2407b1e096938,solon-ai Repository 入库时，添加嵌入分批处理
vespa-engine,vespa,0c5f8a67740d1fca3704510b8710bf5dce2bd2b9,https://github.com/vespa-engine/vespa/commit/0c5f8a67740d1fca3704510b8710bf5dce2bd2b9,feat(gguf-embedder): add parallelism and thread configuration options  Allow parallel decoding and continuous batching.
aws,aws-sdk-java-v2,9d5af05cd90d1a9181b52d7b0d95f111a5d29f76,https://github.com/aws/aws-sdk-java-v2/commit/9d5af05cd90d1a9181b52d7b0d95f111a5d29f76,Avoid calling ContentStreamProvider#newStream when content length is known (#5866)
apache,maven,d3bd71bbdf2e88f1674b4e977a7c8c5547df9e1b,https://github.com/apache/maven/commit/d3bd71bbdf2e88f1674b4e977a7c8c5547df9e1b,perf: optimize CompositeBeanHelper with reflection caching  Implement comprehensive caching for method and field lookups in CompositeBeanHelper to improve Maven build performance.  - Add method cache for setter/adder lookups - Add field cache for direct field access - Add accessibility cache to avoid repeated setAccessible() calls - Use ConcurrentHashMap for thread-safe concurrent access
apache,dubbo,5bbf7cef23d5ef4d155afd7cfcf3bc4b4826b073,https://github.com/apache/dubbo/commit/5bbf7cef23d5ef4d155afd7cfcf3bc4b4826b073,Cache marked type to optimize SerializeSecurityConfigurator registerInterface performance (#15500)
magefree,mage,b62ac065c1ed862cfcacf79568c04517c5458539,https://github.com/magefree/mage/commit/b62ac065c1ed862cfcacf79568c04517c5458539,AI: improved performance in tournament games (now computer will play AI vs AI games at the same time);
apache,flink,add2cd65873a9a6ea36934b4f295678d9ea5bd74,https://github.com/apache/flink/commit/add2cd65873a9a6ea36934b4f295678d9ea5bd74,[hotfix][runtime] Optimize the calculation logic of AllToAllBlockingResultInfo#getNumBytesProduced
graphhopper,graphhopper,3baa438c6a10914f6cee2adbb5b5feac9ae47179,https://github.com/graphhopper/graphhopper/commit/3baa438c6a10914f6cee2adbb5b5feac9ae47179,Avoid frequent IllegalArgumentException (#3123)
apache,pinot,2c7b0ddc72b69f8bb080158d1b20de27c1d69431,https://github.com/apache/pinot/commit/2c7b0ddc72b69f8bb080158d1b20de27c1d69431,Improve performance of multi-stage queries with large IN clauses (#14615)
camunda,camunda,14000162ae35335ba3fbd9156dea48806b4a4fa3,https://github.com/camunda/camunda/commit/14000162ae35335ba3fbd9156dea48806b4a4fa3,perf: avoid singleton set when caching a single key
camunda,camunda,d70f6ed15f66b5cdcffacb842c355fe75be345b4,https://github.com/camunda/camunda/commit/d70f6ed15f66b5cdcffacb842c355fe75be345b4,perf: wrap the GroupRecord instead of making a full copy  Wrapping is more performant than copying. In this place we don't need a full copy as we immediately insert it in our ColumnFamily.
camunda,camunda,6f65c37c8aea90a5610b7f85fa67f20746bb432c,https://github.com/camunda/camunda/commit/6f65c37c8aea90a5610b7f85fa67f20746bb432c,feat: call usage metrics and tu in parallel
apache,pulsar,98105943eefcb73b4ad1063ce4b22c3a2626f362,https://github.com/apache/pulsar/commit/98105943eefcb73b4ad1063ce4b22c3a2626f362,[improve][broker] Reduce cpu usage of InMemoryDelayedDeliveryTracker. (#24430)  Co-authored-by: thetumbled <fengwenzhi.max@bigo.sg>
apache,commons-lang,a5f9a0cc22e4626234a4d7b53bf357d61eb2478b,https://github.com/apache/commons-lang/commit/a5f9a0cc22e4626234a4d7b53bf357d61eb2478b,org.apache.commons.lang3.ClassUtils.getCanonicalName(String) now throws an IllegalArgumentException for array dimensions greater than 255  - No need to create strings over and over in a loop - Preallocate string builder - Javadoc since tag not needed for a private method
pinpoint-apm,pinpoint,49ce6da41b604b93fd0440fd55f4f35ed7726ad7,https://github.com/pinpoint-apm/pinpoint/commit/49ce6da41b604b93fd0440fd55f4f35ed7726ad7,[#11963] Improve the logic for retrieving deadlock stat data to fetch it from Pinot instead of HBase.
trinodb,trino,5b02f5dd769f50e1e08d055c715bb77676b488da,https://github.com/trinodb/trino/commit/5b02f5dd769f50e1e08d055c715bb77676b488da,Delete files in parallel in IcebergMetadata#removeOrphanFiles
keycloak,keycloak,660217dc41013564d1dca5bd2bda39a83bb6714c,https://github.com/keycloak/keycloak/commit/660217dc41013564d1dca5bd2bda39a83bb6714c,Avoid inefficient SQL when deleting a role (#39238)   Closes #39237 Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
camunda,camunda,c894ed192c32de61729f54548e1c0553be6ed262,https://github.com/camunda/camunda/commit/c894ed192c32de61729f54548e1c0553be6ed262,fix: skip archiving batch operations if no IDs given (#35388)  ## Description  <!-- Describe the goal and purpose of this PR. --> I noticed when debugging that we do continuously call ES reindex to archive batch operations  even-though no ids were provided in the batch  The main reason is that  in [ElasticsearchArchiverRepository](https://github.com/camunda/camunda/blob/9394901b6d4879375134265244c82f77a8c30900/zeebe/exporters/camunda-exporter/src/main/java/io/camunda/exporter/tasks/archiver/ElasticsearchArchiverRepository.java#L233-L235) when there is no hits for batch operation to archive  we return a default `new ArchiverBatch(null  List.of())`   which is not handled in `BatchOperationArchiverJob`  I made the same check as in [ProcessInstancesArchiverJob](https://github.com/camunda/camunda/blob/9394901b6d4879375134265244c82f77a8c30900/zeebe/exporters/camunda-exporter/src/main/java/io/camunda/exporter/tasks/archiver/ProcessInstancesArchiverJob.java#L64)  ## Checklist  <!--- Please delete options that are not relevant. Boxes should be checked by reviewer. --> - [ ] Enable backports when necessary (fex. [for bug fixes](https://github.com/camunda/camunda/blob/main/CONTRIBUTING.md#backporting-changes) or [for CI changes](https://github.com/camunda/camunda/wiki/CI-&-Automation#when-to-backport-ci-changes)).  ## Related issues  closes #
quarkusio,quarkus,3e26882017b809508636900c4e30781c5b431c2b,https://github.com/quarkusio/quarkus/commit/3e26882017b809508636900c4e30781c5b431c2b,Merge pull request #46099 from gsmet/optimize-OpenTelemetryLogHandler  OpenTelemetryLogHandler - Do not read config for each publish
orientechnologies,orientdb,3e018f3b6e86f3d1fea07b55e509ebee76801781,https://github.com/orientechnologies/orientdb/commit/3e018f3b6e86f3d1fea07b55e509ebee76801781,feat: minor optimizations in the query engine parsing
opensolon,solon,23833d903b59109367ad3ca06bfac601446c1529,https://github.com/opensolon/solon/commit/23833d903b59109367ad3ca06bfac601446c1529,solon ParameterizedTypeImpl:toString 添加缓存
trinodb,trino,b785d72ddc78b9f14485cf8c25cba59930907e21,https://github.com/trinodb/trino/commit/b785d72ddc78b9f14485cf8c25cba59930907e21,Use AppendOnlyVariableWidthData in TypedHistogram
camunda,camunda,86dafc56901f122d75562c6aff4688a9ebbb3e78,https://github.com/camunda/camunda/commit/86dafc56901f122d75562c6aff4688a9ebbb3e78,perf: do not allocate when iterating over source snapshot
apache,hudi,ecf26213b6a08e39b88c9742808fdb48a2698d0e,https://github.com/apache/hudi/commit/ecf26213b6a08e39b88c9742808fdb48a2698d0e,[HUDI-9493] Avoid redundant String encode/decode during conversion between RowData and Avro Record (#13390)
apache,hbase,221b5a3a19fd7d40e181d2f1724e137a9d21c2f2,https://github.com/apache/hbase/commit/221b5a3a19fd7d40e181d2f1724e137a9d21c2f2,HBASE-29245 Region reopening batch size should be increased when backoff is 0 (#6892)
apache,logging-log4j2,fbb334586d0f1dd0bdb8dcbfb1a2010929c59956,https://github.com/apache/logging-log4j2/commit/fbb334586d0f1dd0bdb8dcbfb1a2010929c59956,Use `java.util.Base64` directly instead of reflectively (#3690)
apache,iotdb,9834d9031f7bf01481187644f32a33e68857dfc7,https://github.com/apache/iotdb/commit/9834d9031f7bf01481187644f32a33e68857dfc7,Remove unnecessary synchronization for IoTConsensus memeory management (#16049)
camunda,camunda,e174d744f9a7d4b7eb8cf4aba06028ce9694970d,https://github.com/camunda/camunda/commit/e174d744f9a7d4b7eb8cf4aba06028ce9694970d,refactor: only create the rest/grpc objects if we use the corresponding protocol  There's no need to create the rest/grpc objects if we're not going to send them anyway.
camunda,camunda,52429c0ad2a889f96db3b3e42cd8cf8e238474c1,https://github.com/camunda/camunda/commit/52429c0ad2a889f96db3b3e42cd8cf8e238474c1,upsert query. This should improve performance.  ## Related issues  closes #26490
prestodb,presto,1bc7da4b2e28452496af309484ab7d1949db1b9c,https://github.com/prestodb/presto/commit/1bc7da4b2e28452496af309484ab7d1949db1b9c,Extend filtered aggregation optimizer to support only masked partial aggregation cases
trinodb,trino,5caf940929174db68b984c6dc388927fb72712a4,https://github.com/trinodb/trino/commit/5caf940929174db68b984c6dc388927fb72712a4,Avoid re-checking isScalarType
camunda,camunda,df2833f70596b18a0df6fa2d112362b089751598,https://github.com/camunda/camunda/commit/df2833f70596b18a0df6fa2d112362b089751598,feat: Cache SemanticVersion to avoid parsing it for every record (#34226)  ## Description When checking the performance degradation of benchmark `medic-y-2025-cw-25-59a095c4-benchmark-mixed ` I noticed that an unusual amount of time was spent parsing the version of the message every time in `CamundaExporter/ElasticSearchExporter`. As only a very limited amount of versions are actually in use caching the results should limit this overhead to basically 0. Memory allocations: ![Screenshot From 2025-06-24 15-13-33](https://github.com/user-attachments/assets/8e044a63-826d-40d6-856e-a48353b66059)  Cpu time:  ![image](https://github.com/user-attachments/assets/c7bdf542-7ed8-4c82-aef4-90e98731736a)  The improvement is only minor (I estimate around 5-7% of `Exporter.export` time)  but it's a quick win.  ### Implementation A global concurrent cache is used to cache valid SemanticVersion instances. After a brief period when versions are added  in steady state no put should be performed  limiting the penalty of the `ConcurrentHashMap`.  ### Limitations There is no check in the size of the cache as only valid semantic versions are inserted. A Caffeine cache could be used if there such need arises.
apache,paimon,a3f4ab32bd8b2a6988ae537067123f68213ccfea,https://github.com/apache/paimon/commit/a3f4ab32bd8b2a6988ae537067123f68213ccfea,[core] Reduce get partition requests in migrating hive table (#5364)
questdb,questdb,4d2f4dfc2b9ffcdbc97abc58be577dcbeccca790,https://github.com/questdb/questdb/commit/4d2f4dfc2b9ffcdbc97abc58be577dcbeccca790,fix(core): fix degradation into 1 by 1 wal transaction application when queue is big (#5725)
apache,iotdb,95cdc2e2bf98c4573c63c395bbe705d7dc0b4e9b,https://github.com/apache/iotdb/commit/95cdc2e2bf98c4573c63c395bbe705d7dc0b4e9b,Push down offset into TableScanNode when there is only one data region
apache,hudi,258ed5a09e037b06d9c920bb026053304070be2a,https://github.com/apache/hudi/commit/258ed5a09e037b06d9c920bb026053304070be2a,[HUDI-8126] Persist sourceRdd to optimise writeStatus DAG for error table (#11844)
apache,hudi,6fd14638c36b81ef5024873f4b42ec1af31328f8,https://github.com/apache/hudi/commit/6fd14638c36b81ef5024873f4b42ec1af31328f8,[HUDI-9364] Improve FileSystemView loading performance with large partitions (#13247)
apache,hudi,aa3dcd83fe660daff4d061be7459ddf02d038696,https://github.com/apache/hudi/commit/aa3dcd83fe660daff4d061be7459ddf02d038696,[HUDI-9571] Avoid scanning timeline to fetch InternalSchema for schema evolution (#13525)
DependencyTrack,dependency-track,25d63180e857225519e0fe9177f93ce9882e5191,https://github.com/DependencyTrack/dependency-track/commit/25d63180e857225519e0fe9177f93ce9882e5191,Reduce database round-trips during BOM processing  In the previous implementation  a `SELECT` query was issued for every single component and service in a BOM  in order to find existing components that match their identity.  In retrospect  this causes a lot of unnecessary database round-trips and puts the database under unnecessary stress  in particular for new projects where no components and services exist yet.  Now  we query all existing components and services of the project once in bulk.  A situation where this approach can perform worse  is when a BOM is uploaded to an existing project  and the content differs wildly between BOM and project. We would then load many components into memory  only to delete them shortly after. However  this scenario should be less common. Usually  projects are either empty  or have significant overlap with the uploaded BOM.  Backports https://github.com/DependencyTrack/hyades-apiserver/pull/1006  Signed-off-by: nscuro <nscuro@protonmail.com>
quarkusio,quarkus,6adeeda080a3a14b5663f543c9de1cb7b4d47ef4,https://github.com/quarkusio/quarkus/commit/6adeeda080a3a14b5663f543c9de1cb7b4d47ef4,Remove lambdas from Arc that are used at startup  These have a small effect on startup time  so we let's remove them without losing any functionality
trinodb,trino,358633f27639b6975b552766a04148cf7a19c25e,https://github.com/trinodb/trino/commit/358633f27639b6975b552766a04148cf7a19c25e,Parse parquet footer row groups lazily
chinabugotech,hutool,4e1b468096624f9f621356f2d8f9b25722a0d4fe,https://github.com/chinabugotech/hutool/commit/4e1b468096624f9f621356f2d8f9b25722a0d4fe,!1345 优化XXXToMapCopier的部分性能 Merge pull request !1345 from IzayoiYurin/v5-dev
languagetool-org,languagetool,5f577cec26530e624730b59e14bcdd8c3f569e80,https://github.com/languagetool-org/languagetool/commit/5f577cec26530e624730b59e14bcdd8c3f569e80,Synchronisation improvements  - Do not get lock on each model read - Close in synchronised block and reset the reference (allow to re-initialise the model)
google,gson,259c477cecaea8e73cd19e5207ba63edc04157da,https://github.com/google/gson/commit/259c477cecaea8e73cd19e5207ba63edc04157da,refactor: replace local StringWriter with StringBuilder (#2852)
apache,pinot,096ad7cdc2c8be828819f0cdd2bb90e35e2fccc2,https://github.com/apache/pinot/commit/096ad7cdc2c8be828819f0cdd2bb90e35e2fccc2,Make MSE leaf stage use cached TableConfig and Schema from TableDataManager (#15461)
debezium,debezium,16654038c8df55ef8cbacd6f06e6d2136713d6ba,https://github.com/debezium/debezium/commit/16654038c8df55ef8cbacd6f06e6d2136713d6ba,DBZ-8879: Fix performance regression in debezium-core
camunda,camunda,36c2f3899c8d398da061fe4a05a67a1611bc96a8,https://github.com/camunda/camunda/commit/36c2f3899c8d398da061fe4a05a67a1611bc96a8,fix: better chunkSize for batch operations (#35470)  ## Description  After some benchmarks we have found a better chunkSize for batch operation INIT phase.
chinabugotech,hutool,0c19f0b9a4ce2ea138797fe9879fdd08992cba0f,https://github.com/chinabugotech/hutool/commit/0c19f0b9a4ce2ea138797fe9879fdd08992cba0f,!1343 可召回批处理线程池执行器，主线程、线程池混合执行批处理任务，主线程空闲时会尝试召回线程池队列中的任务执行 Merge pull request !1343 from lk/v5-dev
SpigotMC,BungeeCord,774a6fd68c8fbbb99b6bbe8c0060820f8c3b059e,https://github.com/SpigotMC/BungeeCord/commit/774a6fd68c8fbbb99b6bbe8c0060820f8c3b059e,#3766: Combine packet length prepending and compressor
apache,ignite,fab69a781090291d7b08a02f29356959171a6a8e,https://github.com/apache/ignite/commit/fab69a781090291d7b08a02f29356959171a6a8e,IGNITE-24385 Fixed performance drop introduced by SQL plan history system view - Fixes #11848.  Signed-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>
risesoft-y9,Digital-Infrastructure,51e553cb4a70a23dda706d9083fdd6fe686bd33c,https://github.com/risesoft-y9/Digital-Infrastructure/commit/51e553cb4a70a23dda706d9083fdd6fe686bd33c,perf: 优化授权表查询
YunaiV,ruoyi-vue-pro,bb236af6310b852337e501d026d08048fad945bf,https://github.com/YunaiV/ruoyi-vue-pro/commit/bb236af6310b852337e501d026d08048fad945bf,perf: 优化 FileTypeUtils 的 TIKA 创建，提升性能
camunda,camunda,54b06a8df9f01dcee198c86b325dd6dbc5edfe77,https://github.com/camunda/camunda/commit/54b06a8df9f01dcee198c86b325dd6dbc5edfe77,feat: cache mapping rule evaluation (#33311)  This introduces an evaluation cache that prevents repeated evaluation of the same expressions. This optimizes for the case where we have many mapping rules with the same expression but different expected values each time. Compilation of expressions is done on-demand and not cached  because a compiled JsonPath expression is not thread-safe. Furthermore  compilation is reasonably fast (one microbenchmark showed 300ns for compilation  100ns for evaluation).  I've also included various related fixes.  closes #32428
apache,camel,398feb31f1b47177ce35a5cfbec0b00672e7385a,https://github.com/apache/camel/commit/398feb31f1b47177ce35a5cfbec0b00672e7385a,CAMEL-21888: camel-core - Compress changes only if needed (#17543)  ## Motivation  When the cache size is big  compressing the changes is costly in terms of CPU so it needs to be avoided when possible  ## Modifications:  * Only compress changes when the queue is full * Add a value holder to uniquely identify each key/value pair to avoid evicting a key/value pair that has been added multiple times to the cache
jeequan,jeepay,3eda4f1d327236bb67e256bc652daf848aa6af5a,https://github.com/jeequan/jeepay/commit/3eda4f1d327236bb67e256bc652daf848aa6af5a,优化静态资源和ignore路径不进过滤器
orientechnologies,orientdb,b2140a4d4a27e98cc8a131ee8a0c7044fa0e17a1,https://github.com/orientechnologies/orientdb/commit/b2140a4d4a27e98cc8a131ee8a0c7044fa0e17a1,fix: reduce usage of lock in distributed context initialization
opensolon,solon,02bf616dd6ba8650cb0328c72d5b7a59ab66cebd,https://github.com/opensolon/solon/commit/02bf616dd6ba8650cb0328c72d5b7a59ab66cebd,优化 solon-expression 算数处理时，如果是两个常量，推断结果，执行时直接输出
dataease,dataease,d7c2ec52ca29240e155de5b24dcb545787b310b0,https://github.com/dataease/dataease/commit/d7c2ec52ca29240e155de5b24dcb545787b310b0,perf: 优化菜单查询接口查询速度
keycloak,keycloak,706390adddc0a407591d6793603b1bf7dae66b38,https://github.com/keycloak/keycloak/commit/706390adddc0a407591d6793603b1bf7dae66b38,JGroups: Switch to "per-destination" bundler for jdbc-ping  Closes #39545  Signed-off-by: Ryan Emerson <remerson@redhat.com>
quarkusio,quarkus,1808caad6b822d087bb4ea7d2f7df7c2b7e11d12,https://github.com/quarkusio/quarkus/commit/1808caad6b822d087bb4ea7d2f7df7c2b7e11d12,Merge pull request #48296 from michalvavrik/feature/oidc-client-refresh-timer  OIDC Client: Add periodic asynchronous tokens refresh for performance critical applications
eclipse-vertx,vert.x,3b79834ca79e02da3adcd7ea27165d0314e45709,https://github.com/eclipse-vertx/vert.x/commit/3b79834ca79e02da3adcd7ea27165d0314e45709,Optimize Buffer's bound checks (Fixes #5643)
debezium,debezium,4fada85a35f9f38117bad64826f6aedb4e65d5ec,https://github.com/debezium/debezium/commit/4fada85a35f9f38117bad64826f6aedb4e65d5ec,DBZ-8595 Remove unnecesarry refreshes of schema  Both `connectionCreated()` and `lockTablesForSchemaSnapshot()` are called only from `RelationalSnapshotChangeEventSource#doExecute()`. Before it we just determine snapshot tables  offset and do the locking of the captured tables. We don't need schema for these operations and it should be sufficient to refresh the schema only before taking the actual snapshot. At this point fo time tables are already lock  so we take schema refresh from consitent DB view.
apache,druid,608abc6f63575c65513ba74b4bedbddfca1ad94b,https://github.com/apache/druid/commit/608abc6f63575c65513ba74b4bedbddfca1ad94b,Make SegmentAllocationQueue multithreaded (#18098)  * Make SegmentAllocationQueue multithreaded  * Do not run multiple jobs for the same datasource  * Add docs  min schedule delay to avoid busy waiting  * Trigger queue poll when worker finishes  * Emit skip metric once per queued batch  * Simplify scheduling condition
dromara,RuoYi-Vue-Plus,820db87604a8a21db5a84ed3fc9334c0c2a41f5a,https://github.com/dromara/RuoYi-Vue-Plus/commit/820db87604a8a21db5a84ed3fc9334c0c2a41f5a,update 优化 使用request存储动态租户 避免单请求多次查询redis获取
ClickHouse,clickhouse-java,562db61f4aaf617647786e051bdd18f6e41e6e57,https://github.com/ClickHouse/clickhouse-java/commit/562db61f4aaf617647786e051bdd18f6e41e6e57,implemented simple batch for prepared statement
locationtech,jts,55949854bec93546cd6b7f3ca674673f3ad20cd2,https://github.com/locationtech/jts/commit/55949854bec93546cd6b7f3ca674673f3ad20cd2,Minor ExactMaxInCircle improvement
PBH-BTN,PeerBanHelper,19f6e8a16df3c83af044b5b75fcb964670bce11e,https://github.com/PBH-BTN/PeerBanHelper/commit/19f6e8a16df3c83af044b5b75fcb964670bce11e,继续改进 GUI 插入性能
orientechnologies,orientdb,7d5ae393cfefb00a7dbb1f536b23a9c76892e9cb,https://github.com/orientechnologies/orientdb/commit/7d5ae393cfefb00a7dbb1f536b23a9c76892e9cb,refactor: refactor for functions indexes for reduce use of exponetial conditions
immutables,immutables,76157d405adf0059e724aad774aa9cffa4c0307c,https://github.com/immutables/immutables/commit/76157d405adf0059e724aad774aa9cffa4c0307c,efficiency of import rewriting
redis,jedis,eb34e054763fdc3b50284ece1b5c0dd08615c037,https://github.com/redis/jedis/commit/eb34e054763fdc3b50284ece1b5c0dd08615c037,Run pipeline in current thread if all the keys on same node (#4149)  * perf:last node run in current thread directly  * fix: connection leak  we should return it to connection pool  * noop sync when pipelinedResponses.isEmpty()  * revert rename  * clean  * remove last node run in current thread when multi node  * add test for pipeline all keys at same node  * fix: make all keys on same node  * formatting  ---------  Co-authored-by: ggivo <ivo.gaydazhiev@redis.com>
201206030,novel-plus,4b00ea68a9127086d9b57a5ed92316db7abb0e11,https://github.com/201206030/novel-plus/commit/4b00ea68a9127086d9b57a5ed92316db7abb0e11,perf: 提高第一次登录速度
camunda,camunda,678c747ce007fd6b33710fa5ed828fade3286cfc,https://github.com/camunda/camunda/commit/678c747ce007fd6b33710fa5ed828fade3286cfc,feat: do not include the entire record byte array in the toString
springdoc,springdoc-openapi,47ca1e3679260b06ddb08893bd7853e890802e77,https://github.com/springdoc/springdoc-openapi/commit/47ca1e3679260b06ddb08893bd7853e890802e77,Improve performance of getGenericMapResponse
apache,hadoop,40d54ebb66a7cd7680134d9bb80f2f0fc1bfda75,https://github.com/apache/hadoop/commit/40d54ebb66a7cd7680134d9bb80f2f0fc1bfda75,HDFS-17417. [FGL] HeartbeatManager and DatanodeAdminMonitor support fine-grained locking (#6656)
jOOQ,jOOQ,264f030f3b6a8200ed5ba9eaa303163329103f1b,https://github.com/jOOQ/jOOQ/commit/264f030f3b6a8200ed5ba9eaa303163329103f1b,[jOOQ/jOOQ#18787] XMLDatabase has O(N^2) complexity in column / attribute / parameter lookups
debezium,debezium,b5de0fd0cc5a219909338ffb7d92526a3b7fed3e,https://github.com/debezium/debezium/commit/b5de0fd0cc5a219909338ffb7d92526a3b7fed3e,DBZ-8858: Use the clustered index in sqlserver connector queries  Adding `__$command_id ASC` to the `ORDER BY` clause of the query allows for the usage of the clustered index when the connector is running with `data.query.mode=direct`.
camunda,camunda,afaaf933d82237bd22da6bf4416e79bd17626117,https://github.com/camunda/camunda/commit/afaaf933d82237bd22da6bf4416e79bd17626117,perf: lazily initialize readers and writers  Some instances are reused  let's avoid re-allocating new readers and writers for those.
alibaba,fastjson2,7b47fac946fffd91e134a362c426e8d4b97253bf,https://github.com/alibaba/fastjson2/commit/7b47fac946fffd91e134a362c426e8d4b97253bf,optimize JSONReader
wildfly,wildfly,2caa7d617b148be19a5f2c70830fc28dc592c3c2,https://github.com/wildfly/wildfly/commit/2caa7d617b148be19a5f2c70830fc28dc592c3c2,[WFLY-19393] Persistence container bytecode enhancement must be enabled by default to ensure better performance
quarkusio,quarkus,7d37ec4d60a7e9c8074dea30b6c924f658f7c45c,https://github.com/quarkusio/quarkus/commit/7d37ec4d60a7e9c8074dea30b6c924f658f7c45c,Merge pull request #45828 from Ladicek/redis-cache-use-scan-instead-of-keys
netty,netty,050f0905aa81d842c23012d5ecbe3983e8dadb86,https://github.com/netty/netty/commit/050f0905aa81d842c23012d5ecbe3983e8dadb86,IoUring: Only try to submit and run all completions when IOSEQ_ASYNC … (#14698)  …is not used.  Motivations:  4d868a6da3aeb0b222ac24c8bf5f63a416f74ecf introduced a change which did trigger a submit when a Channel was unwritable after writing to it. This makes only sense if IOSEQ_ASYNC is not used as if its used we will never execute the WRITE inline during the submit.  Modifications:  Check if IOSEQ_ASYNC is used and if so not try to submit  Result:  Less overhead when IOSEQ_ASYNC is used
graphhopper,graphhopper,761468b5a310d2ba358218f44c937fbc6dfce311,https://github.com/graphhopper/graphhopper/commit/761468b5a310d2ba358218f44c937fbc6dfce311,Sort graph for better cache locality (#3177)
igniterealtime,Openfire,d5fe627a3aed8495b6ded96d551c00c152d8d3bb,https://github.com/igniterealtime/Openfire/commit/d5fe627a3aed8495b6ded96d551c00c152d8d3bb,OF-2921: Do not acquire mutex on unused StreamManager  Historically  disabling the Stream Management functionality has been a work-around for various issues.  To be able to work around a deadlock issue as described in OF-2921  this commit prevents a Stream Management-related mutex to be acquired when the Stream Management feature is disabled.
alibaba,fastjson2,5ec9959bb6e88f9bf7c2251a5370b22715d95ca4,https://github.com/alibaba/fastjson2/commit/5ec9959bb6e88f9bf7c2251a5370b22715d95ca4,optimize writeName JSONB
apache,iotdb,b498285c4f413251e2fe3ebe52a5b1530a0b762f,https://github.com/apache/iotdb/commit/b498285c4f413251e2fe3ebe52a5b1530a0b762f,Pipe: Modify MaxAllowedPinnedMemTableCount to adapt to changes in the number of DRs & Modify the implementation of the poll method in PipeRealtimePriorityBlockingQueue to reduce commit queue backlog & Adjust the default thread count related to Pipe for better performance & Significantly reduce pipeMemoryAllocateRetryIntervalMs & Provide a switch for memory control of ConnectorReadFileBuffer (#14917)
debezium,debezium,815e6964f65f8916791256750c270a431de34ef2,https://github.com/debezium/debezium/commit/815e6964f65f8916791256750c270a431de34ef2,DBZ-8986 Optimize is recently processed check
apache,hudi,4cb57c14ec0531c7076befd6b3ae04799ecf8108,https://github.com/apache/hudi/commit/4cb57c14ec0531c7076befd6b3ae04799ecf8108,[HUDI-9628] Add bloom filtering to prune keys prior to lookup in Metadata HFiles (#13563)  Co-authored-by: rmahindra123 <rmahindra@gmail.com> Co-authored-by: Y Ethan Guo <ethan.guoyihua@gmail.com>
zfoo-project,zfoo,14e4e55b63e6ba4b27f03a81464eab93054e22c9,https://github.com/zfoo-project/zfoo/commit/14e4e55b63e6ba4b27f03a81464eab93054e22c9,feat[cache]: async lazyGet for SingleCache
trinodb,trino,8c8c804fad93b733bc2aab9ae062f4ff0cbdebf3,https://github.com/trinodb/trino/commit/8c8c804fad93b733bc2aab9ae062f4ff0cbdebf3,Pushdown metadata column `$path` in Delta Lake  The `$path` column is already used for pruning splits in DeltaLakeSplitManager  This commit removes the `$path` domain from `remainingFilter` of the filter pushdown result  Co-Authored-By: Marius Grama <findinpath@gmail.com>
apache,hadoop,4c86601cba532865271c60ee319c997fb1f3a195,https://github.com/apache/hadoop/commit/4c86601cba532865271c60ee319c997fb1f3a195,HDFS-17389. [FGL] Client RPCs involving read process supports fine-grained lock (#6590)
debezium,debezium,4dc666f3290247adc0a6381790ebb0b025f25135,https://github.com/debezium/debezium/commit/4dc666f3290247adc0a6381790ebb0b025f25135,DBZ-8938 Remove unnecessary metadata query & map gets
camunda,camunda,8ebe27da54429d83df2cfe0814ba33cc5ae30ea8,https://github.com/camunda/camunda/commit/8ebe27da54429d83df2cfe0814ba33cc5ae30ea8,fix: skip deserialize when verifyRepositoryExists
confluentinc,schema-registry,88ca32efb48aaca2f7f3bdcc706d9ff7bd219db6,https://github.com/confluentinc/schema-registry/commit/88ca32efb48aaca2f7f3bdcc706d9ff7bd219db6,Minor optimization in KafkAvroDeserializer.config
apache,iotdb,c557e3e42fcf7687ea772b0822e083d70ab41710,https://github.com/apache/iotdb/commit/c557e3e42fcf7687ea772b0822e083d70ab41710,perf: more adjustment for memtable/tvlist  (#15035)  * fix: no need to synchronize list since sort is already an synchronized method  * fix: optimize mininum time update in TVList  * perf: special case for merge sort iterator when no handover occurs
dbeaver,dbeaver,41a43e4b50f68cf80997d3e6ab1ee998485bb0a9,https://github.com/dbeaver/dbeaver/commit/41a43e4b50f68cf80997d3e6ab1ee998485bb0a9,#37870 indexes do not show in the right order (#38221)  * dbeaver/dbeaver#37870 Change default comparator  * dbeaver/dbeaver#37870 Fix code style warning  * dbeaver/dbeaver#37870 Change logic in default comparator  * dbeaver/dbeaver#37870 Add NOTE for tree element sorting logic  * dbeaver/dbeaver#37870 Prevent unnecessary sorting of DBSTableIndexColumn nodes  * dbeaver/dbeaver#37870 Skip sorting for navigator items with ordinal positions  * dbeaver/dbeaver#37870 Fix column sorting order  * dbeaver/dbeaver#37870 Fix code style warning  * dbeaver/dbeaver#37870 Prevent unnecessary sorting of DBSTableIndexColumn nodes  * dbeaver/dbeaver#37870 Fix column sorting order
apache,hudi,2288c07983322017bfb63fa22c4e998a25dca2c5,https://github.com/apache/hudi/commit/2288c07983322017bfb63fa22c4e998a25dca2c5,[HUDI-8782] BulkInsertWriterHelper parallel close (#12518)  * parralel close draft * update awaitTermination to 10 minutes in close * deal with empty handles in close * hard code close to 10 max parallelism  ---------  Co-authored-by: fhan <yfhanfei@jd.com>
apache,iotdb,98f397c4c49668d4370baefbcfa336f3180a9741,https://github.com/apache/iotdb/commit/98f397c4c49668d4370baefbcfa336f3180a9741,Optimize the logic of get ReplicaSets for devices
igniterealtime,Openfire,92cd5c545271b9b6cef3afbb3844d6fdf859cd4b,https://github.com/igniterealtime/Openfire/commit/92cd5c545271b9b6cef3afbb3844d6fdf859cd4b,Merge pull request #2644 from guusdk/tests-improve-speed  Reduce runtime of long-running S2S unit tests (and fix OF-2942 as a byproduct)
quarkusio,quarkus,cf6c2cd81ee259729cd53b482b8d95488bb70f97,https://github.com/quarkusio/quarkus/commit/cf6c2cd81ee259729cd53b482b8d95488bb70f97,Use VertxLogDelegateFactory for internal Vert.x logging  This is done because I assume that was the original intent  but also because it avoids the non-zero cost incurred by Vert.x to look up the various supported options
dibo-software,diboot,c16d9827563c9e9d949c9686df2f0a236aecdb1d,https://github.com/dibo-software/diboot/commit/c16d9827563c9e9d949c9686df2f0a236aecdb1d,* 关联数据绑定的移除并行优化性能
debezium,debezium,fc29020d61b8b140ee315d962f09a2a6a6db8054,https://github.com/debezium/debezium/commit/fc29020d61b8b140ee315d962f09a2a6a6db8054,DBZ-8570 Reduce frequency table exists and column metadata queries
camunda,camunda,3841ad34aa0e60aee7b41423036a65c960192f76,https://github.com/camunda/camunda/commit/3841ad34aa0e60aee7b41423036a65c960192f76,feat: Cache SemanticVersion to avoid parsing it for every record  A global concurrent cache is used to cache valid SemanticVersion instances. There is no check in the size of the cache as only valid semantic versions are inserted. A Caffeine cache could be used if there such need arises
quarkusio,quarkus,6108b9a30022c2d6f2d29cd6dd5eeee031973c7a,https://github.com/quarkusio/quarkus/commit/6108b9a30022c2d6f2d29cd6dd5eeee031973c7a,Merge pull request #46097 from holly-cummins/split-jvm-tests  Increase parallelisation of JVM tests to reduce build times
apache,camel,1b05fb3d92efdde9f50233a76f723c345b57c8ea,https://github.com/apache/camel/commit/1b05fb3d92efdde9f50233a76f723c345b57c8ea,CAMEL-22287: camel-main: durationMaxSeconds=-1 is a special mode to shutdown camel asap. This speedup camel-jbang.
debezium,debezium,d0676405ebd835fba7ec878fbd9af8f7acafb841,https://github.com/debezium/debezium/commit/d0676405ebd835fba7ec878fbd9af8f7acafb841,DBZ-8925 Improve Hybrid strategy performance with the Oracle ObjectId cache
orientechnologies,orientdb,6e42547d3d9eaf382797109bead5a8f9cb730c04,https://github.com/orientechnologies/orientdb/commit/6e42547d3d9eaf382797109bead5a8f9cb730c04,refactor: optimization to avoid to look for a null user in the database
lakesoul-io,LakeSoul,1274ecc4b26623aba0c6dd45a03346b229a02fc3,https://github.com/lakesoul-io/LakeSoul/commit/1274ecc4b26623aba0c6dd45a03346b229a02fc3,[Flink] optimize list partition desc (#582)  * [Flink] optimize list partition desc  Signed-off-by: chenxu <chenxu@dmetasoul.com>  * add test  Signed-off-by: chenxu <chenxu@dmetasoul.com>  ---------  Signed-off-by: chenxu <chenxu@dmetasoul.com> Co-authored-by: chenxu <chenxu@dmetasoul.com>
google,guava,961370b5496c8fa0086f7913d8b2f01de98d404a,https://github.com/google/guava/commit/961370b5496c8fa0086f7913d8b2f01de98d404a,Improve `Iterables.getLast(Iterable)` when the `Iterable` is a `SortedSet`.  RELNOTES=n/a PiperOrigin-RevId: 786266428
orientechnologies,orientdb,90b37620f99d88ead3d3bf45818b86d9049838cb,https://github.com/orientechnologies/orientdb/commit/90b37620f99d88ead3d3bf45818b86d9049838cb,refactor: avoid to reserialize the record if is the same of the one in cache
AxonFramework,AxonFramework,501f5920fb7276e21079cc75d99539bc733c1bd8,https://github.com/AxonFramework/AxonFramework/commit/501f5920fb7276e21079cc75d99539bc733c1bd8,Merge pull request #3431 from AxonFramework/fix/cache-unknown-classes  Added caching for unknown classes
ClickHouse,clickhouse-java,2884859e0b8731ca0adb96e2824cf703ee9e906a,https://github.com/ClickHouse/clickhouse-java/commit/2884859e0b8731ca0adb96e2824cf703ee9e906a,removed usage of deprecated classes. using container exec to execute query. reduced test time
debezium,debezium,6a01cf5a6e3521c3a57f3a6373ece6607cb3cfb4,https://github.com/debezium/debezium/commit/6a01cf5a6e3521c3a57f3a6373ece6607cb3cfb4,DBZ-9030 Fix performance regression with transaction inserts
networknt,light-4j,2ff5a19c1b384b80bdf832f53a897ea528078791,https://github.com/networknt/light-4j/commit/2ff5a19c1b384b80bdf832f53a897ea528078791,fixes #2448 move the cache manager creation to the instance variable in singleton (#2449)
BiglySoftware,BiglyBT,b436253ee05b451f1fe41d3315d1b24e23b69999,https://github.com/BiglySoftware/BiglyBT/commit/b436253ee05b451f1fe41d3315d1b24e23b69999,Improve performance of expand/collapse in large files view
trinodb,trino,73015615900443f2921c71f3cc71bb12b8a47a29,https://github.com/trinodb/trino/commit/73015615900443f2921c71f3cc71bb12b8a47a29,Parallelize materialized view base table freshness retrieval in Iceberg  Previously  base table freshness was retrieved sequentially  which could make materialized view refreshes inefficient  especially when base tables changed frequently or loaded slowly or the materialized view involves other materialized views.  This change parallelizes the retrieval process  improving refresh performance  particularly for workloads with frequently changing or slow-loading base tables.  Benchmark Results  with 20 base tables in a materialized view using `REFRESH MATERIALIZED VIEW`: * Avg table load time: 10ms → Refresh time reduced from 560ms to 310ms. * Avg table load time: 100ms → Refresh time reduced by more than 1s.
quarkusio,quarkus,4174a903f519f8b0b2aa8e1514f8da7a9c00df99,https://github.com/quarkusio/quarkus/commit/4174a903f519f8b0b2aa8e1514f8da7a9c00df99,Use MethodHandles for constructing RESTEasy Reactive invokers
debezium,debezium,56a2746e2d5b443f51db56756242c9881b52198b,https://github.com/debezium/debezium/commit/56a2746e2d5b443f51db56756242c9881b52198b,DBZ-8665 Improve performance for handling constraint violations
freeok,so-novel,9ea246ebaf0c4326e9421529bad95ed34d098412,https://github.com/freeok/so-novel/commit/9ea246ebaf0c4326e9421529bad95ed34d098412,:zap: 优化okhttp请求及配置
apache,pinot,d0d8b666accea5e5d94f22418f2a7c2e2a9a6c9d,https://github.com/apache/pinot/commit/d0d8b666accea5e5d94f22418f2a7c2e2a9a6c9d,Limit GroupByCombineOperator to use 2 * numCores threads instead of creating one task per operator (#14843)
pinpoint-apm,pinpoint,e5c99993205f48ae3df3a4d9060c8d9b1081f59c,https://github.com/pinpoint-apm/pinpoint/commit/e5c99993205f48ae3df3a4d9060c8d9b1081f59c,[#12064] Add cache in async opertations
netty,netty,d25d6667b992cbef2de22ca418e78eaa5d00b75d,https://github.com/netty/netty/commit/d25d6667b992cbef2de22ca418e78eaa5d00b75d,IoUring: Keep on reading data until nothing is left to read on a socket (#14668)  Motivation:  We need to keep on submitting reads until there is nothing left to read from the socket. Otherwise we will suffer from performance problems as we will do more fireChannelReadComplete() calls then required and so hurt batching.  Modifications:  Use our own supplier that ensures we read all data.  Result:  Fix performance problems
jacoco,jacoco,22ead5e845a3db08b0f3051eb9f2fe8e6edcf827,https://github.com/jacoco/jacoco/commit/22ead5e845a3db08b0f3051eb9f2fe8e6edcf827,Get rid of repetitive execution of `isKotlinClass` in Kotlin filters (#1809)  Co-authored-by: Evgeny Mandrikov <138671+Godin@users.noreply.github.com>
apache,avro,a4a4d2413a6b9ecd072941f52439e7bbd0a92bbb,https://github.com/apache/avro/commit/a4a4d2413a6b9ecd072941f52439e7bbd0a92bbb,AVRO-3230: enable fastread by default (#1363)
soot-oss,soot,c39ca0c9a0f58aea7eda58d815ff8bfef0e30c5f,https://github.com/soot-oss/soot/commit/c39ca0c9a0f58aea7eda58d815ff8bfef0e30c5f,Faster fast hierarchy (in trade for a bit of memory for caching)
assertj,assertj,3470e734e8b1d845d0be129127a58c953108199d,https://github.com/assertj/assertj/commit/3470e734e8b1d845d0be129127a58c953108199d,Replace isSealed reflection-based implementation with JDK built-in implementation  Fix #3081
quarkusio,quarkus,f4a406adb96920b135b3a8a4eb4bd83e05980fbc,https://github.com/quarkusio/quarkus/commit/f4a406adb96920b135b3a8a4eb4bd83e05980fbc,Merge pull request #45311 from geoand/RequestMapper-improvement  Slightly improve performance of RequestMapper construction
pinpoint-apm,pinpoint,710a2c8bec968a8fc42b75d4032631b93d0bef64,https://github.com/pinpoint-apm/pinpoint/commit/710a2c8bec968a8fc42b75d4032631b93d0bef64,[#12159] Change sort key combination to improve query performance
dataease,dataease,cce556f15e6b318eba2773c0578d017703f8d838,https://github.com/dataease/dataease/commit/cce556f15e6b318eba2773c0578d017703f8d838,fix: 【数据导出中心】修复切换tab页导致cpu暴增
openpnp,openpnp,1a2f522dfee65bfa5d2e85c3e4ab9f8f0faa3867,https://github.com/openpnp/openpnp/commit/1a2f522dfee65bfa5d2e85c3e4ab9f8f0faa3867,Two optimisations for the common case where an event triggers no scripts. Firstly it avoids re-checking the filesystem if it previously found there was no matching filename. Secondly  the Job.Placement.BeforeAssembly has lots of script parameters  and we can skips the step of gathering them all together if script file has been previously found to not exist. Finally  the calculation of the placementLocation value has been moved to after the Job.Placement.BeforeAssembly script so that a script can fine-tune the placement location as part of a 'local fiducial' feature. PR 1744 and #1688
OpenAPITools,openapi-generator,dac1e6b7d3731d9d79f9cc3b44f238593a9681e7,https://github.com/OpenAPITools/openapi-generator/commit/dac1e6b7d3731d9d79f9cc3b44f238593a9681e7,optimize regex (#21188)
apache,pinot,1891ef245e178c3cdd018ec63af8035868bf4c95,https://github.com/apache/pinot/commit/1891ef245e178c3cdd018ec63af8035868bf4c95,Implement parallel segment download and untar for improved performance (#16249)  * Implement parallel segment download and untar for improved performance  * remove extra line.  * Add global minion config.  * Code refactoring.  * Fix for integration tests.  * review addressing  ---------  Co-authored-by: abhishekbafna <abhishek.bafna@startree.ai>
camunda,camunda,a6c278ecbb85e98ce0acad22b844dd421a7f142f,https://github.com/camunda/camunda/commit/a6c278ecbb85e98ce0acad22b844dd421a7f142f,refactor: track both possible counters instead of recreating them (#36053)  ## Description  This PR adds a tiny optimization of tracking the counters for cache hits/misses  instead of recreating the objects every time via Micrometer.  ## Related issues  closes #35625
apache,iotdb,a4cadf75957e2c9680847f4466f358c1aff3b9f1,https://github.com/apache/iotdb/commit/a4cadf75957e2c9680847f4466f358c1aff3b9f1,Pipe: Optimized the floating memory calculation & Fixed potential NPE in insertRows privilege checking (#16039)  * simplify  * comp  * Refactor  * some  * fix-potential-npe  * cache
trinodb,trino,d5a18a503da106fa49ddde6dbf6fea18233c0ad4,https://github.com/trinodb/trino/commit/d5a18a503da106fa49ddde6dbf6fea18233c0ad4,Use AppendOnlyVariableWidthData in FlatArrayBuilder
datastax,jvector,7a68c6c1046ae0247eafe8d04425a58e90f7d41f,https://github.com/datastax/jvector/commit/7a68c6c1046ae0247eafe8d04425a58e90f7d41f,Implement NodeQueue#pushAll and AbstractLongHeap#addAll (#415)  Adds bulk add operations to the AbstractLongHeap and to the NodeQueue to reduce comparisons required when adding many elements at once.
apache,iotdb,b4edfdf1d6897b4db3802a60f69e4669e2c41aa9,https://github.com/apache/iotdb/commit/b4edfdf1d6897b4db3802a60f69e4669e2c41aa9,IoTConsensusV2: Accelerate follower receive dispatch based on TPCx case
dataease,dataease,d76a162e60a84240893f4414727f4c5068dc3e42,https://github.com/dataease/dataease/commit/d76a162e60a84240893f4414727f4c5068dc3e42,feat(X-Pack): [数据填报]新建表单支持绑定已有表 #12788  优化获取数据源列表接口
ClickHouse,clickhouse-java,935e4913ba017d16601f4445c14e41e6fc07b73c,https://github.com/ClickHouse/clickhouse-java/commit/935e4913ba017d16601f4445c14e41e6fc07b73c,Improve compression (#2267)
soot-oss,soot,d4a26185c3ad8f8361646d369ac082f11d6ef5ab,https://github.com/soot-oss/soot/commit/d4a26185c3ad8f8361646d369ac082f11d6ef5ab,Merge pull request #2173 from MarcMil/opt  Faster fast hierarchy (in trade for a bit of memory for caching)
zfoo-project,zfoo,09f1c9fd70a230826bd74c3af5e3b1cbb4bee9a4,https://github.com/zfoo-project/zfoo/commit/09f1c9fd70a230826bd74c3af5e3b1cbb4bee9a4,perf[set]: add unboxed contains method to HashSetInt
apache,hive,392e7324ec12a096a5f884ee65d9871b432baf16,https://github.com/apache/hive/commit/392e7324ec12a096a5f884ee65d9871b432baf16,HIVE-29075: Iceberg: Optimize auto-compaction by evaluating compaction needs only on modified partitions (#5957)
camunda,camunda,a31b79a5cd4b77d0f05278cd2cb247d7c929adaa,https://github.com/camunda/camunda/commit/a31b79a5cd4b77d0f05278cd2cb247d7c929adaa,refactor: change StringProperty to LongProperty  The key is a long  by using it as a string we have to perform parsing all the time. We should store it as a long property to prevent this. The rquest mapper in the gateway is responsible for parsing the string we receive to a long.
quarkusio,quarkus,e0f250950de3aa34ef7e0a57671bedc5bcf3adce,https://github.com/quarkusio/quarkus/commit/e0f250950de3aa34ef7e0a57671bedc5bcf3adce,More efficient dependency tree conflict resolver
prestodb,presto,a504c7c5dd4c324cd17fd5b19b64dba79daaa727,https://github.com/prestodb/presto/commit/a504c7c5dd4c324cd17fd5b19b64dba79daaa727,[native] Improve semi join parallelism  Run build side in parallel similar to other joins
crate,crate,6ffa815eda04fb17f558383b86c90307fce82166,https://github.com/crate/crate/commit/6ffa815eda04fb17f558383b86c90307fce82166,Don't resolve refresh index names twice  The underlying index names for a refresh request are already resolved from table and/or partition names in RefreshTablePlan  so we don't need to re-resolve them in the Transport action.
alibaba,spring-ai-alibaba,16b4b257c5de7e03966b22f96426abc990a47379,https://github.com/alibaba/spring-ai-alibaba/commit/16b4b257c5de7e03966b22f96426abc990a47379,Merge pull request #465 from qnnn/performance  reduce redundant getProperty calls to improve performance
SPLWare,esProc,d4d6e365ad8fc6e15c3c531e1c162c537b5dc4c5,https://github.com/SPLWare/esProc/commit/d4d6e365ad8fc6e15c3c531e1c162c537b5dc4c5,Do optimization.
netty,netty,a4acd66fee7efc8955ede65fef63012085551ea1,https://github.com/netty/netty/commit/a4acd66fee7efc8955ede65fef63012085551ea1,IoUring: Refill buffer ring more eagerly (#14842)  Motivation:  IoUring: Refill buffer ring more eagerly  Motivation:  We should refill the buffer ring as soon as possible to reduce the possibility of seeing ERRNO_NO_BUFFER  Modifications:  Refill buffer as soon as there is an empty slot.  Result.  Much better performance.  Before:  ``` src/./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   -c 10 -T 30 127.0.0.1:8081 Destination: [127.0.0.1]:8081 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8081 Ramped up to 10 connections. Total data sent:     200090.4 MiB (209809965056 bytes) Total data received: 200066.2 MiB (209784590336 bytes) Bandwidth per channel: 11185.687⇅ Mbps (1398210.9 kBps) Aggregate bandwidth: 55925.055↓  55931.819↑ Mbps Packet rate estimate: 5120114.0↓  4800666.6↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0094 s. ```  After:  ``` src/./tcpkali  -m xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   -c 10 -T 30 127.0.0.1:8081 Destination: [127.0.0.1]:8081 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8081 Ramped up to 10 connections. Total data sent:     251409.6 MiB (263622033408 bytes) Total data received: 251353.1 MiB (263562850304 bytes) Bandwidth per channel: 14058.190⇅ Mbps (1757273.7 kBps) Aggregate bandwidth: 70283.059↓  70298.841↑ Mbps Packet rate estimate: 6434619.5↓  6033797.9↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0002 s. ```
redisson,redisson,1415892be1f9fe04010a0184a2aa88aa8505e35a,https://github.com/redisson/redisson/commit/1415892be1f9fe04010a0184a2aa88aa8505e35a,Improvement - LRUCacheMap speed optimization up to 200x
trinodb,trino,51ba662ec49282060c38213853fa7abcc3a68b6a,https://github.com/trinodb/trino/commit/51ba662ec49282060c38213853fa7abcc3a68b6a,Do not spool tail segment if it's small enough  This avoid spooling relatively small tail pages
trinodb,trino,4f480877d01f28fa68665af19f41f217c4156201,https://github.com/trinodb/trino/commit/4f480877d01f28fa68665af19f41f217c4156201,Improve performance when listing columns in Iceberg
dibo-software,diboot,708f013b090fbe697859825b3402f328b2fb8e1c,https://github.com/dibo-software/diboot/commit/708f013b090fbe697859825b3402f328b2fb8e1c,* 系统参数配置Service接口增加缓存支持
crate,crate,4ce8c4d61f4642125ae76013011c054acbe155d4,https://github.com/crate/crate/commit/4ce8c4d61f4642125ae76013011c054acbe155d4,
netty,netty,4c0d9df9220230837e53f9fe44960d1bb84478b7,https://github.com/netty/netty/commit/4c0d9df9220230837e53f9fe44960d1bb84478b7,Add ReadOnlyAbstractByteBuf to reduce bounds-checks (#15413)  Motiviation:  Currently ReadOnlyByteBuf needs to to do extra bounds checks for some situation where in reality we can skip these when the wrapped ByteBuf is a sub-type of AbstractByteBuf.  Modification:  - Add ReadOnlyAbstractByteBuf and use it if the wrapped ByteBuf is a sub-type of AbstractByteBuf  Result:  Less bounds check for read only ByteBufs in most cases
apache,hudi,00709d2928d95d36146c23ff6a1ae0d1537a51a0,https://github.com/apache/hudi/commit/00709d2928d95d36146c23ff6a1ae0d1537a51a0,[HUDI-8676] Improve ValidationUtils performance by lazy appending msg (#12450)
elastic,elasticsearch,725dda37ea5,ES backport of: https://github.com/elastic/elasticsearch/commit/725dda37ea5,Flush instead of synced-flush inactive shards  With peer recovery retention leases and sequence-number based replica allocation  a regular flush can speed up recovery as a synced-flush. With this change  we will flush instead of synced-flush when a shard becomes inactive. 
SpigotMC,BungeeCord,93508d508328d082c5892cde37d2af9ff6af82de,https://github.com/SpigotMC/BungeeCord/commit/93508d508328d082c5892cde37d2af9ff6af82de,#3841  #3842: Speed up TagUtil#fromJson()  Reduce complexity and recursive calls
camunda,camunda,3c5f6075992909965750e7976f85d25964a7a900,https://github.com/camunda/camunda/commit/3c5f6075992909965750e7976f85d25964a7a900,feat: optimize TimestampBasedImportIndex is prio1 (was prio6)
camunda,camunda,75471c7c40589a6d171174eaf93aa6fd1d97abc1,https://github.com/camunda/camunda/commit/75471c7c40589a6d171174eaf93aa6fd1d97abc1,perf: engine maintains a cache of compiled mapping rules
keycloak,keycloak,7eb7eb286daa776d7a4e87fcc764c7aa540148a4,https://github.com/keycloak/keycloak/commit/7eb7eb286daa776d7a4e87fcc764c7aa540148a4,Reuse InfinispanConnectionProvider instances in DefaultInfinispanConnectionProviderFactory (#39263)  Closes #39253  Signed-off-by: Ryan Emerson <remerson@redhat.com>
internetarchive,heritrix3,0f0db370ee196a382bf754f4362bc29a54283719,https://github.com/internetarchive/heritrix3/commit/0f0db370ee196a382bf754f4362bc29a54283719,UI: Disable Jetty graceful shutdown for faster restarts  Graceful shutdown would be useful if you could deploy the UI in a high-availability configuration and direct new requests to a different instance while the current instance finished its outstanding ones. But as you can't  it's just making restarting Heritrix slow for little benefit.
pinpoint-apm,pinpoint,8583890ef1dd483783d89201d59461fe2a9d1231,https://github.com/pinpoint-apm/pinpoint/commit/8583890ef1dd483783d89201d59461fe2a9d1231,[#noissue] Optimize TagUtils
alibaba,fastjson2,35ec71105cd2fc43c533719268e2ab6b5f9a6dbe,https://github.com/alibaba/fastjson2/commit/35ec71105cd2fc43c533719268e2ab6b5f9a6dbe,optimize JSONReaderUTF8
openpnp,openpnp,d94355f3764fc416444466527a8644b308413aff,https://github.com/openpnp/openpnp/commit/d94355f3764fc416444466527a8644b308413aff,a possible fix for issue #1804. optimising the route around all the feeders  when there are zero feeders available
camunda,camunda,1bd7dd75313f56d4c646bbcb8dca0d03f152f877,https://github.com/camunda/camunda/commit/1bd7dd75313f56d4c646bbcb8dca0d03f152f877,feat: update broker exporter to filter on intent  Zeebe broker needs to filter based on intent before running `exportRecord` for each configured exporter. Therefore  the intent filter needs to be executed before exporting.  ExporterContainer Each configured exporter is wrapped into an exporter container instance. Before exporting  the `acceptRecord` method is called to filter based on configured RecordFilter. It is updated to filter for intent as well.  ExporterDirector This class holds all configured exporters and manages the lifecycle of exporting. It has a `createEventFilter` method where it collects all `RecordFilter`s from all configured exporters. Then  creates a global filter. This is used to prevent unnecessary `exportRecord` call if none of the exporter filters match that record.
quarkusio,quarkus,f6e323991d4001d13674e4ea4ca359c688469e97,https://github.com/quarkusio/quarkus/commit/f6e323991d4001d13674e4ea4ca359c688469e97,Merge pull request #47198 from franz1981/use_raw_netty_buffers  Save additional copies on byte[] and String REST resources
Athou,commafeed,085a3cbb50e7fa54334fa18504cddb41331a6b7e,https://github.com/Athou/commafeed/commit/085a3cbb50e7fa54334fa18504cddb41331a6b7e,unwanted entries are already filtered at the dao level
camunda,camunda,95b11c1aa811793e64a4a3d468aea7efc1c653a3,https://github.com/camunda/camunda/commit/95b11c1aa811793e64a4a3d468aea7efc1c653a3,feat: invalidate caches instead of updating them to avoid upfront performance cost
trinodb,trino,3bc0b9e08a92429fdba221da6ddf893b9892b75f,https://github.com/trinodb/trino/commit/3bc0b9e08a92429fdba221da6ddf893b9892b75f,Bulk fetch all columns from all tables per schema in Oracle connector  Since Oracle has a list of schemas to be filtered during the runtime  we end up on reading additional columns which will be filtered so instead of O(#tables) we have simplified to O(#schema).
alibaba,fastjson2,ae2910bace7928a8182c72bf04e0c22418910fc6,https://github.com/alibaba/fastjson2/commit/ae2910bace7928a8182c72bf04e0c22418910fc6,parse double use byte[]
crate,crate,0503c5accbc4ce0a2219e4dfe22fc9ebc17fe566,https://github.com/crate/crate/commit/0503c5accbc4ce0a2219e4dfe22fc9ebc17fe566,Compute MathContext only once on NumericType creation  Don't create a new instance per implicitCast or sanitizeValue call
soot-oss,soot,31c17b44a90026554e68c5d500531f8e08f446ca,https://github.com/soot-oss/soot/commit/31c17b44a90026554e68c5d500531f8e08f446ca,Merge pull request #2174 from MarcMil/opt  Optimize minimum typing computation
apache,pinot,e74087dea671a233658d5c4aaeae3e827b37b832,https://github.com/apache/pinot/commit/e74087dea671a233658d5c4aaeae3e827b37b832,[SSE] Segment limit when order-by on group-by keys (#16297)
apache,shenyu,8f3a1d07e2e29d68c7db26a44d4085bf085598cf,https://github.com/apache/shenyu/commit/8f3a1d07e2e29d68c7db26a44d4085bf085598cf,[type:optimize] Optimize BodyParamUtils with Caffeine cache (#5905)  * [type:optimize] Optimize BodyParamUtils with Caffeine cache  - Added Caffeine cache for base type checking - Improved isBaseType() performance with 5000-entry cache - Reduced class loading overhead  * [type:fix] Fix for style check.  ---------  Co-authored-by: aias00 <liuhongyu@apache.org>
springdoc,springdoc-openapi,02ed05f9ba62275334f4d3609f22ad4acc67bc4a,https://github.com/springdoc/springdoc-openapi/commit/02ed05f9ba62275334f4d3609f22ad4acc67bc4a,Improve performance of getGenericMapResponse
amaembo,streamex,724067b9bac0f7e6c4d1b4fcbccedb08c71f8b1f,https://github.com/amaembo/streamex/commit/724067b9bac0f7e6c4d1b4fcbccedb08c71f8b1f,Inline the implementation of mapKeysPartial and mapValuesPartial to reduce the indirection at runtime
spring-projects,spring-data-jpa,83be337b2c1ccc3511b12a2a6e91537b2ca824d6,https://github.com/spring-projects/spring-data-jpa/commit/83be337b2c1ccc3511b12a2a6e91537b2ca824d6,Consider only top-level properties for tuple query selection.  We now only consider top-level properties for tuple query selection to avoid join products caused by selecting nested relationships.  Closes #3908
apache,camel,dd2dacdcbcfd3d16417254e7d9b38d08f168f753,https://github.com/apache/camel/commit/dd2dacdcbcfd3d16417254e7d9b38d08f168f753,(chores) camel-bean: removed redundant operations
netty,netty,6180cd2c561cf9011af26c89e3f7fd0d8f3793d9,https://github.com/netty/netty/commit/6180cd2c561cf9011af26c89e3f7fd0d8f3793d9,chore: use readRetainedSlice to avoid copy in SpdyFrameDecoder (#14573) (#14585)  Motivation:  We can use readRetainedSlice to reduce the copy of bytes in `SpdyFrameDecoder`.  Modification:  Make use of `readRetainedSlice` instead of new a byteBuf and copy data to it.  Result: Less copy  ---------  Co-authored-by: He-Pin(kerr) <hepin.p@alibaba-inc.com>
apache,hudi,b90cb5de9b4acaf86d2be03880d7df8334f3fade,https://github.com/apache/hudi/commit/b90cb5de9b4acaf86d2be03880d7df8334f3fade,[HUDI-9687] Set min parallelism to 10 for SparkHoodieBloomIndexHelper (#13676)
alibaba,fastjson2,55c8694c369164ea0bb5ef2baabed3d83a5610d3,https://github.com/alibaba/fastjson2/commit/55c8694c369164ea0bb5ef2baabed3d83a5610d3,fix adjust SupportSmartMatch to support lowercase for issue #3408 (#3494)  * fix adjust SupportSmartMatch to support lowercase for issue #3408  * fix avoid unnecessary compute
jooby-project,jooby,bc0d8366fad0098807f8af0fb5453014b3e85302,https://github.com/jooby-project/jooby/commit/bc0d8366fad0098807f8af0fb5453014b3e85302,performance: netty optimize response headers
vespa-engine,vespa,a49f63e70df92abab9a6b28ea0722878e3b50bc2,https://github.com/vespa-engine/vespa/commit/a49f63e70df92abab9a6b28ea0722878e3b50bc2,Merge pull request #34420 from vespa-engine/vekterli/use-preserialized-json-field-names  Use preserialized JSON field name strings for Document V1 output
apache,iotdb,262605e76576ce471aedd08a81179319f6bd51de,https://github.com/apache/iotdb/commit/262605e76576ce471aedd08a81179319f6bd51de,RegionMigrateProcedure and RegionReconstructProcedure no longer acquire lock #15122
apache,drill,6cea55defad03d158e1f958abc65fdbe9d970550,https://github.com/apache/drill/commit/6cea55defad03d158e1f958abc65fdbe9d970550,DRILL-8526: Hive Predicate Push Down for ORC and Parquet (#2995)
apache,hbase,763093ac34833cab4c277073dea16222268ef47a,https://github.com/apache/hbase/commit/763093ac34833cab4c277073dea16222268ef47a,HBASE-29218: Reduce calls to Configuration#get() in decompression path (#6857)  Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
jenkinsci,jenkins,e52d021721d35b8a29e73bf7ad7e43991c3c0341,https://github.com/jenkinsci/jenkins/commit/e52d021721d35b8a29e73bf7ad7e43991c3c0341,Do not inspect non-`AbstractProject` for `Computer.getBuilds`
apache,paimon,b868fe3a464dc049b77a7a5c3542e1873ced47f9,https://github.com/apache/paimon/commit/b868fe3a464dc049b77a7a5c3542e1873ced47f9,[VFS] Enable table cache in PVFS (#5958)
alibaba,fastjson2,e3f4893e3c1c4306ab6e998c1ebe33f5112a4ae6,https://github.com/alibaba/fastjson2/commit/e3f4893e3c1c4306ab6e998c1ebe33f5112a4ae6,optimize JSONWriterUTF8 writeUUID
netty,netty,ea25b511f369d603aec8e3e0901e51fd5beac59e,https://github.com/netty/netty/commit/ea25b511f369d603aec8e3e0901e51fd5beac59e,IoUring: Use IORING_RECVSEND_POLL_FIRST when we are sure there is no … (#14552)  …more data on the Socket to read  Motivation:  We can use IORING_RECVSEND_POLL_FIRST to tell io_uring to directly arm and skip the initial transfer attempt if we are sure there is nothing to read anymore. This reduces some overhead. See https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#socket-state  Modifications:  Use IORING_RECVSEND_POLL_FIRST when applicable  Result:  Less overhead
languagetool-org,languagetool,7c15fdf347bf9bc5cb1480ab12fa3f02e1f00e26,https://github.com/languagetool-org/languagetool/commit/7c15fdf347bf9bc5cb1480ab12fa3f02e1f00e26,use StringBuilder to concatenate string
prometheus,jmx_exporter,f384a5c7d037fb5739667b20c58e64323e685b76,https://github.com/prometheus/jmx_exporter/commit/f384a5c7d037fb5739667b20c58e64323e685b76,Minor Collector performance tweaks (#1227)  Signed-off-by: dhoard <doug.hoard@gmail.com>
jetty,jetty.project,d9d7eb33f6119fa27f95eb49935c0a6407eeee37,https://github.com/jetty/jetty.project/commit/d9d7eb33f6119fa27f95eb49935c0a6407eeee37,Merge pull request #13060 from jetty/jetty-12.0.x-13007-WebSocketFrameFlusher  Improvements to the WebSocket FrameFlusher
alibaba,fastjson2,df76155604b35c30b8be95cf9c734fd7c4898666,https://github.com/alibaba/fastjson2/commit/df76155604b35c30b8be95cf9c734fd7c4898666,optimize readString
dromara,dynamic-tp,821ae43b407e2b80aab2ee9932790aa0652387eb,https://github.com/dromara/dynamic-tp/commit/821ae43b407e2b80aab2ee9932790aa0652387eb,optimize
opensolon,solon,81e5e0cbe75faa63136b329613537030ff7a2359,https://github.com/opensolon/solon/commit/81e5e0cbe75faa63136b329613537030ff7a2359,solon-expression SnelEvaluateParser 改用 string 直接作解析（表达式比较短，没必要用 reader）
trinodb,trino,e496b3a25378d50ae29bbdff5e3e65254e741d71,https://github.com/trinodb/trino/commit/e496b3a25378d50ae29bbdff5e3e65254e741d71,Specialize methods in FlatHashStrategyCompiler  Special cases the scenario in FlatHashStrategy code generation to avoid allocating a MutableVariableWidthOffset container as part of the hashFlat logic when less than 500 columns are present.  Also adds a specialized method signature for valueIdentical for flat vs variable width types to avoid the same MutableVariableWidthOffset allocations.
apache,bookkeeper,b10aec21bf35eefb73b96e95028eab7d759209f6,https://github.com/apache/bookkeeper/commit/b10aec21bf35eefb73b96e95028eab7d759209f6,Reduce metadataLock contention in LedgerHandle (#4549)
metersphere,metersphere,b53ee23e25341f973149622388ec329fc561912f,https://github.com/metersphere/metersphere/commit/b53ee23e25341f973149622388ec329fc561912f,refactor(工作台): 优化测试计划概览卡片接口访问时间
pinpoint-apm,pinpoint,98cc821a34c0e0f436937e0b3de4836170f0f2e6,https://github.com/pinpoint-apm/pinpoint/commit/98cc821a34c0e0f436937e0b3de4836170f0f2e6,[#10318] Improved serialization performance of primitive values
LaurieWired,Malimite,a578b088e114261756f08cb33731fab5b87be3c6,https://github.com/LaurieWired/Malimite/commit/a578b088e114261756f08cb33731fab5b87be3c6,Improve database write speeds  Wrap multiple SQL statements in a single transaction and share the database connection to drastically speed up the write speed of the function decompilaton results.
quarkusio,quarkus,5d830e996f71f0ac6ee02f6798858cb7e0fbac48,https://github.com/quarkusio/quarkus/commit/5d830e996f71f0ac6ee02f6798858cb7e0fbac48,Merge pull request #45042 from mariofusco/no-empty-ctor-deser  Generate reflection free Jackson deserializers for classes without an empty constructor
quarkusio,quarkus,34d9dd99bdb0c56d31ddf45d688e3e3ac5f9c7f6,https://github.com/quarkusio/quarkus/commit/34d9dd99bdb0c56d31ddf45d688e3e3ac5f9c7f6,ArC: optimize Instance injection points  - only collect InjectionPoint metadata if any of the resolved beans is dependent
alibaba,fastjson2,0e36eaa18332b39e303b3ac8385ea0020a5defc7,https://github.com/alibaba/fastjson2/commit/0e36eaa18332b39e303b3ac8385ea0020a5defc7,optimize JSONReaderASCIISlash
signalapp,Signal-Server,aafcd63a9f2c93640013daee16256319b708e303,https://github.com/signalapp/Signal-Server/commit/aafcd63a9f2c93640013daee16256319b708e303,Decrease the page size for OPK queries  A single element is almost always enough
jOOQ,jOOQ,b3b8a7fd8a2b82712537cab111abe6c4a05362df,https://github.com/jOOQ/jOOQ/commit/b3b8a7fd8a2b82712537cab111abe6c4a05362df,[jOOQ/jOOQ#17786] Avoid static type registry lookups in DSL::if_ and DSL::iif calls  if possible
alibaba,fastjson2,39ad97a5405c8ce159c9789259faf76a54266010,https://github.com/alibaba/fastjson2/commit/39ad97a5405c8ce159c9789259faf76a54266010,optimize writeInt32/int64
signalapp,Signal-Server,5f5c345f944a7e38f12099fec2e9dcd0c487b0d2,https://github.com/signalapp/Signal-Server/commit/5f5c345f944a7e38f12099fec2e9dcd0c487b0d2,Use one thread per account in the "encrypt timestamps" crawler
apache,maven,63374c17e6bb8347f9c72f0e2238f2c4cdab3c9a,https://github.com/apache/maven/commit/63374c17e6bb8347f9c72f0e2238f2c4cdab3c9a,Improvements in ITs executing - provide default local repo  When local repo is not provided  method getLocalRepository executes external mojo from toolbox  it will be more effective to provide it statically and avoid external mojo even in embedded mode
soot-oss,soot,cf328c67353ae9b3ad2e8a931b4934603869b685,https://github.com/soot-oss/soot/commit/cf328c67353ae9b3ad2e8a931b4934603869b685,Make the FastColorer fast again  Use HashSet instead of ArraySet when there are many locals
datastax,jvector,531f7362ae024ebba97dcf3a0f03b2c91a066f58,https://github.com/datastax/jvector/commit/531f7362ae024ebba97dcf3a0f03b2c91a066f58,Reduce the number of vector allocations in BuildScoreProvider.pqBuilderScoreProvider (#419)  Reduce the number of vector allocations in BuildScoreProvider.pqBuildScoreProvider. Addresses #418
dataease,dataease,efb088f24ba66de979773a3587f9aa01c5961e66,https://github.com/dataease/dataease/commit/efb088f24ba66de979773a3587f9aa01c5961e66,fix: 取消重重解析sql，降低耗时
apache,hertzbeat,126268f7ec1cf923cb896d0e6ecbd11dc30d1d6e,https://github.com/apache/hertzbeat/commit/126268f7ec1cf923cb896d0e6ecbd11dc30d1d6e,[feature] Add a new Singleton-pattern-based LRU local cache (#2907)
houbb,sensitive-word,992063e46abae42e0e8d8dd50158e90db806a82b,https://github.com/houbb/sensitive-word/commit/992063e46abae42e0e8d8dd50158e90db806a82b,Merge pull request #114 from k9999dot/master  issue110 并适配黑白名单一次的遍历
apache,shardingsphere,01d66bd5065619649d1264ce25ab43a3de984de4,https://github.com/apache/shardingsphere/commit/01d66bd5065619649d1264ce25ab43a3de984de4,Use foreach to replace java stream api to improve performance (#35949)
apache,pulsar,066a20c33fe28ed0bb5ec9b3846ed67560877302,https://github.com/apache/pulsar/commit/066a20c33fe28ed0bb5ec9b3846ed67560877302,[fix][broker] fix ExtensibleLoadManager to override the ownerships concurrently without blocking load manager thread (#24156)
zfoo-project,zfoo,4addf115436a6f99a93241f1baa929b30ba556e0,https://github.com/zfoo-project/zfoo/commit/4addf115436a6f99a93241f1baa929b30ba556e0,perf[cache]: use EventBus in SingleCache to avoid single scheduler thread blocking
apache,flink-cdc,b161521477a7c3d6ba41a5ee2d45ce71877e1780,https://github.com/apache/flink-cdc/commit/b161521477a7c3d6ba41a5ee2d45ce71877e1780,[FLINK-37572][pipeline-connector/paimon] Shuffle Event by bucket and tableid to avoid data skew  This closes  #3970
quarkusio,quarkus,805c3f3576ca3c8055554a548989aafd20914d2d,https://github.com/quarkusio/quarkus/commit/805c3f3576ca3c8055554a548989aafd20914d2d,Merge pull request #45081 from cdsap/avoid_multiple_resolution  Avoiding calculate conditional dependencies again for the same configuration  model and project
quarkusio,quarkus,890fe3f71866fdae7d5d63cbda8fc5f77684b5de,https://github.com/quarkusio/quarkus/commit/890fe3f71866fdae7d5d63cbda8fc5f77684b5de,Merge pull request #46514 from gsmet/avoid-creating-dotnames  Avoid repeatedly creating same DotNames in ResteasyReactiveProcessor
Konloch,bytecode-viewer,5c0096abcb5bc9cc5d6c33ec3ba5482020a36dbf,https://github.com/Konloch/bytecode-viewer/commit/5c0096abcb5bc9cc5d6c33ec3ba5482020a36dbf,optimize out zipping/decompression when using Dex2Jar
opentripplanner,OpenTripPlanner,8ec6fef168e650d8aa06d462fd2180a29ae3bbd4,https://github.com/opentripplanner/OpenTripPlanner/commit/8ec6fef168e650d8aa06d462fd2180a29ae3bbd4,Reduce excessive visibility point count already in graph building time  Keep the visibility points which have the best connectivity.
microcks,microcks,bbfd933fa3b2a4702e068ec8763a7f3f02257c1a,https://github.com/microcks/microcks/commit/bbfd933fa3b2a4702e068ec8763a7f3f02257c1a,feat: #1543 Caching the ScriptEngine and moving from bindings to ScriptContext Signed-off-by: Laurent Broudoux <laurent.broudoux@gmail.com>
locationtech,jts,ac7a165592ee7c31037e666e50b765f861163aff,https://github.com/locationtech/jts/commit/ac7a165592ee7c31037e666e50b765f861163aff,Improve `LineStringSnapper` performance by using squared distance (#1111)
quarkusio,quarkus,e42d2ed266a4d6f5f3d4f06446632612014ec533,https://github.com/quarkusio/quarkus/commit/e42d2ed266a4d6f5f3d4f06446632612014ec533,ArC: optimize "List all" injection points  - only collect InjectionPoint metadata if any of the resolved beans is dependent
camunda,camunda,50a967afff8c67739e8c0437ca194e351bf5046d,https://github.com/camunda/camunda/commit/50a967afff8c67739e8c0437ca194e351bf5046d,feat: add verbose flag to operate backup list API to improve performance  Adding verbose to the request sent to ES/OS speeds up the query by a lot  but we don't get startTime and metadata fields populated. startTime will be null  while metadata can be extracted from the snapshot name if metadata field is missing. closes #30695  (cherry picked from commit fe1e6e30eab1fb124d87d4a0a4811d0e24428f44)
prestodb,presto,e540ed92a1a28d70acd5c85ec872bab48b4fc093,https://github.com/prestodb/presto/commit/e540ed92a1a28d70acd5c85ec872bab48b4fc093,Fix distributed sort parallelism for single node execution  The AddExchanges optimizer rule is disabled for single node execution. The AddExchanges was responsible for marking the SortNode as partial. When the SortNode is not marked as partial  Velox only runs a single instance of a pipeline containing a SortNode.
netty,netty,664f20315cc4aae48f6335e9691a5113c1959215,https://github.com/netty/netty/commit/664f20315cc4aae48f6335e9691a5113c1959215,Optimise HttpMethod#valueOf fast path lookup. (#14982)  Motivation:  `HttpMethod#valueOf` has a fast path lookup for _GET_ and _POST_  those call the `HttpMethod#name()` which calls `AsciiString#toString()` and that is not necessary since we can cache the interned corresponding strings locally like `HttpVersion#valueOf` does.  Changes:  Declare _GET_/_POST_ interned string constants and use them for fast path lookup in `valueOf` method.  Result:  Avoid two un-necessaries method call on the fast path.
orientechnologies,orientdb,48233cbc06ce836472aaa4edfabcbd645b4fe28b,https://github.com/orientechnologies/orientdb/commit/48233cbc06ce836472aaa4edfabcbd645b4fe28b,fix: make sure to skip null key on index rebuild if are ignored by the index type  issue #10367
apache,ignite,09d70a404b88b446b2b42671404dd75410c0580c,https://github.com/apache/ignite/commit/09d70a404b88b446b2b42671404dd75410c0580c,IGNITE-25736 Speed up warmup running in several threads - Fixes #12153.  Signed-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>
alibaba,fastjson2,0f5ddf176190d3ca1b3666e5eafff4c9ed3aa288,https://github.com/alibaba/fastjson2/commit/0f5ddf176190d3ca1b3666e5eafff4c9ed3aa288,optimize readOffsetDateTime
jline,jline3,b15af193d771f74d2601896e235020561e05eed4,https://github.com/jline/jline3/commit/b15af193d771f74d2601896e235020561e05eed4,chore: make downcall handles static final (#1331)  * This is (will be) helpful for GraalVM Native Image to not need to register FunctionDescriptor manually: https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/ForeignInterface.md * It also slightly improves performance in general by avoiding to re-read those static fields on every usage.
alibaba,fastjson2,95504325142c20775aaa9506c65c76f8c38f9901,https://github.com/alibaba/fastjson2/commit/95504325142c20775aaa9506c65c76f8c38f9901,use JSONReaderASCII
TheAlgorithms,Java,ad5e496b0c105c6b4e16b8a9547473c51be85096,https://github.com/TheAlgorithms/Java/commit/ad5e496b0c105c6b4e16b8a9547473c51be85096,Add LongestIncreasingSubsequenceNLogN (#6221)
spring-projects,spring-data-elasticsearch,8b43af2d333a294d334c09e2b44f7734d014c644,https://github.com/spring-projects/spring-data-elasticsearch/commit/8b43af2d333a294d334c09e2b44f7734d014c644,optimize capacity & add assert messages in GeoJson.  Original Pull Request #3064 Closes #3063  Signed-off-by: 정보교 (Bogus Jung) <bogusjung0317@gmail.com>
prometheus,client_java,ab8e41f8267ecb4d9237b6a89dfe79bb9a594808,https://github.com/prometheus/client_java/commit/ab8e41f8267ecb4d9237b6a89dfe79bb9a594808,Update PrometheusScrapeHandler compression handling (#1493)  Resolves #1488  Don't create response buffer for compressed responses  Signed-off-by: Jay DeLuca <jaydeluca4@gmail.com>
alibaba,fastjson2,c82332e28853bf60ae0dbd7ef4985341fa8333d5,https://github.com/alibaba/fastjson2/commit/c82332e28853bf60ae0dbd7ef4985341fa8333d5,fix capacity (#3242)  * fix capacity  * optimize write csv
netty,netty,0b576697bc84a3f233d8d81aafad5e661e7d09b8,https://github.com/netty/netty/commit/0b576697bc84a3f233d8d81aafad5e661e7d09b8,Avoid regexp usage in HttpVersion (#15277)  Motivation:  `HttpVersion` class initialization causes regexp pattern to compile and it keeps present in static field forever  while it is used in very rare code branch.  Modification:  Replace regexp with custom parsing for very rare code branch.  Result:  No more `Pattern.compile` on `HttpVersion` class initialization. Should improve netty cold start a bit.  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
netty,netty,0f813918e3dc216af84998eb55df26b81a752b57,https://github.com/netty/netty/commit/0f813918e3dc216af84998eb55df26b81a752b57,Clearing EPOLL flags can save syscall (#15025)  Motivation: EPOLL write always clear EPOLLOUT  but sometime is not needed to submit the new ops  if it hasn't changed  Modifications: Save modifying ops if hasn't changed  Effect: Faster clear flags   Found while profiling   ![image-4](https://github.com/user-attachments/assets/11e1686a-a3a2-4675-b796-a51dc040eb4f)  ---------  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
alibaba,fastjson2,2978489509664ed84ba4af92952770c053cec2b5,https://github.com/alibaba/fastjson2/commit/2978489509664ed84ba4af92952770c053cec2b5,simplify containsEscaped (#3295)  * simplify containsEscaped  * use getLongUnaligned  * code style  * add comments  * code style
quarkusio,quarkus,109cb5d59d5695ef4143d0d5ac5416dde1a21e5d,https://github.com/quarkusio/quarkus/commit/109cb5d59d5695ef4143d0d5ac5416dde1a21e5d,Merge pull request #45106 from aloubyansky/graph-conflict-resolution  More efficient dependency tree conflict resolver
apache,pulsar,b936f46d2dd2ade98521b7825ee9277549703ef1,https://github.com/apache/pulsar/commit/b936f46d2dd2ade98521b7825ee9277549703ef1,[improve][broker] Optimize message expiration rate repeated update issues (#24073)  Co-authored-by: zjxxzjwang <zjxxzjwang@tencent.com>
modelcontextprotocol,java-sdk,c3a7c1ac1e04c141e95df1b1a77dc127b7ce0311,https://github.com/modelcontextprotocol/java-sdk/commit/c3a7c1ac1e04c141e95df1b1a77dc127b7ce0311,perf(webflux): optimize session broadcasting with Flux.fromIterable (#109)  Replace Flux.fromStream(sessions.values().stream()) with more efficient Flux.fromIterable(sessions.values()) to eliminate unnecessary stream conversion when broadcasting messages to active sessions  Signed-off-by: jitokim <pigberger70@gmail.com>
Azure,azure-sdk-for-java,9cb129b7a83b7c08f2bd058e648024ea77bcf02b,https://github.com/Azure/azure-sdk-for-java/commit/9cb129b7a83b7c08f2bd058e648024ea77bcf02b,Support using native transports when available (#45247)  Support using native transports when available
apache,camel,5e3074215a60a97b511abca9d6b195f30db3edd1,https://github.com/apache/camel/commit/5e3074215a60a97b511abca9d6b195f30db3edd1,CAMEL-21663: fix NPE hurting sjms/sjms2 performance
quarkusio,quarkus,e9d35e5f75c668e22c6fcfcc76bda79f4d23f04d,https://github.com/quarkusio/quarkus/commit/e9d35e5f75c668e22c6fcfcc76bda79f4d23f04d,Conditionally log debug statement about missing factory
BiglySoftware,BiglyBT,0bd27dcd6b9990f87abfed17ae4221740e262409,https://github.com/BiglySoftware/BiglyBT/commit/0bd27dcd6b9990f87abfed17ae4221740e262409,Reduce file existence checks
netty,netty,4d868a6da3aeb0b222ac24c8bf5f63a416f74ecf,https://github.com/netty/netty/commit/4d868a6da3aeb0b222ac24c8bf5f63a416f74ecf,IoUring: Force submit and instantly running completions when Channel becomes unwritable (#14693)  Motivation: When the Channel becomes unwritable we need to ensure we can write and release the data as soon as possible. Failing to do so increase the memory usage and also hurts the performance in general and so will reduce throughtput  Modifications:  - Add a new class which is used to drain the CompletionQueue before finally run the completions - When we do a flush() and detect that the Channel became unwritable trigger a submit (io_uring_enter) and directly obtain the completions and run them. This will ensure we can release buffers directly when the socket is writable as the write will be executed inline by io_uring_enter.  Result:  Before the change:  ``` Destination: [127.0.0.1]:8088 Interface lo address [127.0.0.1]:0 Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1 connections. Total data sent:     100726.8 MiB (105619652608 bytes) Total data received: 100717.7 MiB (105610199040 bytes) Bandwidth per channel: 56149.221⇅ Mbps (7018652.6 kBps) Aggregate bandwidth: 28073.354↓  28075.867↑ Mbps Packet rate estimate: 2575952.0↓  2409771.0↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0955 s. ```  After this change:  ``` Using interface lo to connect to [127.0.0.1]:8088 Ramped up to 1 connections. Total data sent:     134226.4 MiB (140746555392 bytes) Total data received: 134226.5 MiB (140746670080 bytes) Bandwidth per channel: 74841.324⇅ Mbps (9355165.5 kBps) Aggregate bandwidth: 37420.677↓  37420.647↑ Mbps Packet rate estimate: 3427561.0↓  3211839.9↑ (12↓  45↑ TCP MSS/op) Test duration: 30.0896 s. ```  ---------  Co-authored-by: Chris Vest <christianvest_hansen@apple.com>
datastax,jvector,356c490a2bf7cd34758f6e36460d74dbc378841e,https://github.com/datastax/jvector/commit/356c490a2bf7cd34758f6e36460d74dbc378841e,Acceleration of initial centroid selection in kmeans++  Use Java Vector API to accelerate chooseInitialCentroids in KMeansPlusPlusClusterer.
liquibase,liquibase,e55ed38d96395bfd8a74c0cce89d4b6511b7d586,https://github.com/liquibase/liquibase/commit/e55ed38d96395bfd8a74c0cce89d4b6511b7d586,reduce number of API calls for analytics by caching events (DAT-19789) (#6801)
vespa-engine,vespa,1db16f7bc75cf4a81b9d27e6189abcb4ef652c59,https://github.com/vespa-engine/vespa/commit/1db16f7bc75cf4a81b9d27e6189abcb4ef652c59,Compute tensor rendering options from request once  Previously did so twice for every rendered document. The request does not change between documents  so neither does the tensor rendering options.
alibaba,fastjson2,71f84e59bb89d8f6c5a9ca8e37bc239e52d5f73c,https://github.com/alibaba/fastjson2/commit/71f84e59bb89d8f6c5a9ca8e37bc239e52d5f73c,optimize readString
camunda,camunda,477f5060d3cb2e190ef6d20dee05b495f43d0e24,https://github.com/camunda/camunda/commit/477f5060d3cb2e190ef6d20dee05b495f43d0e24,feat: use batchOperationCache in rdbms exporter to only export relevant item records #33936
netty,netty,d1b63585a695426b0ab5aab75d6499ee9269fd55,https://github.com/netty/netty/commit/d1b63585a695426b0ab5aab75d6499ee9269fd55,IoUring: Use buffer ring for all reads when configured. (#14804)  Motivation:  When we first introduced the support for a buffer ring we decided to only use if for the first read as we didn't have a good way to fill the ring when we did run out of buffers. This is not true anymore after df496ccf93f81a17e3773c64a3773d0c78014737  so we should just always use the buffer ring if configured.  Modifications:  Always use the buffer ring for recv when configured.  Result:  Better use of the buffer ring if configured
trinodb,trino,067b0eab4790982d7b1a5b84f20d442391108747,https://github.com/trinodb/trino/commit/067b0eab4790982d7b1a5b84f20d442391108747,Avoid parsing min and max twice
jetty,jetty.project,2901eb683cb373d620850cfdef91f97c2469003a,https://github.com/jetty/jetty.project/commit/2901eb683cb373d620850cfdef91f97c2469003a,Fixes #12663 - Improve scalability of HttpCookieStore.Default.  Now using a ReadWriteLock for HttpCookieStore.Default  to allow concurrent access to match(URI).  Signed-off-by: Simone Bordet <simone.bordet@gmail.com>
opensolon,solon,1b4f4faae5fa6f0fa50086a2dccd8f23e877de79,https://github.com/opensolon/solon/commit/1b4f4faae5fa6f0fa50086a2dccd8f23e877de79,solon-expression MethodCache 优化缓存
ant-media,Ant-Media-Server,a3b3e14887a0d745caff10cd7f1139631776fb89,https://github.com/ant-media/Ant-Media-Server/commit/a3b3e14887a0d745caff10cd7f1139631776fb89,add cache for broadcast queries
apache,incubator-seata,b530e30d3da56b89dd01b4ce00a10f4572765b0a,https://github.com/apache/incubator-seata/commit/b530e30d3da56b89dd01b4ce00a10f4572765b0a,optimize: Use shared `EventLoop` for TM and RM clients to reduce thread overhead and improve performance (#7179)
zfile-dev,zfile,86333d16fb10b7f206425e5ec9de31a477b5b057,https://github.com/zfile-dev/zfile/commit/86333d16fb10b7f206425e5ec9de31a477b5b057,1. 优化根据用户名获取用户 id 的方法，增加缓存 2. 缓存用户可用存储源，加快访问速度
dromara,RuoYi-Vue-Plus,1c5ae2f16806d1be3e771831e5a03e27b05ba778,https://github.com/dromara/RuoYi-Vue-Plus/commit/1c5ae2f16806d1be3e771831e5a03e27b05ba778,update 优化 获取地址支持IPv6逻辑
648540858,wvp-GB28181-pro,b348b2d3a9a3fa27dcbaf74555f81377c5d4f1fb,https://github.com/648540858/wvp-GB28181-pro/commit/b348b2d3a9a3fa27dcbaf74555f81377c5d4f1fb,通道表增加索引
datastax,jvector,6b4fc385f0650c58ae49c1119f6143292601dcba,https://github.com/datastax/jvector/commit/6b4fc385f0650c58ae49c1119f6143292601dcba,Fix regression in assembleAndSum PQ decoder performance (#379)  Use scalar implementation for assembleAndSum if preferred vector width is 128-bit
apache,iotdb,2cfd029f2141d52acc9f10c6a95636834c444eba,https://github.com/apache/iotdb/commit/2cfd029f2141d52acc9f10c6a95636834c444eba,Pipe: use mem table to batch write table data into tsfile (#15373)
dromara,RuoYi-Vue-Plus,71180584dab104c40351f87ef4cf8070d4201535,https://github.com/dromara/RuoYi-Vue-Plus/commit/71180584dab104c40351f87ef4cf8070d4201535,update 优化根据字典类型查询信息增加一级缓存
apache,paimon,b08a8206fee5986f7cf89800d31fee06c537ab97,https://github.com/apache/paimon/commit/b08a8206fee5986f7cf89800d31fee06c537ab97,[core] Add manifest cache to the FallbackReadFileStoreTable (#5118)
datastax,jvector,8a631291618363a0b3d48054c374148dcdabab0c,https://github.com/datastax/jvector/commit/8a631291618363a0b3d48054c374148dcdabab0c,Search pruning & fix the reported number of visited nodes (#405)  * Fix number of nodes visited. Now reporting the correct average of all queries  * Fix a bug in the time measurement  * Enable search pruning by default  * Add convenience function for simple one-off searches with reranking
apache,hadoop,7764b39e4abf352a3665e7b1d24dec0654b37e6d,https://github.com/apache/hadoop/commit/7764b39e4abf352a3665e7b1d24dec0654b37e6d,HDFS-17414. [FGL] RPCs in DatanodeProtocol support fine-grained lock (#6649)
trinodb,trino,da914c38a21e79194ef561ad86479d4eb6a49dea,https://github.com/trinodb/trino/commit/da914c38a21e79194ef561ad86479d4eb6a49dea,Reuse fieldWritten array between rows
alibaba,fastjson2,2390708a3245e6bcb0cd4330cd8849f90d06f412,https://github.com/alibaba/fastjson2/commit/2390708a3245e6bcb0cd4330cd8849f90d06f412,optimize deserialize float
signalapp,Signal-Server,db2cd20dcb400360895f924bf99f13731cbe776f,https://github.com/signalapp/Signal-Server/commit/db2cd20dcb400360895f924bf99f13731cbe776f,Skip shared multi-recipient message payloads for small messages
openmrs,openmrs-core,458473fbb1123324496898f16a831d9cacc39df4,https://github.com/openmrs/openmrs-core/commit/458473fbb1123324496898f16a831d9cacc39df4,TRUNK-6162 Eliminate redundant calls to getUnrunDatabaseChanges
debezium,debezium,695e56cb22804471fc69443e0bf1558b8fc1a350,https://github.com/debezium/debezium/commit/695e56cb22804471fc69443e0bf1558b8fc1a350,DBZ-8879: Fix performance regression in debezium-core
Graylog2,graylog2-server,78ff05b121706519c6754f9880acc388f34d1890,https://github.com/Graylog2/graylog2-server/commit/78ff05b121706519c6754f9880acc388f34d1890,Move output batch size calculation out of synchronized block (#21415)
netty,netty,b513630de63afc8866dca30f9af280c4029bcc61,https://github.com/netty/netty/commit/b513630de63afc8866dca30f9af280c4029bcc61,IoUring: Improve our implementation of the IoUringBufferRing (#14788)  Motivation:  We already pool buffers anyway so we can simplify the IoUringBufferRing a lot by just allocating buffers once we used everything. There is no need to keep track a of buffers that were borrowed out of the ring as we can just return them to our own pool once these are released and then refill the buffer ring if needed.  Modifications:  - Remove all the complex house-keeping of buffers in the IoUringBufferRing and just refill it out of our pool once there is no buffer left.  Result:  Simplify and less overhead
questdb,questdb,61c4735edc716bdf2f2340e9475c7362a18b78fe,https://github.com/questdb/questdb/commit/61c4735edc716bdf2f2340e9475c7362a18b78fe,perf(sql): expanded fast-path support for non-keyed ASOF JOINs (#5553)
alibaba,fastjson2,d11f0ef1785b2a0f799e901ebf2adfe97cc2a796,https://github.com/alibaba/fastjson2/commit/d11f0ef1785b2a0f799e901ebf2adfe97cc2a796,optimize JSONReaderASCII::readString
camunda,camunda,8dcb9d7f21e0010e2c9ff688d05bb667ab63b3de,https://github.com/camunda/camunda/commit/8dcb9d7f21e0010e2c9ff688d05bb667ab63b3de,feat: introducing `deleteIntermediateStateIfExists` method  Reason: Allow deletion of intermediate state without additional checks in order to benefit performance.
quarkusio,quarkus,39c5261b595e6824ab7499aefaa03ce18a2efd46,https://github.com/quarkusio/quarkus/commit/39c5261b595e6824ab7499aefaa03ce18a2efd46,Merge pull request #45312 from geoand/rr-recorder-mh  Use MethodHandles for constructing RESTEasy Reactive invokers
netty,netty,db0bcb0d7d344db3924a8c7a19c0f8884746ffc9,https://github.com/netty/netty/commit/db0bcb0d7d344db3924a8c7a19c0f8884746ffc9,IoUring: Optimize CompletionBuffer.processOneNow(...) (#14894)  Motivation: As it is most likely that the completion is one of the last that was filled into the buffer we should better search the array backwards.  Modifications:  - Search the array backwards - Add unit tests  Result:  Reduce overhead when process one completion
apache,atlas,527ff208403715ad60cce5d1b6ea554c9c596867,https://github.com/apache/atlas/commit/527ff208403715ad60cce5d1b6ea554c9c596867,ATLAS-5025: entity-create perf improvement - skip setLabel call when empty (#339)
Card-Forge,forge,0da1681c96014228b7647c6222aa283add8e819a,https://github.com/Card-Forge/forge/commit/0da1681c96014228b7647c6222aa283add8e819a,checkStaticAbilities: skip wrong zone earlier for less looping (#7018)  Co-authored-by: tool4EvEr <tool4EvEr@192.168.0.60>
igniterealtime,Openfire,2d8344519f7bcf54413fa1885ce8a1840c65d892,https://github.com/igniterealtime/Openfire/commit/2d8344519f7bcf54413fa1885ce8a1840c65d892,OF-2928: Improve speed of 'multi' providers  Where possible  execute operations on providers in parallel.
Card-Forge,forge,a8488502e7ce2801daaca4580db6980dd88a59c2,https://github.com/Card-Forge/forge/commit/a8488502e7ce2801daaca4580db6980dd88a59c2,Reduce some View updates (#6966)
magefree,mage,f17cbbe72b7fff0f9ec3bb0a90698d7cda3d5e28,https://github.com/magefree/mage/commit/f17cbbe72b7fff0f9ec3bb0a90698d7cda3d5e28,AI: improved performance and fixed crashes on use cases with too much target options like "deals 5 damage divided as you choose" (related to #11285): * added DebugUtil.AI_ENABLE_DEBUG_MODE for better IDE's debugging AI code; * it's a target amount optimizations; * it's use a grouping of possible targets due same static and dynamic stats (name  abilities  rules  damage  etc); * instead of going through all possible combinations  AI uses only meaningful targets from particular groups;
magefree,mage,c0256da7ded71ea00a2742a9312bcbe4fdfb887b,https://github.com/magefree/mage/commit/c0256da7ded71ea00a2742a9312bcbe4fdfb887b,GUI  deck: added deck's auto-validate on import or load  improved generation performance;
apache,pinot,5758aef1ce41124a97d4ba0f6467400978ca4dd2,https://github.com/apache/pinot/commit/5758aef1ce41124a97d4ba0f6467400978ca4dd2,Optimize lookup table in join operator (#14972)
apache,incubator-kie-drools,dee09fde2262a5f528a98242b5f202f854f6e82a,https://github.com/apache/incubator-kie-drools/commit/dee09fde2262a5f528a98242b5f202f854f6e82a,[KIE-DROOLS-6190] avoid reattaching a peer of a removed node during incremental compilation (#6210)
apache,hudi,cc153174aba9a446afc3b192320acd3cf5ebf308,https://github.com/apache/hudi/commit/cc153174aba9a446afc3b192320acd3cf5ebf308,[HUDI-9314] Reduce overhead for payload creation (#13138)
vespa-engine,vespa,faeddbd6166d6436db5e31fd2382b641eded92ba,https://github.com/vespa-engine/vespa/commit/faeddbd6166d6436db5e31fd2382b641eded92ba,avoid entire fill phase when selecting only matchfeatures
thingsboard,thingsboard,87d5a28cb6b59f5ecd00af906b6ca94b1c92195f,https://github.com/thingsboard/thingsboard/commit/87d5a28cb6b59f5ecd00af906b6ca94b1c92195f,Merge pull request #12365 from AndriiLandiak/fix/related-edges-cache  Improve related edges cache cleanup
trinodb,trino,f17647b33c0cf7bb95d7f6aae4ef31d7d12b765e,https://github.com/trinodb/trino/commit/f17647b33c0cf7bb95d7f6aae4ef31d7d12b765e,Skip updating partition stats when adding partitions without stats
netty,netty,c5aaab5a7bd04cca2250b942485978f488de69fa,https://github.com/netty/netty/commit/c5aaab5a7bd04cca2250b942485978f488de69fa,Avoid expensive native calls in ReferenceCountedOpenSslEngine.rejectRemoteInitiatedRenegotiation for TLSv1.3 (#15440)  Motivation:  While profiling  we found a few strange places in the SSLHandler logic  specifically `SSL.getHandshakeCount` calls:   ![image](https://github.com/user-attachments/assets/3a27de6b-8dea-4679-a07c-c099e4b60d7f)  So  first of all  it seems like this method is called too much  secondly  in the current implementation  we can avoid this call for tlsv1.3.  Modification:  Regroup logical checks to delay `getHandshakeCount` calls. This change fully eliminates `getHandshakeCount` calls for TLSv1.3 and make code easier to read.  Result:  No more `getHandshakeCount` calls for TLSv1.3
quarkusio,quarkus,02a23ba33f364a30ff17b4cea536acf460a7df36,https://github.com/quarkusio/quarkus/commit/02a23ba33f364a30ff17b4cea536acf460a7df36,Use empty Set when no annotation present in injection point
camunda,camunda,96f848c2690fa8a34faa35727dc9ae108654dc99,https://github.com/camunda/camunda/commit/96f848c2690fa8a34faa35727dc9ae108654dc99,perf: use static instances for keys in objects in Record
quarkusio,quarkus,9560996f7ebf3c16a57947171778437c2c053841,https://github.com/quarkusio/quarkus/commit/9560996f7ebf3c16a57947171778437c2c053841,Use explicit String.concat in OTelDurationConverter  This is done because OTelDurationConverter is used at startup and the use of "+" forces the use of StringConcatFactory which is rather heavy and not beneficial in this simple case
apache,rocketmq,881507e89f6d9905f4ebf6a1b3f84fb02c031a39,https://github.com/apache/rocketmq/commit/881507e89f6d9905f4ebf6a1b3f84fb02c031a39,[ISSUE #9115] Optimize the broker's reverse notification for consumerId change (#9116)  * [ISSUE #9115] Optimize the broker's reverse notification for consumerId change
opentripplanner,OpenTripPlanner,df64c5a7f5ffc4453db5f74d21536770c27cb3ff,https://github.com/opentripplanner/OpenTripPlanner/commit/df64c5a7f5ffc4453db5f74d21536770c27cb3ff,Changes based on review comments and small optimization.
camunda,camunda,10144c42dc3c14fdb904e5d5332783fc4a500470,https://github.com/camunda/camunda/commit/10144c42dc3c14fdb904e5d5332783fc4a500470,Small optimization in BufferUtil: do not allocate an empty string if buffer is empty (#30460)  ## Description Do not allocate an empty String if the `DirectBuffer` is empty and a small refactoring of `contentsEqual` function (bytecode size from 68 to 64)
apache,logging-log4j2,a4dfb37e34acf530833748bbbee2b8be9e5de9f4,https://github.com/apache/logging-log4j2/commit/a4dfb37e34acf530833748bbbee2b8be9e5de9f4,Minimize lock usage in `InternalLoggerRegistry` (#3418)  Co-authored-by: Volkan Yazıcı <volkan@yazi.ci>
apache,camel,52c7cc7c7e58e33dc3e626f05082fd4a3f25af8f,https://github.com/apache/camel/commit/52c7cc7c7e58e33dc3e626f05082fd4a3f25af8f,CAMEL-22176: camel-core - make the cache eviction blocking (#18406)  ## Motivation  We can have a lot of CPU consumption in case of a big cache that is frequently updated  ## Modifications:  * Make the cache eviction blocking to prevent the addition of new changes/entries in parallel  which could quickly fill up the cache  to avoid spending our time evicting changes
pinpoint-apm,pinpoint,042d92b6f1c8279d1bd8900ce52b745bcb018877,https://github.com/pinpoint-apm/pinpoint/commit/042d92b6f1c8279d1bd8900ce52b745bcb018877,[#noissue] Refactor iterator in JsonFields to use Iterators.forArray
jplag,JPlag,96ac48ea7e66833ecc028d599bf1f5f6b529c551,https://github.com/jplag/JPlag/commit/96ac48ea7e66833ecc028d599bf1f5f6b529c551,Implement parallel submission parsing if the language does not expect a certain submission order.
mybatis,mybatis-3,4668f59af0549b8f9c27594f86fe3979300d92b9,https://github.com/mybatis/mybatis-3/commit/4668f59af0549b8f9c27594f86fe3979300d92b9,Merge pull request #3418 from nieqiurong/202502222213  Reuse `SqlNode` instance created for virtually empty text node
casbin,jcasbin,677c1061743235a0903514a06b665b9b52b89ee4,https://github.com/casbin/jcasbin/commit/677c1061743235a0903514a06b665b9b52b89ee4,feat: optimize convertInSyntax's performance (#450)  Optimise convertInSyntax method by compiling Pattern only once and creating StringBuffer only when needed.
prestodb,presto,df71d0544de9d5c597f5396813079d819db836c5,https://github.com/prestodb/presto/commit/df71d0544de9d5c597f5396813079d819db836c5,Support native non-equal lookup join planning  This change adds an extractor to traverse the Join plan and get lookup variables in different PlanNode  which enables index look join without any equal join condition for native execution.
apache,commons-lang,2188eb0e2e15431b7c4a65f7168392c888f0ecd1,https://github.com/apache/commons-lang/commit/2188eb0e2e15431b7c4a65f7168392c888f0ecd1,Add Validate.isTrue(boolean  Supplier<String>)  Don't call TypeUtils.toString(Type) on every array item in TypeUtils.parameterize[WithOwner](Type  Class<?>  Map<TypeVariable<?>  Type>) unless required
quarkusio,quarkus,c0759c31d8cdc33f0901e6f9e3d7e3a790968c48,https://github.com/quarkusio/quarkus/commit/c0759c31d8cdc33f0901e6f9e3d7e3a790968c48,Merge pull request #41686 from gsmet/netty-avoid-finalizers  Enable io.netty.allocator.disableCacheFinalizersForFastThreadLocalThreads
openjdk,jmh,7fc3ffb53dc64c64df5d5b7b33eb5ccf74c6311f,https://github.com/openjdk/jmh/commit/7fc3ffb53dc64c64df5d5b7b33eb5ccf74c6311f,7903916: JMH: Faster self-PID getters
apache,pdfbox,bcc8f6c5124818a79923344c699eb7d92e598f64,https://github.com/apache/pdfbox/commit/bcc8f6c5124818a79923344c699eb7d92e598f64,PDFBOX-5997: avoid creation of temporary objects as proposed by Axel Howind  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1926545 13f79535-47bb-0310-9956-ffa450edef68
alibaba,fastjson2,43386905fdfb9cc0b717b3a7f7fc496f34d30777,https://github.com/alibaba/fastjson2/commit/43386905fdfb9cc0b717b3a7f7fc496f34d30777,optimize gen readObject
confluentinc,schema-registry,cce20af628f46df99baa4c8a1e108546ed7f4805,https://github.com/confluentinc/schema-registry/commit/cce20af628f46df99baa4c8a1e108546ed7f4805,Minor optimization for Protobuf message index serialization (#3712)
theonedev,onedev,77f4fd85b9622d303332e8e76e2440f4917b87b3,https://github.com/theonedev/onedev/commit/77f4fd85b9622d303332e8e76e2440f4917b87b3,chore: Refactor work executor to improve  performance
pentaho,pentaho-kettle,1a0109b5042c539d68788c913e2b05b7cc5a31b6,https://github.com/pentaho/pentaho-kettle/commit/1a0109b5042c539d68788c913e2b05b7cc5a31b6,feat[PDI-20372]: optimize DatabaseLookup cache creation  * Optimization: cache the rows as they are being read from the DB this also allows a better memory management  * Optimizations: use of enhanced for's use try-with-resources inline single use variables remove unreachable code use of intrinsics and more recent Java constructs (like computeIfAbsent) simplification of some internal calculations and condition clauses extraction of common parts from if's replace single character strings by the character  * Code style  Sonar improvements and orthographic corrections  * Adapt unit tests to the new methods
trinodb,trino,04701064be2c95d25dd56cdd625ac828bdc37667,https://github.com/trinodb/trino/commit/04701064be2c95d25dd56cdd625ac828bdc37667,Reduce contribution of RLE blocks size in page splitting  Consider only the underlying value block size for RLE blocks in page splitting calculation. This prevents the splitting up of Pages due to getSizeInBytes of RLE blocks being a factor of positions count
classgraph,classgraph,e8bbd99a71563823396565b7ff2d5aaa0418e279,https://github.com/classgraph/classgraph/commit/e8bbd99a71563823396565b7ff2d5aaa0418e279,Merge pull request #900 from kamilkrzywanski/latest  Replace "String::replaceAll" with pre compiled pattern
apache,pdfbox,64a20d854e611041c50c2952465dd8200ff8b2e8,https://github.com/apache/pdfbox/commit/64a20d854e611041c50c2952465dd8200ff8b2e8,PDFBOX-5230: improve javadoc and optimizations by Daniel Gredler  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1924076 13f79535-47bb-0310-9956-ffa450edef68
opentripplanner,OpenTripPlanner,b7c4b045f91edd46be1f8469548890ef65778134,https://github.com/opentripplanner/OpenTripPlanner/commit/b7c4b045f91edd46be1f8469548890ef65778134,Remove use of expanded geometry  There is no apparent reason for using it. Expanded geomerty typically has 4 times more points which slows down computations a lot.
camunda,camunda,60ef26cc9b0efa32dff846d2b489c2fe8f6d8086,https://github.com/camunda/camunda/commit/60ef26cc9b0efa32dff846d2b489c2fe8f6d8086,Create meters once to avoid gauge re-registration (#29136)  ## Description  This PR builds the meters once when the class is created. This not only avoids unnecessary allocation when modifying them  but it also ensures we're not re-registering the gauge multiple times.  Note that this was not broken before  as we were always using the same state object :relieved: But it still led to ugly warnings about it.
vespa-engine,vespa,d58e52c535d588d97c1bfa0570240fdd70647fae,https://github.com/vespa-engine/vespa/commit/d58e52c535d588d97c1bfa0570240fdd70647fae,Only enable request/connection logging handlers if enabled
quarkusio,quarkus,34b221d8579066741c66cb024f8b6bdd1bef9571,https://github.com/quarkusio/quarkus/commit/34b221d8579066741c66cb024f8b6bdd1bef9571,Use ClassInfo#memberClasses() instead of using the ClassLoader
jetty,jetty.project,a89ea96c7d27b2043702d699f98bb36bbe832f33,https://github.com/jetty/jetty.project/commit/a89ea96c7d27b2043702d699f98bb36bbe832f33,Use provided buffer size when serving non-Path Resources  The helper IOResources.asContentSource wraps a given Resource to be served as a Content.Source. Unless a resource had a Path component  InputStreamContentSource is used as a fallback.  Previously  we were using a hardcoded buffer size of 4096  even if the request size was larger (e.g.  32768).  This severely limited throughput when serving content via non-Path-bearing Resource implementations.  Use the provided buffer pool and size instead.  Fixes #12963  Signed-off-by: Christian Kohlschütter <christian@kohlschutter.com>
keycloak,keycloak,afde8ece15aefc46f80e8efe30e1c9f81d66dd9a,https://github.com/keycloak/keycloak/commit/afde8ece15aefc46f80e8efe30e1c9f81d66dd9a,Avoid sending/receiving the session JSON too often (#37095)  Closs #37093  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
apache,hudi,76dbdaa65e3e2865d250f862ff23ab0039679e87,https://github.com/apache/hudi/commit/76dbdaa65e3e2865d250f862ff23ab0039679e87,[HUDI-8622] Fix performance regression of tag when written into consistent bucket index table (#12389)  * fix: fix performance regression of tag when written into consistent bucket index table  1. fix performance regression of tag when written into consistent bucket index table 2. unified the tag logic of the bucket index and lazily loaded the required mapper information  ---------  Signed-off-by: TheR1sing3un <chaoyang@apache.org> Co-authored-by: danny0405 <yuzhao.cyz@gmail.com>
opensolon,solon,6b31a189ae0185495166552f7b3523e1ef083f2e,https://github.com/opensolon/solon/commit/6b31a189ae0185495166552f7b3523e1ef083f2e,solon-flow 优化
openpnp,openpnp,fd894ed1cccf529b1d46d56753831551532dbf59,https://github.com/openpnp/openpnp/commit/fd894ed1cccf529b1d46d56753831551532dbf59,Merge pull request #1707 from janm012012/OptimizeJobFiducialCheck  optimize fiducial checking in job using travelling salesman
BiglySoftware,BiglyBT,32c7ecdf1f1caea1f77b4cee9bf1e0a27cf3605a,https://github.com/BiglySoftware/BiglyBT/commit/32c7ecdf1f1caea1f77b4cee9bf1e0a27cf3605a,Fix performance issues with ip filter table in config
helidon-io,helidon,cb67955cf6261570783718707fac059046ab10b5,https://github.com/helidon-io/helidon/commit/cb67955cf6261570783718707fac059046ab10b5,Add Gson Support (#10265)  * Add Gson Support  * Update dependencies and annotationProcessorPaths  * Fixed annotation processor path for all updated modules  where new Feature API is used.  * Trying to decrease number of modules in "others" module set to reduce duplicate invocations and shorten execution time. Added codegen  http  and builder to `core`  ---------  Co-authored-by: Tomas Langer <tomas.langer@oracle.com>
camunda,camunda,b65260b3a682e5e0f73983341dda3b8f02a1cb4c,https://github.com/camunda/camunda/commit/b65260b3a682e5e0f73983341dda3b8f02a1cb4c,feat: use aggregation instead of transformer
PBH-BTN,PeerBanHelper,efa971e670ef4527420f0769984559b710a40616,https://github.com/PBH-BTN/PeerBanHelper/commit/efa971e670ef4527420f0769984559b710a40616,避免重复内存分配
apache,hbase,17ebfbe69c30258ae3544897956e992b9b139ade,https://github.com/apache/hbase/commit/17ebfbe69c30258ae3544897956e992b9b139ade,HBASE-29222 Avoid expensive tracing calls if tracing is disabled (#6863)  Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
BiglySoftware,BiglyBT,6485dea6ff766a10fb098351eb60947eb913779e,https://github.com/BiglySoftware/BiglyBT/commit/6485dea6ff766a10fb098351eb60947eb913779e,Might as well grab subs results async
igniterealtime,Openfire,ede2313e4e990cf819d2793152d9d8ef63840610,https://github.com/igniterealtime/Openfire/commit/ede2313e4e990cf819d2793152d9d8ef63840610,OF-2951: Asynchronously send presence probes to remote domains  When probing presence of entities on remote domains  do not block for the server-to-server session to be established.  This intends to speed up the process of starting up a client (which now no longer needs to wait for outbound s2s connections to be established).
apache,hudi,0185ede3beb79fd3e46ce1d7fc7398a45f30f559,https://github.com/apache/hudi/commit/0185ede3beb79fd3e46ce1d7fc7398a45f30f559,[MINOR] Follow up HUDI-8803  optimize vectorized reader by cache 'batchIdxField' (#13023)  Co-authored-by: wangyinsheng <wangyinsheng@jd.com>
plutext,docx4j,4849ec7ed24c45e1ff311c6526f7287ccac1c327,https://github.com/plutext/docx4j/commit/4849ec7ed24c45e1ff311c6526f7287ccac1c327,Don't log document content unless DEBUG is set.  Fixes #535
apache,flink,65772142fda02bb000f4adfca3c8589907130402,https://github.com/apache/flink/commit/65772142fda02bb000f4adfca3c8589907130402,[FLINK-36172][runtime] Optimize transient metric cleanup
apache,hadoop,22a9287e4a6d0641c932dd38e065649c3df6bb0b,https://github.com/apache/hadoop/commit/22a9287e4a6d0641c932dd38e065649c3df6bb0b,HDFS-17696. Optimize isBlockReplicatedOk method when scheduleReconStruction parameter is false (#7243)  Reviewed-by: Haiyang Hu <haiyang.hu@shopee.com> Signed-off-by: Tao Li <tomscut@apache.org>
netty,netty,f0ca3482bbb2500d84c7070b9c67004cf24a2517,https://github.com/netty/netty/commit/f0ca3482bbb2500d84c7070b9c67004cf24a2517,AsciiString::regionMatches is not optimized for AsciiString (#14947) (#14953)  Motivation: AsciiString::regionMatches is not optimized for the case where the other char sequence is an AsciiString  increasing the chance it become bimorphic e.g. String  AsciiString  Modifications: Create two fast path in case the other char sequence is an AsciiString  Result: Faster and more stable ascii region matching  Motivation:  Explain here the context  and why you're making that change. What is the problem you're trying to solve.  Forward port of https://github.com/netty/netty/pull/14947  Co-authored-by: Francesco Nigro <nigro.fra@gmail.com>
vespa-engine,vespa,f822c413d349a0bf59ddde376a86aaadd9b8054f,https://github.com/vespa-engine/vespa/commit/f822c413d349a0bf59ddde376a86aaadd9b8054f,Use getOutputType during execution
google,guava,54cc5eac07886563680d252fc06d4b10ccf107f1,https://github.com/google/guava/commit/54cc5eac07886563680d252fc06d4b10ccf107f1,Make `Joiner` sometimes use `String.join`  which was [optimized](https://bugs.openjdk.org/browse/JDK-8265237) for JDK 17+.  Implementation strategy:  - No matter what we do  the JDK is going to allocate a `String[]` to guard (presumably) against concurrent mutation. (Paging [Frozen Arrays](https://openjdk.org/jeps/8261007)?) - Our main ability to optimize around that is to convince the JDK that it can preallocate an array of the proper size. Since the JDK [won't do that in its `Iterable` overload](https://bugs.openjdk.org/browse/JDK-8305774)  we want to pass it an array. - Sadly  the JDK requires that the array be of type `CharSequence[]`  so we can't reuse the result of `toArray()`. Thus  if we want to avoid allocating `toArray()` output _on top of_ a `CharSequence[]` and a `String[]`  we have to write directly to a `CharSequence[]` during iteration over the array  with the array pre-sized based on the collection size (but without relying on that size to exactly match what we get from the iteration).  See discussion in https://github.com/google/guava/issues/7532.  RELNOTES=n/a PiperOrigin-RevId: 704698587
prometheus,jmx_exporter,0a3437b2e3c5f4ccac1042bab0abf842c3bc7fd2,https://github.com/prometheus/jmx_exporter/commit/0a3437b2e3c5f4ccac1042bab0abf842c3bc7fd2,Redesign cache for better performance (#1163)  Signed-off-by: Rafał Sumisławski <rafal.sumislawski@coralogix.com>
debezium,debezium,f2109c1b46ec419eff33471d5584707f4daaaf17,https://github.com/debezium/debezium/commit/f2109c1b46ec419eff33471d5584707f4daaaf17,DBZ-8860 Improve transaction/event cache performance
alibaba,fastjson2,4e2476c6dd95a30fb25f668b411491ac73664238,https://github.com/alibaba/fastjson2/commit/4e2476c6dd95a30fb25f668b411491ac73664238,Swar 20250120 (#3305)  * isASCII  * swar  * isASCIIChar  * codestyle  * fix build error  * fix build error  * add IOUtilsBench  * optimize isASCII  * remove unused code  * add benchmark  * bug fix
quarkusio,quarkus,9289babfebe3233c4ed339a59eb01f0d330fbe18,https://github.com/quarkusio/quarkus/commit/9289babfebe3233c4ed339a59eb01f0d330fbe18,Merge pull request #45350 from geoand/rr-alloc-startup  Slightly optimize Quarkus REST startup by reducing unnecessary allocations
camunda,camunda,2c8dc5340034be7865f6ce775e60e235be029ea3,https://github.com/camunda/camunda/commit/2c8dc5340034be7865f6ce775e60e235be029ea3,feat: replace `DbString` with `DbShort` for storing `Intent#value()`  Changed `AsyncRequestMetadataKey` to store `Intent#value()` using `DbShort` instead of `Intent#name()` using `DbString`.  This improves key lookup efficiency and reduces storage size  while also making the state resilient to renaming of enum constants  which would otherwise break lookup logic based on string names.
apache,iotdb,8472c71bcdc9a7e0757854f5dcafb958bf7ce379,https://github.com/apache/iotdb/commit/8472c71bcdc9a7e0757854f5dcafb958bf7ce379,Fixed the issue where devices in the cache may be repeatedly fetched
google,guava,400af25292096746ed3f6164f0ff88209acbb19f,https://github.com/google/guava/commit/400af25292096746ed3f6164f0ff88209acbb19f,Make `AtomicReferenceFieldUpdater` fields `static` for [better performance](https://shipilev.net/blog/2015/faster-atomic-fu/#:~:text=thrown%20out%20of%20the%20window).  This may eliminate the reason for [an `Unsafe`-based implementation](https://github.com/google/guava/issues/6806) even under Java 8  but we will ideally confirm that with benchmarks before ripping that implementation out. (There's also Android: `AtomicReferenceFieldUpdater` is available there  but we should look into performance  including under older versions  especially with AFAIK no plans to remove `Unsafe` there.)  (Also  make a few other tiny edits to the backport copy so that it matches the mainline copy more closely.)  RELNOTES=n/a PiperOrigin-RevId: 713006636
apache,iotdb,764912c59ce5d41d7a74823dca04972f6380903b,https://github.com/apache/iotdb/commit/764912c59ce5d41d7a74823dca04972f6380903b,Pipe: Fixed the issue that the DropPipe Connector subtask process waits too long for the callback thread to end (#15605)
apache,hive,7871199a49c692deef70628bc12ef022f4099bd3,https://github.com/apache/hive/commit/7871199a49c692deef70628bc12ef022f4099bd3,HIVE-27872: Support multi-stream parallel fetch in JDBC driver (Kurt Deschler  reviewed by Attila Turoczy  Denys Kuzmenko)  This patch enables JDBC to open multiple sockets to an HS2 service and performance concurrent fetch results for a single query. This can significantly speed up fetching of large results that are bottlenecked on Thrift serialization  de-serialization  and string conversion. With adequate threads  fetch performance will now only be limited by the single-threaded client-side result processing and server-size row materialization.  Added JDBC Client parameter fetchThreads to control the number of threads allocated for fetching. Setting fetchThreads=1 will pipeline the Fetch using the existing connection asynchronously. Setting fetchThreads>1 will cause an additional Thrift connection to be opened to the server for each thread. Care should be taken not to over-allocate connections to the server.  Added new HiveConf parameter hive.jdbc.fetch.threads to allow config of fetchThrads from server conf.  Closes #4902
datastax,jvector,0962ddb95cc6697d4f01ef4d4d92dce3ef35bb9e,https://github.com/datastax/jvector/commit/0962ddb95cc6697d4f01ef4d4d92dce3ef35bb9e,Remove query-time usage of ByteSequence::slice to reduce object allocations (#403)
netty,netty,b0323b83bb12712d10186b737a1012fab3118a69,https://github.com/netty/netty/commit/b0323b83bb12712d10186b737a1012fab3118a69,IoUring: Make use of IORING_CQE_F_SOCK_NONEMPTY and IORING_ACCEPT_DON… (#14610)  …T_WAIT if supported  Modifications:  We can make use of both these features to not use POLLIN in some scenaries and also direclty know when there is no more connections to accept without scheduling another accept.  Modifications:  - Check if we can make use of these features as these are only ready on recent kernels - enable if possible  Result:  Less overhead on recent kernels
oshi,oshi,f7641bc41fb4fb273acfde7d3435dc58aa31d9f1,https://github.com/oshi/oshi/commit/f7641bc41fb4fb273acfde7d3435dc58aa31d9f1,Optimize netstat calls using /proc files (Issue #2826) (#2846)  * Optimize netstat calls using /proc files (Issue #2826)  * Improved TCP/UDP stats retrieval and modified parseByteArrayToStrings to include (\n)  * Removed TcpColon from the enum and Used ParseUtil.parseLongOrDefault()  ---------  Co-authored-by: Rohan Sarnad <rsarnad@cisco.com>
alibaba,fastjson2,15827e78c02bc72996e155256e4fee3af94ec3a9,https://github.com/alibaba/fastjson2/commit/15827e78c02bc72996e155256e4fee3af94ec3a9,optimize skipNumber
dibo-software,diboot,51ee2240deef3e6268cd1d2cc6bb40f6f81ce073,https://github.com/dibo-software/diboot/commit/51ee2240deef3e6268cd1d2cc6bb40f6f81ce073,* 优化关联数据绑定支持量大分批执行，适配大数据量导出等场景
apache,druid,76bcc8e91e03274d0059437d4cc795f585fcb89d,https://github.com/apache/druid/commit/76bcc8e91e03274d0059437d4cc795f585fcb89d,Improve S3 upload speeds using aws transfer manager (#17674)  * Improve S3 upload speeds using aws transfer manager  * Pass correct amazonS3Client to ServerSideEncryptingAmazonS3  * Add Unit Test Cases  * Turn on transfer manager by default  * Add Druid documentation
apache,dubbo,3771339964ae52c21dac6fb34d7988314dde7e46,https://github.com/apache/dubbo/commit/3771339964ae52c21dac6fb34d7988314dde7e46,Optimize parseCharset method for best performance. (#15203)
trinodb,trino,c86eb96395c3a9606d7aa3cc9055e2ca5995de0b,https://github.com/trinodb/trino/commit/c86eb96395c3a9606d7aa3cc9055e2ca5995de0b,Cache RowBlock retained size calculation
datastax,jvector,7cbb2e1a2e6b40aba7f46888fde2e273e7c835be,https://github.com/datastax/jvector/commit/7cbb2e1a2e6b40aba7f46888fde2e273e7c835be,Improved use ScoreTracker to avoid wasteful searching for very large k (#387)  This improves upon #384 by making the quantiles estimation more lightweight. It models the recent scores as a Normal distribution and uses incremental updates to track sufficient statistics of its mean and variance. Then  quantiles are computed from these statistics.  ---------  Co-authored-by: Jonathan Ellis <jbellis@datastax.com>
killbill,killbill,91daaadcedbcd7bb3fa182317dce6695ba9948c0,https://github.com/killbill/killbill/commit/91daaadcedbcd7bb3fa182317dce6695ba9948c0,Fix for 2116 (#2119)  * catalog: Remove synchronized statement when setting field values through reflection.  The reflection operations are not inherently thread-unsafe for independent object instances  so these synchronized statements are not useful. Also the creation of catalog occurs within one thread  so there is no concurrency issues.  * Issue #2116: Catalog initialization from plugin leads to lots of contention (#2118)  Co-authored-by: Stéphane Brossier <stephane@kill-bill.org>  ---------  Co-authored-by: Nick Mancuso <98536402+nick-at-finix@users.noreply.github.com>
alibaba,fastjson2,86f155b5c6c50532bdac32b7b0c42c832863d740,https://github.com/alibaba/fastjson2/commit/86f155b5c6c50532bdac32b7b0c42c832863d740,optimize IOUtils
netty,netty,1658c6e6875e2447ef1b4a3577a19e6bdba7bb68,https://github.com/netty/netty/commit/1658c6e6875e2447ef1b4a3577a19e6bdba7bb68,Avoid regexp in PlatformDependent (#15246)  Motivation:  We can easily replace regexp usage with manual loops  this should improve netty initialization speed and memory footprint a bit. Inspired by https://github.com/netty/netty/issues/15201.  Modification:  Refactored `normalizeOsReleaseVariableValue`  `normalize`  `normalizeArch` to avoid regexp usage.   Result:  No more regexp usage in the above methods.  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
netty,netty,590737e77bfd6d2daca0ccd453b8185eeec298dd,https://github.com/netty/netty/commit/590737e77bfd6d2daca0ccd453b8185eeec298dd,Remove regexp from AbstractHttpData (#15249)  Motivation:  The used regexp are pretty simple  so we can easily replace them with the custom loop to improve speed and reduce memory usage.  Modification:  Regexp removed and replaced with specialized custom loop.  Result:  No more pattern usages. Speed improved.  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
apache,shardingsphere,e53f39092a8ea87734a99e4612b9ad878751b0cf,https://github.com/apache/shardingsphere/commit/e53f39092a8ea87734a99e4612b9ad878751b0cf,Add load-table-metadata-batch-size props to concurrent load table metadata
openpnp,openpnp,9987d13e9ffd8f17501a3144a01a0d242c1ade12,https://github.com/openpnp/openpnp/commit/9987d13e9ffd8f17501a3144a01a0d242c1ade12,minor performance improvement
camunda,camunda,3d34648460a533b30288c9142b49a0d2be15201a,https://github.com/camunda/camunda/commit/3d34648460a533b30288c9142b49a0d2be15201a,fix: improve performance of range queries (#26647)  ## Description  Created one range query for range operations for all applicable data types.  ## Related issues  closes https://github.com/camunda/camunda/issues/24195
camunda,camunda,5df6e9f92ce85bf3f06ce33a853f1f5ab9e9693f,https://github.com/camunda/camunda/commit/5df6e9f92ce85bf3f06ce33a853f1f5ab9e9693f,fix: cache tree path values of adhoc subprocess (#29485)  related to #29404
Graylog2,graylog2-server,fad12ccbcfb8bb4d81d6850dec3391c51f53829d,https://github.com/Graylog2/graylog2-server/commit/fad12ccbcfb8bb4d81d6850dec3391c51f53829d,Improving Events Services. (#21172)  * Widen parameter type for easier use with different collections.  * Using methods for bulk retrieval to reduce db roundtrips.  * Extracting helper function for parsing timestamp filters.  * Improving typing.  * Removing leading underscore from variables.  * Adding license header.
dataease,dataease,78c67a5c2a7519bc151359cab4601d7f7d8e1cbe,https://github.com/dataease/dataease/commit/78c67a5c2a7519bc151359cab4601d7f7d8e1cbe,fix(图表): 修复部分导出超时
iterate-ch,cyberduck,4ae25fcd9754b05ab0faa2052338d546923f65c1,https://github.com/iterate-ch/cyberduck/commit/4ae25fcd9754b05ab0faa2052338d546923f65c1,Skip calls when no-op.
alibaba,fastjson2,0e44f76048778d2c03067ee856aeb4ef7db1ec28,https://github.com/alibaba/fastjson2/commit/0e44f76048778d2c03067ee856aeb4ef7db1ec28,optimize deserialize double
apache,paimon,27b23b3f746adf6bb6522e467c2d8746e99d2844,https://github.com/apache/paimon/commit/27b23b3f746adf6bb6522e467c2d8746e99d2844,[core] Optimize beforeSnapshot to LazyField in SnapshotReaderImpl
dromara,RuoYi-Vue-Plus,bbabffe191a1f50215b28f5e4013a37ab3be7408,https://github.com/dromara/RuoYi-Vue-Plus/commit/bbabffe191a1f50215b28f5e4013a37ab3be7408,!702 update 优化参数配置 * update 优化参数配置
trinodb,trino,d7d931189252c7af8cd728a6c7edc4f9bd3da2a6,https://github.com/trinodb/trino/commit/d7d931189252c7af8cd728a6c7edc4f9bd3da2a6,Convert outputChannels to primitive array
apache,sedona,af74a17cf1a274431542fd2ce74b86fb5cb2de52,https://github.com/apache/sedona/commit/af74a17cf1a274431542fd2ce74b86fb5cb2de52,[SEDONA-690] Optimize query side broadcast knn join (#1741)  * [SEDONA-688] Verify KNN parameter K must be equal or larger than 1  * [SEDONA-690] Optimize query side broadcast knn join  * fix isGeography parameter
crate,crate,be4baf1f66ed25179a1a64bafc86783f74e9ddac,https://github.com/crate/crate/commit/be4baf1f66ed25179a1a64bafc86783f74e9ddac,Fix WindowFunction plan when reusing same window def with params  When using the same window definition  which contains query params  in multiple window functions  one WindowAgg operator should be created.  Previously  because the `ParameterSymbol`  modeling the query params  didn't implement `hashCode()`  the window definition differed  resulting in multiple entries in `groupedFunctions` hash map of `WindowAgg#create()`
ClickHouse,clickhouse-java,52c6e6bb05c42764588e9b215c203e26341e6261,https://github.com/ClickHouse/clickhouse-java/commit/52c6e6bb05c42764588e9b215c203e26341e6261,Base implementation of RowBinaryWriter support in JDBC
thingsboard,thingsboard,fcc3e1245fa6089fbf7fb796380d41e24891bb49,https://github.com/thingsboard/thingsboard/commit/fcc3e1245fa6089fbf7fb796380d41e24891bb49,Merge pull request #13201 from volodymyr-babak/edge-slow-down-sys-tenant-notification-processing  Edge - slow down processing of edge events for SYS_TENANT_ID
vespa-engine,vespa,93d6b9619f7103599fc7b77fa268bd6f39c60491,https://github.com/vespa-engine/vespa/commit/93d6b9619f7103599fc7b77fa268bd6f39c60491,Merge pull request #34029 from vespa-engine/arnej/avoid-fill-if-only-matchfeatures  avoid entire fill phase when selecting only matchfeatures
datafaker-net,datafaker,c08231beff240d0ee5936a14b3ec0cad7d379e39,https://github.com/datafaker-net/datafaker/commit/c08231beff240d0ee5936a14b3ec0cad7d379e39,Descrease amount of calls to nextInt for numerify (#1545)
apache,shardingsphere,92f908d0c5b926a43996cce3945c281256c332bf,https://github.com/apache/shardingsphere/commit/92f908d0c5b926a43996cce3945c281256c332bf,Add indexes to repository table and refactor index metadata loading in Oracle. (#35394)
Snailclimb,guide-rpc-framework,4d5b2026d3c1e9ca1f66387995f12b922a228885,https://github.com/Snailclimb/guide-rpc-framework/commit/4d5b2026d3c1e9ca1f66387995f12b922a228885,feat(负载均衡)：优化一致性hash负载均衡器，解决每次地址变化都需要重构hash环的性能问题
jetlinks,jetlinks-community,916736c1ec2a2a86f81100d9f0449df69878dfa4,https://github.com/jetlinks/jetlinks-community/commit/916736c1ec2a2a86f81100d9f0449df69878dfa4,refactor: 优化并行度
confluentinc,schema-registry,fa4128eb060c437bbcea2004cf73882368d06b9c,https://github.com/confluentinc/schema-registry/commit/fa4128eb060c437bbcea2004cf73882368d06b9c,Minor optimization to cache parsed schemas (#3562)
netty,netty,70e954969724461c038ab7fdce7f08da4fe4d604,https://github.com/netty/netty/commit/70e954969724461c038ab7fdce7f08da4fe4d604,IoUring: Add code to support multishot in general and use ACCEPT_MULT… (#14807)  …ISHOT  Motivation:  Using multishot variants is considered the prefered way to use io_uring to reduce overhead. This change adds the needed changes to support it for "inbound" operations and implement it for accept so far.  Modifications:  - Add code to support multishot for inbound operations in general - Use ACCEPT_MULTISHOT if possible  Result:  Less overhead for acception connections and preparations to also be able to use multishot for other ops.
gaul,s3proxy,c84d0eb13f2031137e27d76d78a94c52d893e438,https://github.com/gaul/s3proxy/commit/c84d0eb13f2031137e27d76d78a94c52d893e438,Prefer log replacement over concatenation
trinodb,trino,6a3f87566fed3de7aba4678e43425d7667a94150,https://github.com/trinodb/trino/commit/6a3f87566fed3de7aba4678e43425d7667a94150,Use compiled comparator in TopNRankingOperator  Switches TopNRankingOperator to use a compiled PageWithPositionComparator instead of SimplePageWithPositionComparator.
dataease,dataease,df1eae3c21e2a0a37776fbf951c210eea2e29fbd,https://github.com/dataease/dataease/commit/df1eae3c21e2a0a37776fbf951c210eea2e29fbd,fix: 【数据导出中心】修复切换tab页导致cpu暴增
quarkusio,quarkus,068ba939ae3387c7c946e6bf8115a0cd09a862ab,https://github.com/quarkusio/quarkus/commit/068ba939ae3387c7c946e6bf8115a0cd09a862ab,Merge pull request #45536 from gsmet/do-not-copy-buffer  Quarkus REST - Use ByteBufInputStream instead of copying bytes
apache,paimon,3dab1b8a570f1b681fab9785bd309e3901b4f848,https://github.com/apache/paimon/commit/3dab1b8a570f1b681fab9785bd309e3901b4f848,[parquet] Merge the file index and the deletion vector and push down filtering (#4812)
questdb,questdb,eda7de2438ef2a5e0e2ae557d5e7a047c5559c20,https://github.com/questdb/questdb/commit/eda7de2438ef2a5e0e2ae557d5e7a047c5559c20,perf(sql): speed-up of simple projections (#5529)
SpigotMC,BungeeCord,bdd32d5a58cffe7c9ddc85119a428153d487a374,https://github.com/SpigotMC/BungeeCord/commit/bdd32d5a58cffe7c9ddc85119a428153d487a374,#3808: Do not decode packets that we don't handle
hs-web,hsweb-framework,002c7259f48e39282c6911de659aff7ed6b8bf05,https://github.com/hs-web/hsweb-framework/commit/002c7259f48e39282c6911de659aff7ed6b8bf05,refactor: 优化数据字典加载
apache,hive,04336cd2d9e89548b92b56a9ae7c81c389877731,https://github.com/apache/hive/commit/04336cd2d9e89548b92b56a9ae7c81c389877731,HIVE-29042: Performance degradation for add columns cascade (#5895)
sofastack,sofa-jraft,5e927ba6020eba8f0d01cd6bae9233ce40918623,https://github.com/sofastack/sofa-jraft/commit/5e927ba6020eba8f0d01cd6bae9233ce40918623,perf: use double-check in handleElectionTimeout (#1194)
apache,seatunnel,dcb76b94178e28a4fb8f59fa056773520dc77924,https://github.com/apache/seatunnel/commit/dcb76b94178e28a4fb8f59fa056773520dc77924,[Fix][Plugin] Optimize the plugin discovery mechanism (#8603)
google,guava,0232f388fbe4d45deea2f31a9c6e2f7283662fd5,https://github.com/google/guava/commit/0232f388fbe4d45deea2f31a9c6e2f7283662fd5,Optimize `SetView#equals()` to avoid unnecessary iterations. Fixes #7716.  RELNOTES=n/a PiperOrigin-RevId: 747600027
jooby-project,jooby,37ce3bc47da888073fa2f9996262ff2fb41de656,https://github.com/jooby-project/jooby/commit/37ce3bc47da888073fa2f9996262ff2fb41de656,performance: use cached version of well-known headers
iterate-ch,cyberduck,2c93f91d4f3c498b33d8dac9e561380e5733d8f4,https://github.com/iterate-ch/cyberduck/commit/2c93f91d4f3c498b33d8dac9e561380e5733d8f4,Merge pull request #16646 from iterate-ch/bugfix/DEEP-11-overview-limit  Boxes in result set not required.
apache,paimon,00992c5e2ef81d7a83c19d6f29c8eb0602a31e07,https://github.com/apache/paimon/commit/00992c5e2ef81d7a83c19d6f29c8eb0602a31e07,[rest] Refactor RESTTokenFileIO to cache FileIO in static cache (#4965)
lealone,Lealone,0dc512130ccd49e21722b30708433465b6130569,https://github.com/lealone/Lealone/commit/0dc512130ccd49e21722b30708433465b6130569,DataBuffer.write(ValueDataType  Object)的实现不需要拷贝ByteBuffer
apache,paimon,dba05e09539cddb7247f5e27d0a8292acfade77a,https://github.com/apache/paimon/commit/dba05e09539cddb7247f5e27d0a8292acfade77a,[core] Avoid getting file size for manifest list and writing file (#5224)
crate,crate,326971a6e9d61300977090e55d162305f291b85d,https://github.com/crate/crate/commit/326971a6e9d61300977090e55d162305f291b85d,Use bigger buffer size for OpenDAL's OperatorOutputStream  Helps to avoid BlockCountExceedsLimit and improves upload performance
apache,iotdb,037ef649ad6b78eb76e6ea536c5a0fe4a84d3fc6,https://github.com/apache/iotdb/commit/037ef649ad6b78eb76e6ea536c5a0fe4a84d3fc6,Fix sort elimination when table join self in TableModel
locationtech,jts,040802a74aabf08f3cee7cf3ec6d81ceb4f33906,https://github.com/locationtech/jts/commit/040802a74aabf08f3cee7cf3ec6d81ceb4f33906,Use buffer hole erosion heuristic for rings (#1117)
apache,pinot,99cde4d16433a3ded02a5a6a6c3b230d048bc8c0,https://github.com/apache/pinot/commit/99cde4d16433a3ded02a5a6a6c3b230d048bc8c0,[MSE] For constant expression query  solve it with a single random server (#16083)
google,guice,a7104775f9b268867463abfbe680fdd05a9bc668,https://github.com/google/guice/commit/a7104775f9b268867463abfbe680fdd05a9bc668,Add methodhandle support to `InternalFactoryToScopedProviderAdapter`  We can take advantage of the fact that `setDependency` is a no-op when `disableCircularProxies` is set  but otherwise this is a pretty straightforward translation.  For Singleton scoped factories  we can follow the pattern of `Initializable` and create a 'patchable' callsite which should enable constant folding of resolved singletons.  PiperOrigin-RevId: 739912256
trinodb,trino,2ac9c9cafc4473813e1307155dfef9654c1d4990,https://github.com/trinodb/trino/commit/2ac9c9cafc4473813e1307155dfef9654c1d4990,Make metadata call parallelism to default to number of cores
apache,maven,ab4149fa227e510721056372d5134bc34eded14f,https://github.com/apache/maven/commit/ab4149fa227e510721056372d5134bc34eded14f,[MNG-8520] Add cache for model resolution during project building (#2047)
opentripplanner,OpenTripPlanner,cded8677ecdae7553713395976c5502b20e41661,https://github.com/opentripplanner/OpenTripPlanner/commit/cded8677ecdae7553713395976c5502b20e41661,Always parallelize cache building during server startup
opentripplanner,OpenTripPlanner,8df8ed601b462538b5fcb2034a3ccfe0ff973843,https://github.com/opentripplanner/OpenTripPlanner/commit/8df8ed601b462538b5fcb2034a3ccfe0ff973843,Do not convert meters to degrees all the time  Define thresholds as degrees in the class data.
apache,incubator-seata,1b2f845652f128a63262a7e2b879695f71c911da,https://github.com/apache/incubator-seata/commit/1b2f845652f128a63262a7e2b879695f71c911da,optimize: seata-server independent HTTP thread pool (#7415)
apache,iotdb,c09bb166883e1b37c172c1e6e60d3fc71ef9de9d,https://github.com/apache/iotdb/commit/c09bb166883e1b37c172c1e6e60d3fc71ef9de9d,Optimize query execution in easy count(*) cases
trinodb,trino,7f71ab5938bc0f35086d68c29efd1e7499cbb89a,https://github.com/trinodb/trino/commit/7f71ab5938bc0f35086d68c29efd1e7499cbb89a,Reuse PagesIndexOrdering in WindowOperator
BiglySoftware,BiglyBT,15d95153f52ed40920667f65f3fc3abb610d09cb,https://github.com/BiglySoftware/BiglyBT/commit/15d95153f52ed40920667f65f3fc3abb610d09cb,Save a bit of CPU checking DHT addresses
alibaba,fastjson2,e9350865271d35a9f48fc2974259fdacda1d457b,https://github.com/alibaba/fastjson2/commit/e9350865271d35a9f48fc2974259fdacda1d457b,optimize writeInt32/int64 UTF16
trinodb,trino,01e6bc0c507af83e4ea08a0262fdae64b1005eea,https://github.com/trinodb/trino/commit/01e6bc0c507af83e4ea08a0262fdae64b1005eea,Use coarse grained memory reporting to reduce congestion  This reduces congestion in the memory tracking system by coarsening the granularity of memory tracking. In this paradigm  the most small incremental increases at the byte granularity will not actually result in a different coarse granularity value  so no reporting into memory tracking is necessary.
mybatis,mybatis-3,1a028241e190a7588d902222f094e24949c02a4d,https://github.com/mybatis/mybatis-3/commit/1a028241e190a7588d902222f094e24949c02a4d,Merge pull request #3252 from mawen12/optimize-mapper-builder  optimize mapper builder
trinodb,trino,77fbafb8df54e6f994672d92ee7e3e85567bc21b,https://github.com/trinodb/trino/commit/77fbafb8df54e6f994672d92ee7e3e85567bc21b,Use singleton JsonFactory while serializing  Factory is used to create generators/parsers and it can be shared
apache,druid,612c48f3a8e7c34f2f07812c116aa66a0f4878ec,https://github.com/apache/druid/commit/612c48f3a8e7c34f2f07812c116aa66a0f4878ec,simplify SimpleQueryableIndex constructor (#17710)  changes: * remove the 'lazy' parameter to SimpleQueryableIndex constructor in favor of always using the lazy = true path  Prior to https://github.com/apache/druid/pull/12279/files#diff-7f633ed96a4bb0b8fa8362dcd52173c0d9cfe1c7d329e5b0d6184b65317263bcR81 setting lazy = false in the SimpleQueryableIndex constructor would result in eagerl y initializing the dimension handlers  however after that change the meaning was changed to compute them on demand every time they were called. This was likely a mistake  and since eagerly initializing has not been happening by default for some time now  we should just drop this flag in favor of using the lazy = true path  which caches the dimension handlers when they are called.
apache,iotdb,51bad1ec88d5d20aa4e84f3ccd6841fbfba75390,https://github.com/apache/iotdb/commit/51bad1ec88d5d20aa4e84f3ccd6841fbfba75390,[remove datanode] Accelerate GCR load balancing implement (#15535)
jhy,jsoup,1222bd183cb699d1cc4e90996156b9c959d980f4,https://github.com/jhy/jsoup/commit/1222bd183cb699d1cc4e90996156b9c959d980f4,Added a fast path for the mojibake detection  For #2011
trinodb,trino,5635bf5ed1896e4f5f6d602cc6a5235e96713159,https://github.com/trinodb/trino/commit/5635bf5ed1896e4f5f6d602cc6a5235e96713159,Create Alluxio client once
apache,hudi,94b242f6ad6a3a1ae1d912406e8db5d64f7bafbc,https://github.com/apache/hudi/commit/94b242f6ad6a3a1ae1d912406e8db5d64f7bafbc,[HUDI-8802] Avoid unnecessary conversion between HoodieIndexAvroRecord and HoodieAvroRecord in HoodieFileSliceReader (#12559)
freeok,so-novel,9948ec805e0b369dcff702f68aefc68e98fe8390,https://github.com/freeok/so-novel/commit/9948ec805e0b369dcff702f68aefc68e98fe8390,:zap: 优化书源9目录解析速度
YunaiV,ruoyi-vue-pro,672247dbe4f068543018bc17e26f1b2b7d0ce04f,https://github.com/YunaiV/ruoyi-vue-pro/commit/672247dbe4f068543018bc17e26f1b2b7d0ce04f,!1248 【代码优化】IoT: 基于 guava 对 producer 做 cache Merge pull request !1248 from puhui999/iot
apache,hbase,f14c3ac7e36874c4189c0c46ff74cf723793041c,https://github.com/apache/hbase/commit/f14c3ac7e36874c4189c0c46ff74cf723793041c,HBASE-29099 Avoid expensive BlockCacheKey.toString() calls when tracing is disabled (#6642)  Signed-off-by: Ray Mattingly <rmattingly@apache.org>
apache,flink-cdc,77218abd68999efd8cf9ad46f7e830caa024fd7c,https://github.com/apache/flink-cdc/commit/77218abd68999efd8cf9ad46f7e830caa024fd7c,[FLINK-37539][pipeline-connector/paimon] Replace stream with parallelStream to optimize the performance  This closes  #3966
apache,druid,cac8b9da8fa6f4fe061b5c171fe8ade3317d50e1,https://github.com/apache/druid/commit/cac8b9da8fa6f4fe061b5c171fe8ade3317d50e1,Restrict segment metadata kill query till maxInterval from last kill task time (#17770)  Changes --------- - Use `maxIntervalToKill` to determine search interval for killing unused segments. - If no segment has been killed for the datasource yet  use durationToRetain
apache,hadoop,949292eac6d26ddf5713bf2783d09c3317ffe695,https://github.com/apache/hadoop/commit/949292eac6d26ddf5713bf2783d09c3317ffe695,HADOOP-19571. Improve PrometheusMetricsSink#normalizeName performance (#7692) Contributed by Ivan Andika.  * HADOOP-19571. Improve PrometheusMetricsSink#normalizeName performance  Reviewed-by: Akira Ajisaka <aajisaka@apache.org> Signed-off-by: Shilun Fan <slfan1989@apache.org>
jhy,jsoup,1a031b6742464a6dbb5b42c5132a75e46a45c180,https://github.com/jhy/jsoup/commit/1a031b6742464a6dbb5b42c5132a75e46a45c180,Clone tags from source TagSet on demand  This allows the TagSet to vend mutable Tags on demand  without requiring the entire tagset to be cloned on initialization. Otherwise for the HTML tagset  it would create many unused duplicates (all the known tags) on every pass.  Gets the perf to effectively where we were in 1.19.1 with immutable flyweight tags  but with the ability to mutate as required.
spring-projects,spring-ai,69cd3173f7e78469b94e81f5b9aea883f788c52d,https://github.com/spring-projects/spring-ai/commit/69cd3173f7e78469b94e81f5b9aea883f788c52d,Fix mariadb similarity search  - The similarity search doesn't need the embedding to be returned/stored back to Document
apache,nifi,0b748e2ebb06eeb8f3828bb913af3aa47e0a686a,https://github.com/apache/nifi/commit/0b748e2ebb06eeb8f3828bb913af3aa47e0a686a,NIFI-14713 FlowAnalyzer perf improvements: - Short circuit getting rule violations when there are none and when we're getting violations for the root process group by ID or alias. - Short circuit flow analysis if there are no rule violations configured. - Changes to getRuleViolationStream algorithm which significantly improve performance.  This closes #10079.  Signed-off-by: Tamas Palfy <tpalfy@apache.org>
YunaiV,ruoyi-vue-pro,cd341da674be599301a8fffa3cadc664505c58ad,https://github.com/YunaiV/ruoyi-vue-pro/commit/cd341da674be599301a8fffa3cadc664505c58ad,perf:【INFRA 基础设施】代码生成主子表非 erp 模式时，当子表一对多时更新改为通过 diffList 实现对应的增删改
crate,crate,ced59dab00561975d000b7489ea740c1de563f34,https://github.com/crate/crate/commit/ced59dab00561975d000b7489ea740c1de563f34,Avoid creating new DocTableInfoFactory objects  Follows: #17680
Card-Forge,forge,716d58ad4b3136e8aa2195bf74b1e2624964a713,https://github.com/Card-Forge/forge/commit/716d58ad4b3136e8aa2195bf74b1e2624964a713,faster implementation
opensolon,solon,b582e50686881cb82e54efaef73168209457d6f7,https://github.com/opensolon/solon/commit/b582e50686881cb82e54efaef73168209457d6f7,优化 solon-expression 函数访问，改为 MethodHandle
alibaba,fastjson2,cc5884f0a2d60f8b33e1df36e0a88236154c810b,https://github.com/alibaba/fastjson2/commit/cc5884f0a2d60f8b33e1df36e0a88236154c810b,optimize digitN
BiglySoftware,BiglyBT,d44e0fcda3e81686a2ad7ba5c0e4ab4fa2606847,https://github.com/BiglySoftware/BiglyBT/commit/d44e0fcda3e81686a2ad7ba5c0e4ab4fa2606847,Run code directly in getOffSWTThread if not on SWT thread
apache,pinot,fb2e4dff467fa19e5eec1deb53380c3ad4183699,https://github.com/apache/pinot/commit/fb2e4dff467fa19e5eec1deb53380c3ad4183699,[multistage] Add Support for Broker Server/Segment Pruning (#15959)
apache,pdfbox,55f713a890d9d2c373b21738d9b4dd87cb29d0ca,https://github.com/apache/pdfbox/commit/55f713a890d9d2c373b21738d9b4dd87cb29d0ca,PDFBOX-5965: refactor  avoid creating intermediate buffer  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925266 13f79535-47bb-0310-9956-ffa450edef68
apache,skywalking,889ae9dbe8c317040cc4759e305a655493382022,https://github.com/apache/skywalking/commit/889ae9dbe8c317040cc4759e305a655493382022,Increase the idle check interval of the message queue to 200ms to reduce CPU usage under low load conditions (#13227)
signalapp,Signal-Server,26b3b75054d33c121be8265b9732e95e07ff9799,https://github.com/signalapp/Signal-Server/commit/26b3b75054d33c121be8265b9732e95e07ff9799,Only fetch last-resort PQ keys for accounts with linked devices
locationtech,jts,2eeb684c84305808886b5921e6d605e662435c65,https://github.com/locationtech/jts/commit/2eeb684c84305808886b5921e6d605e662435c65,Add MaximumInscribedCircle fast exact calculation for simple shapes (#1123)
SPLWare,esProc,26c8c82b2f0fba90640a4353b1562b81b809241e,https://github.com/SPLWare/esProc/commit/26c8c82b2f0fba90640a4353b1562b81b809241e,Do performance optimization.
camunda,camunda,c8c3299e653a975565bf5c8c8a71359e98f25a2a,https://github.com/camunda/camunda/commit/c8c3299e653a975565bf5c8c8a71359e98f25a2a,fix: fetch all incidents at once
keycloak,keycloak,7802be9508be9f45cdc829f09b0a91fb50e46a27,https://github.com/keycloak/keycloak/commit/7802be9508be9f45cdc829f09b0a91fb50e46a27,Do not return subgroups count when fetching brief representations  Closes #39668  Signed-off-by: Pedro Igor <pigor.craveiro@gmail.com>
jplag,JPlag,71c6ecba1822330169b1a4239ee712d72844bda7,https://github.com/jplag/JPlag/commit/71c6ecba1822330169b1a4239ee712d72844bda7,Improve performance of subsequence hash lookup.
camunda,camunda,cd76662dace1eacb105c46b2a2a253ae2ecec6fd,https://github.com/camunda/camunda/commit/cd76662dace1eacb105c46b2a2a253ae2ecec6fd,feat: add `DbShort` and use it for storing `ValueType#value()`  Introduce `DbShort` to wrap `ValueType#value()` in `AsyncRequestMetadataKey` instead of relying on enum ordinal-based `DbEnumValue`. This provides more efficient storage than `DbInt` or `DbLong`  and avoids the risks of incorrect lookups caused by changes to `ValueType` enum constants ordering.
apache,pinot,6eddacfc32055e959ad72634684b904cf4098e20,https://github.com/apache/pinot/commit/6eddacfc32055e959ad72634684b904cf4098e20,Speed up test initialization. (#14784)
helidon-io,helidon,25bc0ed02e6d54d758299039294605978242624a,https://github.com/helidon-io/helidon/commit/25bc0ed02e6d54d758299039294605978242624a,Combines prologue and headers into a single write to prevent potential TCP delays when using TLS. With TLS  each write becomes a record and a small record can be delayed due to Nagle's algorithm. (#9842)
alibaba,fastjson2,0fccd4ee5b43cfa1fcb96eff82f552f4882839f4,https://github.com/alibaba/fastjson2/commit/0fccd4ee5b43cfa1fcb96eff82f552f4882839f4,optimize readBool & readString null
vespa-engine,vespa,5fe3a373361864a530f1af3e269f881b32869b3d,https://github.com/vespa-engine/vespa/commit/5fe3a373361864a530f1af3e269f881b32869b3d,Use getFloat() instead of casting
openpnp,openpnp,2fb226dc9ac641104b2d1abcc8822465a9c8a963,https://github.com/openpnp/openpnp/commit/2fb226dc9ac641104b2d1abcc8822465a9c8a963,Merge pull request #1662 from tobydickenson/extrapolation2  ReferenceStripFeeder performance enhancements
apache,avro,c880f4729e0dcb99bab82dd5b5efb15f0da55890,https://github.com/apache/avro/commit/c880f4729e0dcb99bab82dd5b5efb15f0da55890,AVRO-3527: codegen equals and hashCode for Records (#1708)  Update the compiler to generate the implementation of the `.equals()` and `.hashCode() function  instead of relying on the implementation of GenericData.  This improves the performance of those functions significantly.  The generated implementations are factor 10 to 20 faster for `.equals()` and a factor 5 to 10 for `.hashCode()`.  Result of Perf test before the change:  ``` Benchmark              Mode  Cnt          Score             Error  Units SpecficTest.equals    thrpt    3   12598610.194 +/-  11160265.279  ops/s SpecficTest.hashCode  thrpt    3   24729446.862 +/-  29051332.794  ops/s ```  Results using generated functions:  ``` Benchmark              Mode  Cnt          Score             Error  Units SpecficTest.equals    thrpt    3  211314296.950 +/- 104154793.126  ops/s SpecficTest.hashCode  thrpt    3  180349506.632 +/- 143639246.771  ops/s ```  Signed-off-by: Steven Aerts <steven.aerts@gmail.com>
crate,crate,e9b5b0825104a6d8693ec7f520c74c7d5ae40a74,https://github.com/crate/crate/commit/e9b5b0825104a6d8693ec7f520c74c7d5ae40a74,Implement ActionListener.withOnResponse/onFailure using .wrap  Also adds an inner `SimpleListener` to avoid creating anonymous classes and optimizes its `accept` to avoid one function call
apache,hadoop,32dad2039ad8db94b413de65f3b4ef44f9b7791c,https://github.com/apache/hadoop/commit/32dad2039ad8db94b413de65f3b4ef44f9b7791c,HDFS-17733. [ARR] Optimize isMultiDestDirectory method using AsyncUtil class (#7415). Contributed by hfutatzhanghb.  Reviewed-by: Jian Zhang <keepromise@apache.org> Signed-off-by: He Xiaoqiao <hexiaoqiao@apache.org>
opensolon,solon,8c29f3d5199377f9b8b863f66c44b1824c7f5b22,https://github.com/opensolon/solon/commit/8c29f3d5199377f9b8b863f66c44b1824c7f5b22,OkHttpUtilsFactory 优化缓存处理
opensolon,solon,41e6d5092d57af3294f5598162b2692e9622474b,https://github.com/opensolon/solon/commit/41e6d5092d57af3294f5598162b2692e9622474b,优化：solon-boot-smarthttp 取消在 core 里使用虚拟线程（影响性能）
alibaba,fastjson2,4986288cf22591436e1130b45e4fdb508a0dda92,https://github.com/alibaba/fastjson2/commit/4986288cf22591436e1130b45e4fdb508a0dda92,optimize JSONReaderASCII readString() (jdk16+) (#3267)  * optimize JSONReaderASCII readString() (jdk16+)  * optimize JSONReaderASCII readString() (jdk16+)  * optimize JSONReaderASCII readString() (jdk16+)  * optimize JSONReaderASCII readString() (jdk16+)  * optimize JSONReaderASCII readString() (jdk16+)  * optimize JSONReaderASCII readString() (jdk16+)
trinodb,trino,621377cb9eeeea7eb5286c5cdbabc418249a2255,https://github.com/trinodb/trino/commit/621377cb9eeeea7eb5286c5cdbabc418249a2255,Push TopN through non-identity project unconditionally  Before this change  TopN was not pushed through project if TableScanNode or FilterNode(TableScanNode) was the immediate source of the project. The purpose of this limitation was to enable composing scan+project or scan+filter+project into a single operator. However  this was not the optimal choice  and additionally it blocked TopN pushdown into TableScanNode.
crate,crate,28b6207effce40bbda415c54e524f557f72db99e,https://github.com/crate/crate/commit/28b6207effce40bbda415c54e524f557f72db99e,Simplify CountDown
camunda,camunda,98eca57b1892b87cdadca86d805fedfad9dbdfab,https://github.com/camunda/camunda/commit/98eca57b1892b87cdadca86d805fedfad9dbdfab,feat: skip running all migrations when zeebe is run for the first time
Card-Forge,forge,fc761220d2a5c6131d8c0a7b99ae4eb1cd8b2d55,https://github.com/Card-Forge/forge/commit/fc761220d2a5c6131d8c0a7b99ae4eb1cd8b2d55,Removed 2 additional unnecessary requests for tokens images
quarkusio,quarkus,beee3db03336449537a5052028aab354cf8b0ba4,https://github.com/quarkusio/quarkus/commit/beee3db03336449537a5052028aab354cf8b0ba4,Merge pull request #45621 from michalvavrik/feature/oidc-dev-test-reuse-vertx-when-possible  OIDC: reuse shared Vert.x instance in DEV and test mode whenever it is possible
vespa-engine,vespa,ccff53868e71fa7a5665652cf5d77434aa5d44ab,https://github.com/vespa-engine/vespa/commit/ccff53868e71fa7a5665652cf5d77434aa5d44ab,Only enable request/connection logging handlers if enabled
apache,iotdb,75d7f27fbdfdeb3e1d0c88395e01d93eb0a4e7da,https://github.com/apache/iotdb/commit/75d7f27fbdfdeb3e1d0c88395e01d93eb0a4e7da,Pipe: Reduce IoTDBAirGapConnector Handshake times (#15990)
dibo-software,diboot,8a7221fd5995328a6716885171d7c7009b0ca4c8,https://github.com/dibo-software/diboot/commit/8a7221fd5995328a6716885171d7c7009b0ca4c8,* 优化Shiro redis缓存性能简化存储keys
netty,netty,9968e94257da67c4f13fb8b28385b3cf71d3aada,https://github.com/netty/netty/commit/9968e94257da67c4f13fb8b28385b3cf71d3aada,Avoid String[] allocation in HttpContentCompressor.determineEncoding (#15437)  Motivation:  We can easily avoid `String[]` allocation by manually searching for a comma.  Modification:  Replaced `split(" ")` with manual search.  Result:  No more `String[]` allocation in `HttpContentCompressor.determineEncoding`
apache,pulsar,3c2ec2bf8bfd94eded46b42c5089dd8321afd096,https://github.com/apache/pulsar/commit/3c2ec2bf8bfd94eded46b42c5089dd8321afd096,[improve][broker] Improve Consumer.equals performance (#23864)
strimzi,strimzi-kafka-operator,94cdad99f091c572ca3051c3108d2a7c609634d0,https://github.com/strimzi/strimzi-kafka-operator/commit/94cdad99f091c572ca3051c3108d2a7c609634d0,Create all CA secrets in parallel instead of chaining futures (#11527)  Signed-off-by: Katherine Stanley <11195226+katheris@users.noreply.github.com>
pinpoint-apm,pinpoint,b43534a41b11dfa0ea923cc4015b2c449a931f25,https://github.com/pinpoint-apm/pinpoint/commit/b43534a41b11dfa0ea923cc4015b2c449a931f25,[#noissue] Reduce memory copy of BulkWriter
camunda,camunda,819c0b70ac6356f1a49e0f7f3fb6ee33a8feee4c),[solution](https://github.com/camunda/camunda/commit/819c0b70ac6356f1a49e0f7f3fb6ee33a8feee4c),Improve archiving performance (#30684)  ## Description  It was [highlighted](https://camunda.slack.com/archives/C08D74J6HUG/p1740412731557659) that the archiving is too slow to catch up with exporting/processing. We were able to complete a lot of process instances  and also to export them to ES. But they haven't been moved to the dated indices quickly enough  causing to fill up ES at some point.  We can see in the following metric that we complete per partition ~50 process instances (on the medic benchmarks)  but only ~5% are actually moved to the dated indices  where they can be deleted by ILM later.  ![archiver-lagging-behind](https://github.com/user-attachments/assets/354d052e-abc1-42b1-8526-4d43b74c0e58)  We haven't had not much observability around this topic and missed some visualization (previously we added some panels via #30679). On top of this  the PR adds some more panels to better visualize the archiving  and how many instances are actually found to be archived.  This allowed better to pinpoint where the bottleneck was  querying the completed process instances. Especially that it is not easy to fine-tune related `rolloverBatchSize` as it would simply stop finding new results  ![2025-04-07_14-46](https://github.com/user-attachments/assets/5106cf19-621f-4711-b7e4-946bd963ed48)  It turned out to be an issue with the used aggregation  also highlighted by @lenaschoenburg [previously](https://camunda.slack.com/archives/C08D74J6HUG/p1744033725997889?thread_ts=1744030148.764179&cid=C08D74J6HUG).  With the new metric and the
apache,shardingsphere,8c7c2fce787b1d16679045a7e4f8bad4f1b776d6,https://github.com/apache/shardingsphere/commit/8c7c2fce787b1d16679045a7e4f8bad4f1b776d6,Optimize MySQLComFieldListPacketExecutor with DatabaseType (#35509)  - Add a private final DatabaseType field initialized with "MySQL" - Replace inline DatabaseType retrieval with the new field for better readability and performance
apache,pulsar,369c352664a68acbb9bb3584b433498440a41034,https://github.com/apache/pulsar/commit/369c352664a68acbb9bb3584b433498440a41034,[improve][ml] Optimize BlobStoreManagedLedgerOffloader.getOffloadPolicies (#23776)
opensolon,solon,c9d610ff2a235c725667c6169fe042c5875969bd,https://github.com/opensolon/solon/commit/c9d610ff2a235c725667c6169fe042c5875969bd,优化 solon-expression 提取反射工具
questdb,questdb,32ad5f2c7baa34d745cfa9d8e2bedde49c0a5491,https://github.com/questdb/questdb/commit/32ad5f2c7baa34d745cfa9d8e2bedde49c0a5491,chore(core): disable Nagle's algorithm in HttpClient (set TCP_NODELAY flag) (#5550)
apache,hadoop,c3e322860f79cbb1ec9a59b4819da0a48155e551,https://github.com/apache/hadoop/commit/c3e322860f79cbb1ec9a59b4819da0a48155e551,HADOOP-19229. S3A/ABFS: Vector IO on cloud storage: increase threshold for range merging (#7281)   The thresholds at which adjacent vector IO read ranges are coalesced into a single range has been increased  as has the limit at which point they are considered large enough that parallel reads are faster.  * The min/max for local filesystems and any other FS without custom support are now 16K and 1M * s3a and abfs use 128K as the minimum size  2M for max.  These values are based on the Facebook Velox paper which stated their thresholds for merging were 20K for local SSD and 500K for cloud storage  Contributed by Steve Loughran
apache,commons-lang,665f047e552ad71c189582af15a0b697133fff0b,https://github.com/apache/commons-lang/commit/665f047e552ad71c189582af15a0b697133fff0b,[StringUtils::indexOfAnyBut] redesign due to inconsistent/faulty behaviour regarding UTF-16 surrogates (#1327)  * [StringUtils::indexOfAnyBut] redesign due to inconsistent/faulty… …behaviour regarding UTF-16 surrogates  Both signatures of StringUtils::indexOfAnyBut currently behave inconsistently in matching UTF-16 supplementary characters and single UTF-16 surrogate characters (i.e. paired and unpaired surrogates)  since they differ unnecessarily in their algorithmic implementations  use their own incomplete and faulty interpretation of UTF-16 and don't take full advantage of the standard library.  The example cases below show that they may yield contradictory results or correct results for the wrong reasons.  This proposal gives a unified algorithmic implementation of both signatures that a) is much easier to grasp due to a clear mathematical set approach and safe iteration and doesn't become entangled in index arithmetic; stresses the set semantics of the 2nd argument b) fully relies on the standard library for defined UTF-16 handling/interpretation; paired surrogates are merged into one codepoint  unpaired surrogates are left as they are c) scales much better with input sizes and result index position d) can benefit from current and future improvements in the standard library and JVM (streams implementation  parallelization  JIT optimization  JEP 218  ???…)  The algorithm boils down to: find index i of first char in cs such that (cs.codePointAt(i) ∈ {x ∈ codepoints(cs) ∣ x ∉ codepoints(searchChars) })  Examples: ---------  <H>: high-surrogate character <L>: low-surrogate character (<H><L>): valid supplementary character signature 1: StringUtils::indexOfAnyBut(final CharSequence seq  final CharSequence searchChars) signature 2: StringUtils::indexOfAnyBut(final CharSequence cs  final char... searchChars)  Case 1: matching of unpaired high-surrogate ---------seq/cs-------searchChars------exp./new-----sig.1-------sig.2---  1.1     <H>aaaa      <H>abcd          !found       !found      !found sig.2: 'a' happens to follow <H> in searchChars; sig.1: 'a' is somewhere in searchChars  1.2     <H>baaa      <H>abcd          !found       !found      0 sig.1: 'b' is somewhere in searchChars  1.3     <H>aaaa      (<H><L>)abcd     0            !found      0 sig.1: 'a' is somewhere in searchChars  1.4     aaaa<H>      (<H><L>)abcd     4            !found      !found sig.1+2 don't interpret suppl. character  Case 2: matching of unpaired low-surrogate ---------seq/cs-------searchChars------exp./new-----sig.1-------sig.2---  2.1     <L>aaaa      (<H><L>)abcd     0            !found      !found sig.1+2 don't interpret suppl. character  2.2     aaaa<L>      (<H><L>)abcd     4            !found      !found sig.1+2 don't interpret suppl. character  Case 3: matching of supplementary character ---------seq/cs-------------searchChars-----exp./new----sig.1-----sig.2-  3.1     (<H><L>)aaaa       <L>ab<H>cd      0           !found    0 sig.1: <L> is somewhere in searchChars  3.2     (<H><L>)aaaa       abcd            0           1         0 sig.1 always points to low-surrogate of (fully) unmatched suppl. character  3.3     (<H><L>)aaaa       abcd<H>         0           0         1 3.4     (<H><L>)aaaa       abcd<L>         0           !found    0 sig.1: <H> skipped by algorithm  * [StringUtils::indexOfAnyBut] further reduction of algorithm  by simplifying set consideration: find index i of first char in seq such that (seq.codePointAt(i) ∉ { x ∈ codepoints(searchChars) })  * [StringUtils::indexOfAnyBut] simplify input-sequence iteration  by transforming ListIterator loop into index-based loop  advancing by Character.charCount(codepoint); enabling short-circuit processing  avoiding full in-advance processing of input-sequence  * [StringUtils:indexOfAnyBut] parameterization of test functions  providing a single source-of-truth (arguments stream) for the two function variants  * [StringUtils:indexOfAnyBut] remove comment  Set::contains of immutable Set has unclear desastrous performance issues when searching for large values (here: >0xffff) in a set of smaller values (including JDK 23)  ---------  Co-authored-by: IBue <>
hapifhir,hapi-fhir,2d5d64610acacbc7d9a9521947ce15b0c9f9173e,https://github.com/hapifhir/hapi-fhir/commit/2d5d64610acacbc7d9a9521947ce15b0c9f9173e,Improve IdSubstitutionMap performance (#7156)  * Improve IdSubstitutionMap performance  * Add changelog
prestodb,presto,7ee76def2006dea38cd0a3e3c4fd80b36865aa22,https://github.com/prestodb/presto/commit/7ee76def2006dea38cd0a3e3c4fd80b36865aa22,[iceberg] Reduce redundant getTable calls in IcebergHiveMetadata
AxonFramework,AxonFramework,931dc8ea240368d63e08eb47503a598317f6c0d2,https://github.com/AxonFramework/AxonFramework/commit/931dc8ea240368d63e08eb47503a598317f6c0d2,Perform validation directly instead of boxing and unboxing  Perform validation directly instead of boxing and unboxing  #3067
camunda,camunda,a97f5041c0b4cd585878eb75cb7a38e1a6a2a0a8,https://github.com/camunda/camunda/commit/a97f5041c0b4cd585878eb75cb7a38e1a6a2a0a8,perf: skip duplicated bounds check  `UnsafeBuffer#wrap` already checks buffer capacity  no need to repeat this check.
apache,iotdb,5ebbb8da6a016f1a50da4849b5f99d253b4b32fa,https://github.com/apache/iotdb/commit/5ebbb8da6a016f1a50da4849b5f99d253b4b32fa,Load: remove unnecessary flushes in writer to avoid generating bad tsfiles (#14602)
alibaba,spring-ai-alibaba,0b037f52eb8c9d3a6a7ce783e0225ec0d50fe16a,https://github.com/alibaba/spring-ai-alibaba/commit/0b037f52eb8c9d3a6a7ce783e0225ec0d50fe16a,feat: 移除无用的滚动参数和方法，优化可交互元素获取逻辑
jar-analyzer,jar-analyzer,37aad37faf5395f9c71f9abc3f2c6972c443539c,https://github.com/jar-analyzer/jar-analyzer/commit/37aad37faf5395f9c71f9abc3f2c6972c443539c,[优化] 全局 `LUCENE` 搜索加入缓存机制提高搜索效率 @4ra1n
apache,flink,0d1b5aa1cddb382d852a19c50b67985b7788fc7f,https://github.com/apache/flink/commit/0d1b5aa1cddb382d852a19c50b67985b7788fc7f,[FLINK-33734][checkpointing] Compact and serialize original channel state handle before send checkpoint ack to JobManager
201206030,novel-plus,1cd8a49fd4746fda40264581feb31edf8f85c668,https://github.com/201206030/novel-plus/commit/1cd8a49fd4746fda40264581feb31edf8f85c668,perf: 优化排序参数校验
camunda,camunda,1a2b315c84f9957ed5e16b874482dd442bc98e35,https://github.com/camunda/camunda/commit/1a2b315c84f9957ed5e16b874482dd442bc98e35,feat: don't recheck for zeebe indices if found
alibaba,fastjson2,8ca7cc45665372daeacffe45143c7f42f3f6353c,https://github.com/alibaba/fastjson2/commit/8ca7cc45665372daeacffe45143c7f42f3f6353c,optimize JSONReader
AxonFramework,AxonFramework,25da249e2c189e25479ba0e434da04bb63e5e1b4,https://github.com/AxonFramework/AxonFramework/commit/25da249e2c189e25479ba0e434da04bb63e5e1b4,Introduce unknown type caching  Introduce unknown type caching  #3431  (cherry picked from commit 6f18ef79c73d8186dee05a7b6947174dfe0d4adf)
alibaba,fastjson2,c1f04bb0f7519863df1e8cef8944ef32bdc225bf,https://github.com/alibaba/fastjson2/commit/c1f04bb0f7519863df1e8cef8944ef32bdc225bf,JSONReader benchmark update
chinabugotech,hutool,9d1c268a1a93c30e96e9291dcd7af3c69f2ddcc5,https://github.com/chinabugotech/hutool/commit/9d1c268a1a93c30e96e9291dcd7af3c69f2ddcc5,判断注解数组元素是否相同优化
apache,nifi,8c2ceac6a4cf3af11935feeed078f5c82852f309,https://github.com/apache/nifi/commit/8c2ceac6a4cf3af11935feeed078f5c82852f309,NIFI-14108 Removed the instantiation of extraneous Object arrays vararg methods. (#9594)  Signed-off-by: Lucas Ottersbach <ottersbach@apache.org>
apache,hadoop,d19b35a35de493cb67989abddc339d6658477c5e,https://github.com/apache/hadoop/commit/d19b35a35de493cb67989abddc339d6658477c5e,HADOOP-19447.  Add Caching Mechanism to HostResolver to Avoid Redundant Hostname Resolutions (#7527) Contributed by Jiandan Yang.  * HADOOP-19447. Add Caching Mechanism to HostResolver to Avoid Redundant Hostname Resolutions  Reviewed-by: Tao Yang <taoyang@apache.org> Signed-off-by: Shilun Fan <slfan1989@apache.org>
apache,hudi,024ecd8729668b36fb12c97e10dd7a34a4ae5135,https://github.com/apache/hudi/commit/024ecd8729668b36fb12c97e10dd7a34a4ae5135,[HUDI-9152] Improve read/write/compaction performance by reusing avro schema (#12949)  1. Introduce JVM level caching for avro schema to reduce the cost of schema comparison.  NOTE: Use cache to cache references to the schema on key links where the schema may be created repeatedly. This ensures that only one variable instance of the same Schema will be used during a JVM lifetime  thus reducing the overhead of schema comparison on important io paths. For most of the cases  we only need to compare whether it is the same reference  there is no need to call the `Schema::equals` method.  2. Cache the frequently reused Schema on the IO code path.  ---------  Signed-off-by: TheR1sing3un <chaoyang@apache.org>
apache,pdfbox,55abbc72fb22c44bda2ac216c3c084e94df78658,https://github.com/apache/pdfbox/commit/55abbc72fb22c44bda2ac216c3c084e94df78658,PDFBOX-6000: avoid StringBuilder creation based on a proposal of Axel Howind  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925392 13f79535-47bb-0310-9956-ffa450edef68
AxonFramework,AxonFramework,cdbe745506bde4f706c1c41be852293767509ebf,https://github.com/AxonFramework/AxonFramework/commit/cdbe745506bde4f706c1c41be852293767509ebf,Make handling of commands non-blocking by implementing DelayedMessageStream.Single
apache,paimon,abe5b4b496581b0a37a11965d4a72398e1695eb4,https://github.com/apache/paimon/commit/abe5b4b496581b0a37a11965d4a72398e1695eb4,[core] Improve performance of PartialUpdateMergeFunction with sequence group (#5481)
apache,pinot,82bdda5a3836dd7b0bca3c6497772b6b7837e05d,https://github.com/apache/pinot/commit/82bdda5a3836dd7b0bca3c6497772b6b7837e05d,Parallelize segment metadata file generation. (#15030)  * Parallelize segment metadata file generation.  * Improved error handling and unit tests.  * Introduce segmentMetadataGenerationParallelism config.  * Move executor shutdown past thread completion.  * Code refactor - pass executor as parameter.  ---------  Co-authored-by: abhishekbafna <abhishek.bafna@startree.ai>
dbeaver,dbeaver,d59815e792f55e79d6c5dae4cde64c05b0b6e49a,https://github.com/dbeaver/dbeaver/commit/d59815e792f55e79d6c5dae4cde64c05b0b6e49a,dbeaver/dbeaver#36752 Hints cache refresh performance (#36792)  * dbeaver/dbeaver#36752 Hints cache refresh performance  * dbeaver/dbeaver#36752 Find/replace performance  ---------  Co-authored-by: Matvey16 <82543000+Matvey16@users.noreply.github.com>
apache,pulsar,6db275c3407ef7b7d308ac2eeaa3581f0d3576be,https://github.com/apache/pulsar/commit/6db275c3407ef7b7d308ac2eeaa3581f0d3576be,[improve][broker] Avoid PersistentReplicator.expireMessages logic compute backlog twice (#23957)
apache,hudi,4be1672c38d725aa9d90f766ea154c3461eece23,https://github.com/apache/hudi/commit/4be1672c38d725aa9d90f766ea154c3461eece23,[HUDI-8885] Improve the efficiency of initializing the metadata table and table services (#12665)
jhy,jsoup,35a41811a0b81b289f627b239ef9f568929281e3,https://github.com/jhy/jsoup/commit/35a41811a0b81b289f627b239ef9f568929281e3,Perf tweak: use childnodes directly vs requiring indexed siblings
apache,hive,ef3bd89539068c3247ea20ebd0b4a9ff44fa0fbd,https://github.com/apache/hive/commit/ef3bd89539068c3247ea20ebd0b4a9ff44fa0fbd,HIVE-28990: Collecting the non-native summary can be slow to raise th… (#5843)
apache,flink,794005c5c33669e72706bcb9a51a13bf3fb6c39e,https://github.com/apache/flink/commit/794005c5c33669e72706bcb9a51a13bf3fb6c39e,[FLINK-37680][serializer] Add subclass cache for PojoSerializer
flowable,flowable-engine,d90d56421d235434a8446f714e917e6a43bd6b66,https://github.com/flowable/flowable-engine/commit/d90d56421d235434a8446f714e917e6a43bd6b66,Cache resolved methods in FunctionDelegatesFlowableFunctionResolver
alibaba,spring-ai-alibaba,4d08d55c5540f1e5f041583bbadec7ca2e5ea17a,https://github.com/alibaba/spring-ai-alibaba/commit/4d08d55c5540f1e5f041583bbadec7ca2e5ea17a,feat: 添加配置缓存机制，优化配置获取性能，重构ManusProperties以支持动态配置加载
crate,crate,162c4594db51420c2dba404b8d0f54ff50a32026,https://github.com/crate/crate/commit/162c4594db51420c2dba404b8d0f54ff50a32026,Don't recreate TranslogIndexer for every translog operation
quarkusio,quarkus,f1430d834cf32a59855c7dc51e2b41026369b226,https://github.com/quarkusio/quarkus/commit/f1430d834cf32a59855c7dc51e2b41026369b226,Merge pull request #45741 from geoand/arc-notify  Remove lambdas from Arc that are used at startup
trinodb,trino,03d71f0f5859b0fc30659e073508f591a551db41,https://github.com/trinodb/trino/commit/03d71f0f5859b0fc30659e073508f591a551db41,Reuse PagesIndexOrdering in OrderedWindowAccumulator
apache,iotdb,aaff44910bdcc7fd4603692020fbbdd190906740,https://github.com/apache/iotdb/commit/aaff44910bdcc7fd4603692020fbbdd190906740,Pipe: aggregate tablets with different measurements under the same table before write into tsfile (#15372)
crate,crate,516c68bd2ed045d54a98a7af516f5b78c182d7c3,https://github.com/crate/crate/commit/516c68bd2ed045d54a98a7af516f5b78c182d7c3,Use `ReadAdvice#NORMAL` on files that have a forward-only access pattern. (https://github.com/apache/lucene/pull/13450)
apache,hadoop,7577f3ad6194a24c1ed544e23d50ee4f1a6dfa5b,https://github.com/apache/hadoop/commit/7577f3ad6194a24c1ed544e23d50ee4f1a6dfa5b,HDFS-17388. [FGL] Client RPCs involving write process supports fine-grained lock (#6589)
vespa-engine,vespa,80934b6d104584f5aec5ef1e35125e586a530e72,https://github.com/vespa-engine/vespa/commit/80934b6d104584f5aec5ef1e35125e586a530e72,Don't compute unused 'ret'
iterate-ch,cyberduck,ac23e0aee4e609bdcc188f592bb5451688f243d3,https://github.com/iterate-ch/cyberduck/commit/ac23e0aee4e609bdcc188f592bb5451688f243d3,Remove unnecessary synchronization.
alibaba,fastjson2,f39d090489d33532a38095b4a15d6fcc998359df,https://github.com/alibaba/fastjson2/commit/f39d090489d33532a38095b4a15d6fcc998359df,optimize ObjectReader jit
apache,iotdb,b3d0ad72e31c6c67ff3b27abfe6d8dc345e689fb,https://github.com/apache/iotdb/commit/b3d0ad72e31c6c67ff3b27abfe6d8dc345e689fb,Skip update-cache logic when loading TsFile in IoTV2Consensus (#15729)
flowable,flowable-engine,502a54f8dad5115386a5e0daaf454d3103d86c42,https://github.com/flowable/flowable-engine/commit/502a54f8dad5115386a5e0daaf454d3103d86c42,Prevent unnecessary select execution by super execution id query
casbin,jcasbin,697daa032b072fa23afe4133becf4436570c41d1,https://github.com/casbin/jcasbin/commit/697daa032b072fa23afe4133becf4436570c41d1,feat: optimize fast path in convertInSyntax method (#451)
jhy,jsoup,31ad0686f949f4a772b3b843403d8e221d7ef57c,https://github.com/jhy/jsoup/commit/31ad0686f949f4a772b3b843403d8e221d7ef57c,Performance optimizations for some DOM methods (#2373)  The primary optimization is to invalidate sibling indexes on modification  vs re-calculating them immediately. When called in a loop of `element.child(0).remove()`  the previous implementation was effectively O(n²)  and is now just O(n).  Also includes optimizations for `Document.createElement()`  setting attributes  and when parsing a body fragment with many direct children.
redisson,redisson,13b9ce2e61ba7609c4b735b335df1a835b8f6681,https://github.com/redisson/redisson/commit/13b9ce2e61ba7609c4b735b335df1a835b8f6681,Fixed - New connection opened for each write operation after master has been changed #6533  Signed-off-by: seakider <seakider@gmail.com>
apache,shardingsphere,dfe831264086467c31708d06cd3bf165a439312c,https://github.com/apache/shardingsphere/commit/dfe831264086467c31708d06cd3bf165a439312c,Add database type parameter to SQLBindEngine.bind method (#35511)  * Optimize MySQL multi-statements handling  - Extract DatabaseType instance as a private field to improve performance - Update SQLParserEngine initialization to use the pre-loaded DatabaseType - Modify SQLBindEngine invocation to include DatabaseType as a parameter  * Add database type parameter to SQLBindEngine.bind method - Update the SQLBindEngine.bind method call to include the databaseType parameter - This change ensures that the database type is properly passed during SQL statement binding
ant-media,Ant-Media-Server,ec14d51720bcc9d6a05f1e93f2f11afe45bbb9bf,https://github.com/ant-media/Ant-Media-Server/commit/ec14d51720bcc9d6a05f1e93f2f11afe45bbb9bf,Merge pull request #7185 from ant-media/mongoQueryOptimizations  Use separate locks for MongoDB queries to perform faster
apache,skywalking,2c6b1b3e5aaf16584f7acfe2dc4ab275295d472c,https://github.com/apache/skywalking/commit/2c6b1b3e5aaf16584f7acfe2dc4ab275295d472c,Optimize metrics cache loading when trace latency greater than cache timeout (#13068)
liquibase,liquibase,d534727e88c6ecd17678ee92fe27276deb5c865a,https://github.com/liquibase/liquibase/commit/d534727e88c6ecd17678ee92fe27276deb5c865a,Fixes #6685 Performance issue of v4.30.0 (#6686)  Fixes #6685 Performance issue of an incorrect extract-variable refactoring of commit 89a3c3bc0bd211c8c5862af54d7fb9a22a5577ca  -- The original author extracted replacedSnapshotControl as a local variable but then failed passing it down the line. Instead the original snapshotControl object got passed which seems to operate on the entire catalog instead of just the example type in question.
apache,ignite,9dd8becd52a29af4a31b1194be8e31c4897d0e4d,https://github.com/apache/ignite/commit/9dd8becd52a29af4a31b1194be8e31c4897d0e4d,IGNITE-25528 Optimize IgniteDiagnosticMessage marshalling (#12119)
camunda,camunda,1e2db716adcefc05351743d5208d0badbf3a0770,https://github.com/camunda/camunda/commit/1e2db716adcefc05351743d5208d0badbf3a0770,refactor: UserTaskService to leverage ProcessCache
trinodb,trino,e3e6e6f3b64c5e24bbf6139ba0c674fd07b5777d,https://github.com/trinodb/trino/commit/e3e6e6f3b64c5e24bbf6139ba0c674fd07b5777d,Improve Iceberg table properties building  When building Iceberg table properties with many files under one partition  process this partition only once
graphhopper,jsprit,8af8024d66e41233957eb70378d23d645505a49d,https://github.com/graphhopper/jsprit/commit/8af8024d66e41233957eb70378d23d645505a49d,perf: optimize array operations in StateManager  - Add efficient array growth strategy with reuse - Improve state clearing using System.arraycopy - Add pre-allocated null array for faster clearing - Reduce memory allocations during resizing
LaurieWired,Malimite,f34c65aec8159f0b98b55ad210400992e0b296bd,https://github.com/LaurieWired/Malimite/commit/f34c65aec8159f0b98b55ad210400992e0b296bd,Merge pull request #9 from sleeyax/fix/analysis-time  Improve analysis speed (closes #8)
questdb,questdb,d432c7f013235191ee1ffe46484ad11d8d9cff08,https://github.com/questdb/questdb/commit/d432c7f013235191ee1ffe46484ad11d8d9cff08,perf(http): speed up varchar parsing in CSV import (#5985)
apache,paimon,9179d654b61d933551baffe36cbcd675869f1ebc,https://github.com/apache/paimon/commit/9179d654b61d933551baffe36cbcd675869f1ebc,[core][spark] Enable limit pushdown and count optimization for dv table (#4709)
spring-projects,spring-data-mongodb,532dd289ed7d952bdf35f2ebf61ff1e975e7501a,https://github.com/spring-projects/spring-data-mongodb/commit/532dd289ed7d952bdf35f2ebf61ff1e975e7501a,Improve ArrayList capacity allocation in GeoJson.  Closes: #4904 Original Pull Request: #4905  Signed-off-by: 정보교 (Bogus Jung) <bogusjung0317@gmail.com>
ModelEngine-Group,fit-framework,31357da0ce8a65b5d50219c34b4084f21b768495,https://github.com/ModelEngine-Group/fit-framework/commit/31357da0ce8a65b5d50219c34b4084f21b768495,[ohscript] 修改ohscript生成随机uuid方式提升性能 (#31)  * [ohscript] 修改ohscript生成随机uuid方式  * [ohscript] 去除无效注释  * [ohscript] 优化初始化id锁粒度  * [ohscript] 修改檢視意見
igniterealtime,Openfire,551b8ae749851331665f5df9a8e95820e7d250bd,https://github.com/igniterealtime/Openfire/commit/551b8ae749851331665f5df9a8e95820e7d250bd,OF-3083: SerializingCache should skip JAXB for simple classes  When provided with String or JID instances  full JAXB marshalling can easily be skipped (as these instances can easily be converted to and from String representations. By not requiring a JAXB conversion  this class becomes a lot more versatile.  With this change  JID and String instances can be used directly as keys and/or values for the cache. There is no need to provide a JAXB wrapper for these any longer.
hapifhir,hapi-fhir,38b67cdc00527c632635bc0801b975c55d815d7e,https://github.com/hapifhir/hapi-fhir/commit/38b67cdc00527c632635bc0801b975c55d815d7e,Performance tweak to Xml serialization (#6888)  * Performance tweak to Xml serialization  * Add changelog  * Address review comment  * Spotless  * Changelog fix
datastax,jvector,7300b1cb1ab96e5adb18f4d795706a2db43ec3dd,https://github.com/datastax/jvector/commit/7300b1cb1ab96e5adb18f4d795706a2db43ec3dd,Use ScoreTracker to avoid wasteful searching for very large k (#384)  * clarify  * use scoreTracker to short circuit new edge evaluation once we hit a local maximum
201206030,novel-plus,acf9c76757c194b37498f5b3442985e41fc35cc3,https://github.com/201206030/novel-plus/commit/acf9c76757c194b37498f5b3442985e41fc35cc3,perf: 提前创建数据库连接池 Spring Boot 新版本默认会在第一次请求数据库时创建连接池
apache,camel,4f1c8337a096fbb7f5d032cff273bda68d8b15bd,https://github.com/apache/camel/commit/4f1c8337a096fbb7f5d032cff273bda68d8b15bd,CAMEL-19898: camel-core - Optimize StreamCaching strategy to skip con… (#18191)  * CAMEL-19898: camel-core - Optimize StreamCaching strategy to skip conversion for well known types and do fast lookup of dedicated StreamCache converters  to bypass regular type converter.
apache,hadoop,a314a1d71488f782749638ba27098515bbb3a8a4,https://github.com/apache/hadoop/commit/a314a1d71488f782749638ba27098515bbb3a8a4,YARN-11798. Precheck request separately to avoid redundant node checks and optimize performance for global scheduler. (#7516) Contributed by Tao Yang.  * YARN-11798. Precheck request separately to avoid redundant node checks and optimize performance for global scheduler.  * Add node for recording scheduler activities in RegularContainerAllocator#preCheckRequest to fix UT.  Signed-off-by: Shilun Fan <slfan1989@apache.org>
apache,pulsar,a6986b1b664bf2a8da6e99c2db39c65b08b9f3a4,https://github.com/apache/pulsar/commit/a6986b1b664bf2a8da6e99c2db39c65b08b9f3a4,[improve][broker] Improve SystemTopicBasedTopicPoliciesService reader to reduce GC pressure (#23780)
openpnp,openpnp,8140f5156aee3ddfc9d4f52a8548ff0f6ed53576,https://github.com/openpnp/openpnp/commit/8140f5156aee3ddfc9d4f52a8548ff0f6ed53576,photonfeeder: poll the feeder at 20hz rather than waiting the expected feed time  On the job running as I am typing theses words a single: Pick Pick Vision Vision Place Place cycle goes from ~14.5s to ~12s.
jhy,jsoup,dcb4f799123febff991e64ff24b7d20538e34ff1,https://github.com/jhy/jsoup/commit/dcb4f799123febff991e64ff24b7d20538e34ff1,Only match ASCII letters and digits (#2312)  * Move `isAsciiLetter`  `isDigit`  and `isHexDigit` to `StringUtil` * Only check for ASCII digits in `StringUtil.isNumeric()` * Replace calls to `Character.isLetter()`
alibaba,fastjson2,3061b44e0acd8007abdc984cf9bb4fb52ac344c7,https://github.com/alibaba/fastjson2/commit/3061b44e0acd8007abdc984cf9bb4fb52ac344c7,optimize readString
netty,netty,0aaafe3e82cdd3c363fc238a11a5a515c7dc8a36,https://github.com/netty/netty/commit/0aaafe3e82cdd3c363fc238a11a5a515c7dc8a36,Avoid `WebSocketServerHandshakerFactory` instance allocation (#15263)  Motivation:  Each websocket handshake process allocates a `WebSocketServerProtocolHandshakeHandler` class instance  just to call a single method for handshake creation. This allocation could be simply avoided.  Modification:  Extracted `WebSocketServerHandskaerFactory.newHandshaker()` method to a new static `resolveHandshaker` method and invoke it from `WebSocketServerProtocolHandshakeHandler`.  Result:  Fewer allocations and GC work.
igniterealtime,Openfire,e22b029e623bbf7f3110cfb6202f02bdcbe3b93f,https://github.com/igniterealtime/Openfire/commit/e22b029e623bbf7f3110cfb6202f02bdcbe3b93f,Merge pull request #2739 from guusdk/StringBuffer  Replace StringBuffer with StringBuilder
jetty,jetty.project,156d316b0ba71bf509c91ede1d206d111c9292bc,https://github.com/jetty/jetty.project/commit/156d316b0ba71bf509c91ede1d206d111c9292bc,Fixes #12663 - Improve scalability of HttpCookieStore.Default.  Now using a ReadWriteLock for HttpCookieStore.Default  to allow concurrent access to match(URI).  Signed-off-by: Simone Bordet <simone.bordet@gmail.com>
vespa-engine,vespa,74e5c519e3d392b8ef34ced618fb90c7910adeb9,https://github.com/vespa-engine/vespa/commit/74e5c519e3d392b8ef34ced618fb90c7910adeb9,avoid extra fill() round-trips
itwanger,paicoding,09d05b5a7f6ecd44ff5ca812a38956bd300b33ef,https://github.com/itwanger/paicoding/commit/09d05b5a7f6ecd44ff5ca812a38956bd300b33ef,feat: Enhance short link service with Redis caching and improved error handling 短链接服务 加入redis
zfile-dev,zfile,754edb45512f07295131094a137c7b759cbf6212,https://github.com/zfile-dev/zfile/commit/754edb45512f07295131094a137c7b759cbf6212,缓存 aes 对象，避免每次都初始化
trinodb,trino,4718011a39f700ab3c8dbe66747c37a9398922f8,https://github.com/trinodb/trino/commit/4718011a39f700ab3c8dbe66747c37a9398922f8,Use BigQuery storage read API when reading external BigLake tables  The storage APIs support reading BigLake external tables (ie external tables with a connection). But the current implementation uses views which can be expensive  because it requires a query. This PR adds support to read BigLake tables directly using the storage API.  There are no behavior changes for external tables and BQ native tables - they use the view and storage APIs respectively.  Added a new test for BigLake tables.  Co-authored-by: Marcin Rusek <marcin.rusek@starburstdata.com>
apache,ignite,718bfac0bdfcab7e365d587a70f3fd101460606e,https://github.com/apache/ignite/commit/718bfac0bdfcab7e365d587a70f3fd101460606e,IGNITE-24131 Reuse GroupKey.Builder for hash aggregate (#11783)
dromara,RuoYi-Vue-Plus,5a9728c868cdecc8de0ff143c551b2242a1bb960,https://github.com/dromara/RuoYi-Vue-Plus/commit/5a9728c868cdecc8de0ff143c551b2242a1bb960,update 优化流程查询以及多根节点构建树结构
alibaba,fastjson2,4d19e9f82f88643a97a84842256299fe3252cd16,https://github.com/alibaba/fastjson2/commit/4d19e9f82f88643a97a84842256299fe3252cd16,optimize jsonb
trinodb,trino,ad2bd4cac23688f3f6421e38f9fec9b20f91d9ce,https://github.com/trinodb/trino/commit/ad2bd4cac23688f3f6421e38f9fec9b20f91d9ce,Convert hashChannels to primitive array
trinodb,trino,215e1a13f04e5b17ebeae5fc3f1c9f5f1972949e,https://github.com/trinodb/trino/commit/215e1a13f04e5b17ebeae5fc3f1c9f5f1972949e,Use AppendOnlyVariableWidthData in AbstractMapAggregationState
apache,hbase,cb2f11faab420442ee248355df9413d238a27fd5,https://github.com/apache/hbase/commit/cb2f11faab420442ee248355df9413d238a27fd5,HBASE-29178 Some ZKUtil optimizations (#6776)  Signed-off-by: Andor Molnár <andor@apache.org> Signed-off-by: Pankaj Kumar<pankajkumar@apache.org>
openpnp,openpnp,b4a0fbabe9f80e9c3d127ddad309f511fdee5053,https://github.com/openpnp/openpnp/commit/b4a0fbabe9f80e9c3d127ddad309f511fdee5053,- random number generator changed to use nextInt()  which is faster compared to nextDouble() - local modification of bestDistance in debug clause replaced by a local variable - globalBestDistance added to debug output
pmd,pmd,a3089c8c7de838bf50db15d81127c9440f2fdb78,https://github.com/pmd/pmd/commit/a3089c8c7de838bf50db15d81127c9440f2fdb78,[cli] Make CLI default to multithreaded  Allow specifying a number of threads relative to the number of cores of the machine. Default is 1C  ie one thread per core
quarkusio,quarkus,82b9aafc2a812070c52bf93e0899fc675b4081d1,https://github.com/quarkusio/quarkus/commit/82b9aafc2a812070c52bf93e0899fc675b4081d1,Save using stream(s) to retrieve Http Headers  It optimizes the list filtering for the empty/single element case  Fixes #46949
SPLWare,esProc,ebdbed153ecf50de3071598862b58f82d0b57061,https://github.com/SPLWare/esProc/commit/ebdbed153ecf50de3071598862b58f82d0b57061,Optimized excel functions.
apache,hive,e8ccca82be80611e79178c1ab1acc75c5d62b2e0,https://github.com/apache/hive/commit/e8ccca82be80611e79178c1ab1acc75c5d62b2e0,HIVE-27874: Support datatype conversion on fetch threads (Kurt Deschler  reviewed by Attila Turoczy  Denys Kuzmenko)  This patch provides a mechanism to move expensive datatype conversions (i.e.  Timestamp) to the fetch threads where the work can be done in parallel. This can substantially improve performance in cases where the client thread is the bottleneck and resources are available for multiple fetch threads. Implementation is in form of ConvertedResultSet  which is agnostic to the underlying protocol result and can be dynamically substituted into the fetch path.  Closes #4902
igniterealtime,Openfire,741fc5560869663a0fe46bcb1bb565ee92f5c0dd,https://github.com/igniterealtime/Openfire/commit/741fc5560869663a0fe46bcb1bb565ee92f5c0dd,Chore: when debug logging  replace string concat of message  Instead of concatenation  use the `{}` construct will prevent building the string until it's actually logged.  Although it's probably a performance improvement  it's mainly a readability improvement.
trinodb,trino,a769347eca24f244fbb782ca8258289766ecb695,https://github.com/trinodb/trino/commit/a769347eca24f244fbb782ca8258289766ecb695,Optimize BigQuery listing tables  Remove nested loop to find ambiguous tables. This optimizes compute from O(n^2) to 2*O(n) when bigquery.case-insensitive-name-matching is enabled
apache,maven,8e4041759bd7cbd5dd807577b66f9f79252ef33b,https://github.com/apache/maven/commit/8e4041759bd7cbd5dd807577b66f9f79252ef33b,[MNG-8540] Add global caching in the session
apache,iotdb,a8c80ecb1406c99017ac647eb5b367ee576d28e4,https://github.com/apache/iotdb/commit/a8c80ecb1406c99017ac647eb5b367ee576d28e4,Load: Batched tablet insertion during conversion (#15125)
apache,hudi,60576bcccf08d07abb9d1ee41cf52656fc491bbf,https://github.com/apache/hudi/commit/60576bcccf08d07abb9d1ee41cf52656fc491bbf,[HUDI-9574] Avoid creating InternalSchemaManager for each file in FileGroup reader based Flink Compaction (#13535)
quarkusio,quarkus,15197c5feefc489d4dbe5dc0d5fba674f184a883,https://github.com/quarkusio/quarkus/commit/15197c5feefc489d4dbe5dc0d5fba674f184a883,Merge pull request #45587 from geoand/rr-string-concat  Use StringBuilder instead of indyfied concat
undertow-io,undertow,afa896e03705942f5f0974d9edc9f3f9c5c7551c,https://github.com/undertow-io/undertow/commit/afa896e03705942f5f0974d9edc9f3f9c5c7551c,UNDERTOW-2547 - Perform gathering write  Modify conduit to perform a gather write to decrease latency
crate,crate,23975f90bebbc2c4b0fa2e8fdba0c5e055c19b13,https://github.com/crate/crate/commit/23975f90bebbc2c4b0fa2e8fdba0c5e055c19b13,Add tasks missing on kill to `recentlyFailed` cache  This speeds up query completion in the following distributed query execution scenario:  - handler-node: mergeOnHandler starts - handler-node: collect starts - handler-node: collect finishes with a failure and: - forwards the failure to the participating downstreams - propagates the failure to sibling tasks to clean them up  - handler_node: Given that the local task failed  remote task initialization is skipped  instead it immediately sends out a kill to the other nodes  - remote node: kill received  but is a no-op  because context is missing - remote node: receives the failure forwarded by the collect  but given that the task context is missing it retries.  To speed up the context cleanup in such a scenario  this changes the TasksService to track the failed job within its `recentlyFailed` cache.  Relates to https://github.com/crate/crate/pull/17963 in that the unlimited backoff policy helped uncover this.
dromara,Sa-Token,bb5ceb1dc03637cd07f5d58e7e790aa041c8b880,https://github.com/dromara/Sa-Token/commit/bb5ceb1dc03637cd07f5d58e7e790aa041c8b880,refactor: 优化 Token-Session 获取算法，减少缓存读取次数
languagetool-org,languagetool,504fdc92affd97d67ee237342b49f07cae75316d,https://github.com/languagetool-org/languagetool/commit/504fdc92affd97d67ee237342b49f07cae75316d,optional AbstractStyleRepeatedWordRule: small optimization
apache,flink,d774cf1bdeac654b35993f43718e4fdc68f129cc,https://github.com/apache/flink/commit/d774cf1bdeac654b35993f43718e4fdc68f129cc,[FLINK-37139][table-planner] Improve AdaptiveSkewedJoinOptimizationStrategy to make it effective in more scenarios (#25989)
apache,hbase,a2a9067683657ffaf4e639f5c9017dfa7e0bfb4f,https://github.com/apache/hbase/commit/a2a9067683657ffaf4e639f5c9017dfa7e0bfb4f,HBASE-29385: Improve performance of AggregrateImplementation quota checks (#7083)  Signed-off-by: Ray Mattingly <rmattingly@apache.org>
camunda,camunda,9be05f33b7dc214568f8785be35c43da874bd363,https://github.com/camunda/camunda/commit/9be05f33b7dc214568f8785be35c43da874bd363,fix: start calledProcessDepth at 0  There's a reason to keep it at -1  if you want to differentiate between the calledProcessDepth not set  and it just being set by default.  The -1 case could've been useful to ensure we set the calledProcessDepth correctly for child process instance created after 8.7 that are part of root process instance created prior to 8.7. However  this comes at the cost of performance  as a lookup is needed for each called level.  Instead  we simply set the default to 0  to ensure that all element instances created prior to 8.7  have it set to 0.  This has the added benefit that we do not have to explicitly set the value in other places (like test code).  Co-authored-by: Dmitriy Melnychuk <dmitriy.melnychuk@capgemini.com> Co-authored-by: Remco <remco@westerhoud.nl> Co-authored-by: Stephan Epping <stephan.epping@camunda.com> Co-authored-by: berkaycanbc <berkay.can@camunda.com>
trinodb,trino,59b9012fb6a1c653b657c57a6658ac1d95defc7d,https://github.com/trinodb/trino/commit/59b9012fb6a1c653b657c57a6658ac1d95defc7d,Calculate reserved identifiers once
apache,parquet-java,8127cc3fe6690cce42febf35a795d17d9f956218,https://github.com/apache/parquet-java/commit/8127cc3fe6690cce42febf35a795d17d9f956218,GH-3127: Enabled `parquet.hadoop.vectored.io.enabled` by default (#3128)
apache,hudi,93d1d5650766fd61640d626cb235399162829e94,https://github.com/apache/hudi/commit/93d1d5650766fd61640d626cb235399162829e94,[HUDI-8855] Add bucket properties for spark bucket index query pruning (#12614)
PBH-BTN,PeerBanHelper,baf0c43dbd69acfba5b2030b3c602ffb05113775,https://github.com/PBH-BTN/PeerBanHelper/commit/baf0c43dbd69acfba5b2030b3c602ffb05113775,使用内存映射文件（MEMORY_MAPPED）优化 IPDB 读 GeoIP I/O 操作，以充分利用系统文件缓存
jfinal,jfinal,6eaa26c43e005825815e23cc20499dbac6abe275,https://github.com/jfinal/jfinal/commit/6eaa26c43e005825815e23cc20499dbac6abe275,优化 setTransactionIsolation
trinodb,trino,80b8ae92947bb89e2a21886855a084ac369e5fa9,https://github.com/trinodb/trino/commit/80b8ae92947bb89e2a21886855a084ac369e5fa9,Increase delta.max-split-size to 128MB  The default row group size for parquet files in delta is 128MB. The default for split size should match that. The previous smaller value of 64MB generated unnecessary splits.
AxonFramework,AxonFramework,6f18ef79c73d8186dee05a7b6947174dfe0d4adf,https://github.com/AxonFramework/AxonFramework/commit/6f18ef79c73d8186dee05a7b6947174dfe0d4adf,Introduce unknown type caching  Introduce unknown type caching  #3431
apache,iotdb,5b8e59fd2d782753e20ef97e11a9fa10b0164efe,https://github.com/apache/iotdb/commit/5b8e59fd2d782753e20ef97e11a9fa10b0164efe,Get device path from cache (#15290)  * get device path from cache  * get table name segments from cache
apache,kylin,492870a3aef0185171baec6d286b5bb9436494b2,https://github.com/apache/kylin/commit/492870a3aef0185171baec6d286b5bb9436494b2,KYLIN-6005 Prefer using aggregate indexes for queries involving aggregations on a single table
netty,netty,eaf38df0eb87c8562e044b512386afd62ffc38d2,https://github.com/netty/netty/commit/eaf38df0eb87c8562e044b512386afd62ffc38d2,MQTT: Improve `isValidPublishTopicName` method performance (#15198)  Motivation:  We can refactor the method to improve performance.  Modifications:  Refactored `MqttCodecUtil.isValidPublishTopicName()` method to boost the performance.  Result:  According to my benchmarks  it is boosted almost twice: ``` Benchmark                           Mode  Cnt   Score   Error  Units TwoIndexOfVSLoopImprove.charAt      avgt    3  13.973 ± 0.137  ns/op TwoIndexOfVSLoopImprove.twoIndexOf  avgt    3  24.519 ± 7.310  ns/op ```  Co-authored-by: Norman Maurer <norman_maurer@apple.com>
crossoverJie,cim,f0dcf61a940c79f83200a5cd3864d40af75606e8,https://github.com/crossoverJie/cim/commit/f0dcf61a940c79f83200a5cd3864d40af75606e8,feat: The redis layer of the departure message is implemented based on lua
hazelcast,hazelcast,1e894a964dc3be557de36310b52c17acca955ee0,https://github.com/hazelcast/hazelcast/commit/1e894a964dc3be557de36310b52c17acca955ee0,Refactor `AwsRequestUtils#canonicalQueryString` (#4542)  The code can be simplified and made ~2x faster  too.  <details> <summary>JMH Benchmark</summary>  ```java import org.openjdk.jmh.annotations.*; import java.util.*; import java.util.concurrent.TimeUnit;  @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @Warmup(iterations = 5  time = 1  timeUnit = TimeUnit.SECONDS) @Measurement(iterations = 3  time = 1  timeUnit = TimeUnit.SECONDS) @State(Scope.Benchmark) public class Benchmark { private static final List<String> list = new ArrayList<>();  static { list.add("attribute=attribute%2Bvalue"); list.add("name=Name%2A"); list.add("second-attribute=second-attribute%2Bvalue"); }  @Benchmark public static String iterator() { Iterator<String> it = list.iterator(); StringBuilder result = new StringBuilder(); if (it.hasNext()) { result.append(it.next()); } while (it.hasNext()) { result.append('&').append(it.next()); } return result.toString(); }  @Benchmark public static String stringJoin() { return String.join("&"  list); } } ``` </details>  | Benchmark           | Time (ns/op) | Allocation Rate (B/op) | |---------------------|--------------|------------------------| | `Iterator` (before)   | 67        | 488              | | `String#join` (after) | 33        | 176                    |  I did try a `Stream` implementation to avoid unnecessary intermediate Lists etc but performance was actually worse than both.  GitOrigin-RevId: c444b7a43b735d5a8ef3150f5c4dbfba6be1fab0
camunda,camunda,d493e630495ccc3d5cefae50c3a5668bf1ee4925,https://github.com/camunda/camunda/commit/d493e630495ccc3d5cefae50c3a5668bf1ee4925,feat: when reconstructing deployments  cache last resource processed  To avoid rescanning every resource every time  the last resources that was searched for is cached in-memory (not persisted) to be used as a starting point for the next iteration. Persisting requires much more complexity and slows down each iteration  while caching it in memory is slower for the first item  but faster for all the following iterations.
crate,crate,8f941f829d1fe4193f968af9a96bd3e120708fd4,Follow up to https://github.com/crate/crate/commit/8f941f829d1fe4193f968af9a96bd3e120708fd4,Avoid byte copy operations to decompress data for snapshots 
prometheus,client_java,64f02eaf9f5702ba1ab5f97dcdbf2a886f0e537a,https://github.com/prometheus/client_java/commit/64f02eaf9f5702ba1ab5f97dcdbf2a886f0e537a,Use buffered writer (#1248)  Signed-off-by: dhoard <doug.hoard@gmail.com>
knowm,XChange,3336c5434c3c97eafbd8b9a9b22a4b60770ed3b0,https://github.com/knowm/XChange/commit/3336c5434c3c97eafbd8b9a9b22a4b60770ed3b0,Merge pull request #4999 from ivelkov/develop  [Kraken] - Improve performance of checksum computation
apache,hbase,28c435378a95a59d6d34acce6b91524ed797afd3,https://github.com/apache/hbase/commit/28c435378a95a59d6d34acce6b91524ed797afd3,HBASE-29013 Addendum forward port branch-2 changes to use ThreadLocalRandom instead of Random  Co-authored-by: Duo Zhang <zhangduo@apache.org> Signed-off-by: Duo Zhang <zhangduo@apache.org>
apache,iotdb,74a0d306f8138c14406d4fb2ccfc120b9adf5183,https://github.com/apache/iotdb/commit/74a0d306f8138c14406d4fb2ccfc120b9adf5183,perf: avoid reading tsfile on distinct aggregation on tag/attribute column
apache,hudi,eb8e829b876d1e670d5651bd6f258ddced6b6df1,https://github.com/apache/hudi/commit/eb8e829b876d1e670d5651bd6f258ddced6b6df1,[HUDI-9612] Update schema resolver to inspect files with inserts/updates (#13586)  * Update schema resolver to inspect files with inserts/updates * move inspection internal to TableSchemaResolver  optimistically inspect if previously loaded commit metadata has insert/update to avoid extra search
itext,itext-java,0626cd422a275ac402aaa3aa34d92d17f934174f,https://github.com/itext/itext-java/commit/0626cd422a275ac402aaa3aa34d92d17f934174f,Do row adding in bulk  DEVSIX-8836
jar-analyzer,jar-analyzer,bfb2ce45b747b6a6a2de44afdf1fa4233d4aa80c,https://github.com/jar-analyzer/jar-analyzer/commit/bfb2ce45b747b6a6a2de44afdf1fa4233d4aa80c,[BUG] 数据量过大时搜索会卡住，已添加等待进度条 @4ra1n
apache,pinot,2cf81becffbb1e4df5985f973219b451617f4646,https://github.com/apache/pinot/commit/2cf81becffbb1e4df5985f973219b451617f4646,Enhance REGEXP_LIKE to scan dictionary when dictionary is small (#16478)
netty,netty,f82c5f0e4efba2697ed26f39c0f830022074a481,https://github.com/netty/netty/commit/f82c5f0e4efba2697ed26f39c0f830022074a481,IoUring: Add the ability to allocate the buffers for the buffering in (#15457)  bulk  Motivation:  Before we did fill in a new buffer as soon as soon as we used one. This resulted in having buffer allocations spread out and so we could observe multiple TLB misses when the kernel tried to use the buffer ring. To reduce this we should better fill the whole ring at once and so allow the user to do a large allocation for the whole ring and then slice out the buffers as need while also still allow to do one allocation per buffer.  Modifications:  - Introduce IoUringBufferRingAllocator.allocateBulk(...) and use it from the IoUringBufferRing - Add abstract base class for IoUringBufferRingAllocator and extend it from our existing allocators. These now support large allocations or normal allocations  Result:  Better performance and much more flexibility
soot-oss,soot,877e278b5cdb86a2029eab6ae00e7ac9f212f7da,https://github.com/soot-oss/soot/commit/877e278b5cdb86a2029eab6ae00e7ac9f212f7da,Optimize typing: Abort if the current minimum was reached
assertj,assertj,aed17a70ed3998b90f15bf278ea14651350669f4,https://github.com/assertj/assertj/commit/aed17a70ed3998b90f15bf278ea14651350669f4,perf: improve performance on map key assertion - fix #3744
eclipse-jdtls,eclipse.jdt.ls,39a9fd8b3de0741e741a1ebae8967014e9477139,https://github.com/eclipse-jdtls/eclipse.jdt.ls/commit/39a9fd8b3de0741e741a1ebae8967014e9477139,Bypass AST model -> HTML Conversion for Markdown Comments (#3332)  - For JEP 467  JDT parses the markdown comments into the AST Model as a Javadoc node (TagElement & TextElement and Name/MemberRef/MethodRef for links)  converting to HTML. JDT-LS converts the HTML back to Markdown using Remark. - This bypasses the AST model -> HTML conversion by attempting to render the Javadoc comments directly as Markdown  in part because the content is already (mostly) Markdown  Signed-off-by: Roland Grunberg <rgrunber@redhat.com>
apache,iotdb,6fd3870b90a0b92487b6bdd59dacdc7db59e87a8,https://github.com/apache/iotdb/commit/6fd3870b90a0b92487b6bdd59dacdc7db59e87a8,Pipe: Optimized the table model writing latency by batching & Fixed the NPE caused by tablet event sorting
alibaba,fastjson2,1e8c833d91ea0634893dd2a815ce7aeea1293dab,https://github.com/alibaba/fastjson2/commit/1e8c833d91ea0634893dd2a815ce7aeea1293dab,simplify IOUtils::writeLocalDate
alibaba,spring-ai-alibaba,a19ee64e27b796726cf96a863700e100d1d7290f,https://github.com/alibaba/spring-ai-alibaba/commit/a19ee64e27b796726cf96a863700e100d1d7290f,feat(deepresearch): enable parallel researchTeamNode and parallel stream output (#1211)  * add plan  * add basic feature for parrallel by graph  * feat(deepresearch): enable parallel executor nodes by graph parallel node  * feat(deepresearch): add extra logs for stream process  * feat(graph): enable parallel stream output  * feat(deepresearch): optimization for parallel executor nodes configuration  * adjust code format  * add licence  * extract embedded AysncGenerator merging to streaming utils class  * add blank line
quarkusio,quarkus,50f0ebf7c2c9a575748efc940dac575911acb593,https://github.com/quarkusio/quarkus/commit/50f0ebf7c2c9a575748efc940dac575911acb593,Merge pull request #48206 from gsmet/analytics-object-mapper  Initialize only one ObjectMapper in Analytics
alibaba,fastjson2,f6fd8366c53f881d49f3de0986a2233871c39445,https://github.com/alibaba/fastjson2/commit/f6fd8366c53f881d49f3de0986a2233871c39445,optimize readString
netty,netty,c8245f2d691a6ceff4d2a1a4bfcf638420b182a5,https://github.com/netty/netty/commit/c8245f2d691a6ceff4d2a1a4bfcf638420b182a5,IoUring: Add support for recv bundles (#14840)  Motivation:  We can use recv bundles when its supported by the kernel to reduce overhead. See https://github.com/axboe/liburing/wiki/What's-new-with-io_uring-in-6.10#add-support-for-sendrecv-bundles  Modifications:  - Add code to support recv bundles to reduce overhead - Add test case  Result:  Make use of recv bundles
apache,pinot,f3a8740e369d4a3767d585a188c5ee42b591a952,https://github.com/apache/pinot/commit/f3a8740e369d4a3767d585a188c5ee42b591a952,Do not re-generate star-tree when index version changes (#15841)  Do not re-generate star-tree index when the index version changes. This is to prevent the overhead of re-generating all star-trees when the default setting changes. This also aligns with the behavior of forward index update.
SPLWare,esProc,ef1c2ae30ffb8039196365aa6a4c7a055bc54094,https://github.com/SPLWare/esProc/commit/ef1c2ae30ffb8039196365aa6a4c7a055bc54094,Do optimization.
apache,iotdb,24a93f578e999cc3559ccafe90315db640a16a31,https://github.com/apache/iotdb/commit/24a93f578e999cc3559ccafe90315db640a16a31,Fixed the concurrency bug of create timeseries / set(unset) template & Optimized the table log & Removed the useless timeseries/table lock (#15062)
ClickHouse,clickhouse-java,6377df1fada928453a4099769c35dea2d2867bd2,https://github.com/ClickHouse/clickhouse-java/commit/6377df1fada928453a4099769c35dea2d2867bd2,Removed unnecessary object creation. Added executor pool configuration.
apache,pdfbox,4438b8fdc67a3a9ebfb194595d0e81f88b708a37,https://github.com/apache/pdfbox/commit/4438b8fdc67a3a9ebfb194595d0e81f88b708a37,PDFBOX-5996: Set size for ByteArrayOutputStreams  as suggested by Axel Howind  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1925304 13f79535-47bb-0310-9956-ffa450edef68
apache,hudi,eda56edac7f086c2db5d947e97a5cb89f2da07d6,https://github.com/apache/hudi/commit/eda56edac7f086c2db5d947e97a5cb89f2da07d6,[HUDI-9435] Use cache to get table schema from commit metadata (#13323)
apache,pinot,060018502b4c07849c94051fee36f1fad09d1755,https://github.com/apache/pinot/commit/060018502b4c07849c94051fee36f1fad09d1755,[perf] Run Inverted Index Before Other Operators (#14764)
jhy,jsoup,4a4602387d08458c463be57a26e74dc91d58e218,https://github.com/jhy/jsoup/commit/4a4602387d08458c463be57a26e74dc91d58e218,Use TokenData to simplify String + StringBuilder use (#2304)  Goal of minimizing new StringBuilders on each new parse  and simplifying the code.  Gives a decent GC reduction
dbeaver,dbeaver,c476c0293fdb0b22463c29e81c14172641719dd4,https://github.com/dbeaver/dbeaver/commit/c476c0293fdb0b22463c29e81c14172641719dd4,#35466 Launch performance fix
apache,flink,81f882bcf79770072f3cee9a026c658ed9b04219,https://github.com/apache/flink/commit/81f882bcf79770072f3cee9a026c658ed9b04219,[FLINK-36989][runtime] Fix scheduler benchmark regression caused by ConsumedSubpartitionContext
hazelcast,hazelcast,30630a841697b2ff5b1cafb27c429d194511c1b3,https://github.com/hazelcast/hazelcast/commit/30630a841697b2ff5b1cafb27c429d194511c1b3,Balance batched invalidation events across all event threads (#4432)  During workload validation for large client counts with near cache enabled we encountered a steadily increasing operation latency over the run. An investigation determined the root cause was the event queue filling up due to all invalidations for all clients being scheduled on a single event thread instead of being balanced across the thread pool. The full write up can be found [here](https://hazelcast.atlassian.net/wiki/spaces/TES/pages/6009913345/6k+clients+near+cache+failure+analysis).  This change causes invalidation events to be balanced across the threads by using a key derived from the listener registration id instead of the subscriber id (which is always the members local address). All events for the same listener will be processed on the same thread.  Fixes [DEX-437](https://hazelcast.atlassian.net/browse/DEX-437)  Checklist:  - [x] Labels (`Type:`  `Source:`  `Module:`) and Milestone set - [x] Request reviewers if possible  [DEX-437]: https://hazelcast.atlassian.net/browse/DEX-437?atlOrigin=eyJpIjoiNWRkNTljNzYxNjVmNDY3MDlhMDU5Y2ZhYzA5YTRkZjUiLCJwIjoiZ2l0aHViLWNvbS1KU1cifQ  GitOrigin-RevId: 3f32def0b69b50e781e91926c94a11bf63653d5c
648540858,wvp-GB28181-pro,98ea5846fec525ec234c5fbf07c53c0d8aff03ba,https://github.com/648540858/wvp-GB28181-pro/commit/98ea5846fec525ec234c5fbf07c53c0d8aff03ba,心跳入库 支持批量入库
jline,jline3,38a846776013cae915c769596352ee35052dc379,https://github.com/jline/jline3/commit/38a846776013cae915c769596352ee35052dc379,enhancement: only compute suggestions in the Nano editor if something has changed (#1327)
elunez,eladmin,41ccc1f6e6cdba523be3c459854ef316a4d5dcd8,https://github.com/elunez/eladmin/commit/41ccc1f6e6cdba523be3c459854ef316a4d5dcd8,refactor: 从CacheConfig注解中移除keyGenerator，优化Redis配置
trinodb,trino,6abd5872881a21ea0d589002f0505b17954c9d19,https://github.com/trinodb/trino/commit/6abd5872881a21ea0d589002f0505b17954c9d19,Clean up SimplePageWithPositionComparator  Converts fields in SimplePageWithPositionComparator from List to arrays
ClickHouse,clickhouse-java,7ce2cd8ac72f208940bbb9ed8fc8185daca63871,https://github.com/ClickHouse/clickhouse-java/commit/7ce2cd8ac72f208940bbb9ed8fc8185daca63871,Merge pull request #2254 from ClickHouse/perf_jdbc_improvements  [Perf] fixed by index perf. added using ImmutableMap
camunda,camunda,cd7d03c17aa6d841e1305089e9302498c929cb0b,https://github.com/camunda/camunda/commit/cd7d03c17aa6d841e1305089e9302498c929cb0b,perf: avoid repeated evaluation of mapping rules within the same request
flowable,flowable-engine,de408003dd346054895a9281419c7dbb90324c76,https://github.com/flowable/flowable-engine/commit/de408003dd346054895a9281419c7dbb90324c76,Don't check for satisfied sentries for changing case instance state  only for migration
apache,seatunnel,bfd70cd49badc02749be9af65549c495f154ffc4,https://github.com/apache/seatunnel/commit/bfd70cd49badc02749be9af65549c495f154ffc4,[Fix][Zeta] Avoid redundant checkpoint reads when disabled checkpoint (#9552)
apache,hudi,346e5b5690d8e9d75a072f4ff9ee9a318d59305b,https://github.com/apache/hudi/commit/346e5b5690d8e9d75a072f4ff9ee9a318d59305b,[HUDI-9572] Minor performance and style improvements for FileGroupReader (#13614)
google,error-prone,31074b550a366adcdfb286824c30848bb7d371d6,https://github.com/google/error-prone/commit/31074b550a366adcdfb286824c30848bb7d371d6,PUBLIC: Remove an unnecessary `ImmutableMap.copyOf`.  PiperOrigin-RevId: 704498687
quarkusio,quarkus,5e4632e004e1b7a7fc6e6a2c6f05e2f29f9a7bc3,https://github.com/quarkusio/quarkus/commit/5e4632e004e1b7a7fc6e6a2c6f05e2f29f9a7bc3,Optimize MethodKey initialization and hashCode  Let's stay away from Objects.hash() as it allocates a new array every time to pass the parameters. When the map is resized quite a lot  it can start causing issues.
camunda,camunda,4ae5db3927bf480516d8bc5c92295b2d17fea93c,https://github.com/camunda/camunda/commit/4ae5db3927bf480516d8bc5c92295b2d17fea93c,fix: create meters once to avoid gauge re-registration
apache,pinot,2f76e371968152fd428e08b2e66b196328920786,https://github.com/apache/pinot/commit/2f76e371968152fd428e08b2e66b196328920786,Reuse Kafka admin client for better performance (#16129)  Co-authored-by: KKCorps <kartik@startee.ai>
soot-oss,soot,4047aae55472e871d7c4c100639e7e6abce4e424,https://github.com/soot-oss/soot/commit/4047aae55472e871d7c4c100639e7e6abce4e424,Improve type assigner performance  Parallelize minimize typing check and reuse local defs/uses.
apache,pinot,10de3d0fc2f1bf1f6de496915add0718a9fa3c0a,https://github.com/apache/pinot/commit/10de3d0fc2f1bf1f6de496915add0718a9fa3c0a, Make use of move APIs instead of copy segments from staging directory to output directory in the SparkSegmentGenerationJobRunner #14746 (#14755)
Konloch,bytecode-viewer,98e5dbbb201a1fa814eb419d7356913aecdf01e5,https://github.com/Konloch/bytecode-viewer/commit/98e5dbbb201a1fa814eb419d7356913aecdf01e5,Merge pull request #535 from oraveczandrew/dex2jar-opt  skip compression & decompression when using Dex2Jar
apache,hudi,b40d22a67d1aa25d882b22b39ba858129f509427,https://github.com/apache/hudi/commit/b40d22a67d1aa25d882b22b39ba858129f509427,[HUDI-8190] Implement efficient streaming reads for HoodieDataBlocks (#11924)
languagetool-org,languagetool,1951f9f1b3a73983fb1b5ab9bcabbbfd2ae61828,https://github.com/languagetool-org/languagetool/commit/1951f9f1b3a73983fb1b5ab9bcabbbfd2ae61828,Optimizations  part 2 (#11064)  * Added caching of the rules to the RuleFilterCreator  Creator is now a singleton as well.  * Got rid of duplicated `MorfologikFrenchSpellerRule` objects.  * Avoid multiple instantiations of `MorfologikFrenchSpellerRule`  It is really heavy and we need to make a CacheKey consistent: - all bundles obtained via ResourceBundleTool - ResourceBundleWithFallback have proper hashCode and equals methods  * Added objects equality check  * Propagate IOException from the MorfologikFrenchSpellerRule constructor
camunda,camunda,c6e58fd0d48101eae8b76a98bc66572e079d2ffe,https://github.com/camunda/camunda/commit/c6e58fd0d48101eae8b76a98bc66572e079d2ffe,fix: parse as number directly
jplag,JPlag,7dfbf681168e5eb0421464f26b87de4d8568175e,https://github.com/jplag/JPlag/commit/7dfbf681168e5eb0421464f26b87de4d8568175e,Merge pull request #2412 from jplag/feature/comparison-performance  Improve the comparison algorithm performance for large workloads
apache,incubator-seata,aba742df117f24c4526690e253076d884a3154c4,https://github.com/apache/incubator-seata/commit/aba742df117f24c4526690e253076d884a3154c4,optimize: optimize seata client I/O processing by adjusting thread count (#7170)
spring-projects,spring-data-jpa,5aba123e841eeeeecc4c3726183882b6dbcb105c,https://github.com/spring-projects/spring-data-jpa/commit/5aba123e841eeeeecc4c3726183882b6dbcb105c,Replace regex with startsWith / endsWith check for LIKE pattern detection.  Signed-off-by: Giheon Do <dgh0001@naver.com> Closes #3932
apache,iotdb,6b38b5d5415848d12a825a52116f39154445224b,https://github.com/apache/iotdb/commit/6b38b5d5415848d12a825a52116f39154445224b,Optimize sort properties of JoinNode in case of JOIN USING
keycloak,keycloak,4ef178242fabbe3624dfd79f0fb117399fd540d3,https://github.com/keycloak/keycloak/commit/4ef178242fabbe3624dfd79f0fb117399fd540d3,Enable LDAP connection pool by default when using the Admin UI  Closes #35852  Signed-off-by: Alexander Schwartz <aschwart@redhat.com>
opentripplanner,OpenTripPlanner,cb810498275544f0e60c68a68758d84a8a5c500e,https://github.com/opentripplanner/OpenTripPlanner/commit/cb810498275544f0e60c68a68758d84a8a5c500e,Revert "Street search: traverse edges which may return multiple states"  This reverts commit 4d11307a
netty,netty,ac9ea92461cb29b0d6c6c48d28d9bbf6cf3a0cfb,https://github.com/netty/netty/commit/ac9ea92461cb29b0d6c6c48d28d9bbf6cf3a0cfb,Replace custom EnumNameMap with switch statement in HttpMethod (#15287)  Motivation:  It seems like a regular switch statement in modern Java outperforms a custom hashmap.  Modification:  Replaced custom EnumNameMap with a switch statement  also removed 3 "if" statements including "fast path" as in real life this is not a case and incoming strings from the decoder are always a new strings.  Result:  Simpler and faster (on the lts JDK  didn't check with older versions) code.  Benchmark:  ``` @Fork(value = 1) @BenchmarkMode(Mode.AverageTime) @State(Scope.Benchmark) @Warmup(iterations = 3) @Measurement(iterations = 3) @OutputTimeUnit(TimeUnit.NANOSECONDS) public class HttpMethodBenchmark {   @Param({"GET"  "UNKNOWN"  "POST"}) private String param;  @Benchmark public HttpMethod enumNameMapLookup() { return HttpMethodLookupEnumMap.forName(param); }  @Benchmark public HttpMethod switchLookup() { return HttpMethodLookupSwitch.forName(param); }  public enum HttpMethod { OPTIONS  GET  HEAD  POST  PUT  PATCH  DELETE  TRACE  CONNECT }  static class HttpMethodLookupEnumMap { private static final EnumNameMap<HttpMethod> map;  static { map = new EnumNameMap<>( new EnumNameMap.Node<>("OPTIONS"  HttpMethod.OPTIONS)  new EnumNameMap.Node<>("GET"  HttpMethod.GET)  new EnumNameMap.Node<>("HEAD"  HttpMethod.HEAD)  new EnumNameMap.Node<>("POST"  HttpMethod.POST)  new EnumNameMap.Node<>("PUT"  HttpMethod.PUT)  new EnumNameMap.Node<>("PATCH"  HttpMethod.PATCH)  new EnumNameMap.Node<>("DELETE"  HttpMethod.DELETE)  new EnumNameMap.Node<>("TRACE"  HttpMethod.TRACE)  new EnumNameMap.Node<>("CONNECT"  HttpMethod.CONNECT) ); }  public static HttpMethod forName(String name) { return map.get(name); }  private static final class EnumNameMap<T> { private final Node<T>[] values; private final int valuesMask;  EnumNameMap(Node<T>... nodes) { values = (Node<T>[]) new Node[findNextPositivePowerOfTwo(nodes.length)]; valuesMask = values.length - 1; for (Node<T> node : nodes) { int i = hashCode(node.key) & valuesMask; if (values[i] != null) { throw new IllegalArgumentException("index " + i + " collision"); } values[i] = node; } }  T get(String name) { Node<T> node = values[hashCode(name) & valuesMask]; return node == null || !node.key.equals(name) ? null : node.value; }  private static int hashCode(String name) { return name.hashCode() >>> 6; }  private static int findNextPositivePowerOfTwo(int value) { return 1 << (32 - Integer.numberOfLeadingZeros(value - 1)); }  static final class Node<T> { final String key; final T value;  Node(String key  T value) { this.key = key; this.value = value; } } } }  static class HttpMethodLookupSwitch { public static HttpMethod forName(String name) { switch (name) { case "OPTIONS": return HttpMethod.OPTIONS; case "GET":     return HttpMethod.GET; case "HEAD":    return HttpMethod.HEAD; case "POST":    return HttpMethod.POST; case "PUT":     return HttpMethod.PUT; case "PATCH":   return HttpMethod.PATCH; case "DELETE":  return HttpMethod.DELETE; case "TRACE":   return HttpMethod.TRACE; case "CONNECT": return HttpMethod.CONNECT; default:        return null; } } }  } ```  Result:  `# VM version: JDK 21.0.7  OpenJDK 64-Bit Server VM  21.0.7+6-LTS ` ``` Benchmark                              (param)  Mode  Cnt  Score   Error  Units HttpMethodBenchmark.enumNameMapLookup      GET  avgt    3  2.442 ± 0.247  ns/op HttpMethodBenchmark.enumNameMapLookup  UNKNOWN  avgt    3  1.430 ± 0.021  ns/op HttpMethodBenchmark.enumNameMapLookup     POST  avgt    3  2.399 ± 0.220  ns/op HttpMethodBenchmark.switchLookup           GET  avgt    3  1.682 ± 0.086  ns/op HttpMethodBenchmark.switchLookup       UNKNOWN  avgt    3  0.533 ± 0.149  ns/op HttpMethodBenchmark.switchLookup          POST  avgt    3  1.598 ± 0.110  ns/op ```
apache,paimon,3e911f647bc11304e0c5c91176081617e8aec948,https://github.com/apache/paimon/commit/3e911f647bc11304e0c5c91176081617e8aec948,[core] Avoid involve all the manifest when full compaction manifest without delete partition (#5618)
graphhopper,graphhopper,17494063d883d9f30e1070bde2378cd8c8f0e0d9,https://github.com/graphhopper/graphhopper/commit/17494063d883d9f30e1070bde2378cd8c8f0e0d9,navigate GET: disabling CH only required if more than 2 points
apache,hudi,b202fc6a105965d6f121a6c0fb8d4b3c3807bbaa,https://github.com/apache/hudi/commit/b202fc6a105965d6f121a6c0fb8d4b3c3807bbaa,[MINOR] Move field ordering lookup outside of loop for proto conversion (#12271)
redisson,redisson,fed0dcd1995bbd690322cd06ea49e3b62aac0e28,https://github.com/redisson/redisson/commit/fed0dcd1995bbd690322cd06ea49e3b62aac0e28,Use `RMap.fastPut()` instead of simple `RMap.put()` for Tomcat SSO  Signed-off-by: David Benes <david.benes@cogniware.com>
apache,maven,f2bc813529b112f19526b70b5063464bc98c7eb7,https://github.com/apache/maven/commit/f2bc813529b112f19526b70b5063464bc98c7eb7,[MNG-8575] Replace a list with O(N²) performance by O(N) at least during iteration. (#2092)  * Replace a list with O(N²) performance by O(N) at least during iteration. * Remove a comment which is not true anymore. * Replace `CopyOnWriteArrayList` by `LinkedHashSet` for avoiding to iterate over all previous values every time that a new value is added. * Short-circuit for `List.isEmpty()`: stop at the first element found  without iterating over all elements.
apache,atlas,ab3257e7ba6548099639132e37c954986e49ea03,https://github.com/apache/atlas/commit/ab3257e7ba6548099639132e37c954986e49ea03,ATLAS-5006 : Atlas incremental export takes too much time (almost equivalent to bootstrap export with the entire data) (#312)
crate,crate,405a25ccbd5476ed8f99542fa18ee3b4abbdec2a,https://github.com/crate/crate/commit/405a25ccbd5476ed8f99542fa18ee3b4abbdec2a,Don't create all thread pool stats per ThreadPools bean property  `threadPool.stats()` created a list of stats for all thread pools for each threadpool bean property.  This changes it to instead only create stats for the specific property.
trinodb,trino,5d41f5d352c288885c4ebb3b232e1123a0720aa7,https://github.com/trinodb/trino/commit/5d41f5d352c288885c4ebb3b232e1123a0720aa7,Reuse blocks for dictionaries
netty,netty,c88cdcd3ca6cf5b0cbd0a77ca79f8a59d562f052,https://github.com/netty/netty/commit/c88cdcd3ca6cf5b0cbd0a77ca79f8a59d562f052,Remove Result instance allocation in MqttDecoder (#15193)  Motivation:  MqttDecoder allocates a number of `Result` class instances to decode almost any MQTT message. This reduces the performance and creates more garbage  making life harder for the garbage collector later.  ![image](https://github.com/user-attachments/assets/c2df372b-dd79-48ba-8cfd-44b0c72cb440)  Modification:  Removed `Result` class instance allocations in MqttDecoder.  Result:  Reduced class instance allocations lead to improved performance and reduced garbage.
prestodb,presto,45c330598f7512d04b381954c46b1115b6adb052,https://github.com/prestodb/presto/commit/45c330598f7512d04b381954c46b1115b6adb052,Support native non-equal lookup join planning  This change adds an extractor to traverse the Join plan and get lookup variables in different PlanNode  then stores the lookup variables in LookupJoinNode  which enables index lookup join with non-equal join condition for native execution. Additional changes are made to ensure lookup variables are not pruned by other optimizers.
YunaiV,ruoyi-vue-pro,2a9dffb6edeb057762c771b9858c8be2b0cce8b9,https://github.com/YunaiV/ruoyi-vue-pro/commit/2a9dffb6edeb057762c771b9858c8be2b0cce8b9,!1246 【性能优化】循环中减少不必要的查询 update r/yudao/module/promotion/service/coupon/CouponServiceImpl.java. Merge pull request !1246 from 山野羡民/N/A
Azure,azure-sdk-for-java,7627334e99e67ee0a13df4006f926357b13b95c8,https://github.com/Azure/azure-sdk-for-java/commit/7627334e99e67ee0a13df4006f926357b13b95c8,Internal: Few memory allocation optimizations on the point-read hot-path (#45505)  * Memory allocation optimizations  * Update RntbdRequestArgs.java  * Update ThinClientStoreModel.java  * Update RxGatewayStoreModel.java
apache,hive,906f61cb9972ac642fbf4ac8e01ab6be29f2df11,https://github.com/apache/hive/commit/906f61cb9972ac642fbf4ac8e01ab6be29f2df11,HIVE-29077: Reduce HMS calls while adding entries into the transactionListeners while abortTxn (#5946)
spring-projects,spring-ai,268248ba3c0f07709c164887417e3ce1b51cee21,https://github.com/spring-projects/spring-ai/commit/268248ba3c0f07709c164887417e3ce1b51cee21,Fix PgVectorStore doDelete function as batch  Signed-off-by: CChuYong <yeongmin1061@gmail.com>
